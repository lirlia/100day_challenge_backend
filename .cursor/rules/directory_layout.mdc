# プロジェクトディレクトリレイアウト

## 概要
このドキュメントでは、プロジェクトのディレクトリ構造と各ディレクトリの役割について説明します。

## ディレクトリ構造

```
template/
├── cmd/
│   └── server/
│       └── main.go                 # アプリケーションのエントリーポイント
├── internal/
│   ├── domain/
│   │   └── model/                  # ドメインモデルの定義
│   ├── usecase/                    # ユースケースの実装
│   ├── interface/
│   │   ├── handler/               # HTTPハンドラーの実装
│   │   ├── repository/            # リポジトリのインターフェース定義
│   │   └── presenter/             # プレゼンテーション層の実装
│   └── infrastructure/
│       ├── persistence/           # データベース関連の実装
│       └── server/                # サーバー設定とミドルウェア
├── api/
│   └── openapi.yaml               # OpenAPIスキーマ定義
├── web/
│   ├── templates/                 # HTMLテンプレート
│   └── static/                    # 静的ファイル（CSS, JS, 画像など）
├── docker/
│   └── mysql/
│       └── Dockerfile             # MySQLコンテナの設定
├── go.mod                         # Goモジュール定義
├── go.sum                         # 依存関係のチェックサム
├── Taskfile.yml                   # タスクランナーの設定
└── README.md                      # プロジェクトの説明
```

## 各ディレクトリの詳細説明

### cmd/server/
アプリケーションのエントリーポイントを配置するディレクトリです。
- `main.go`: アプリケーションの起動処理、依存関係の注入、サーバーの起動などを実装

### internal/domain/model/
ドメインモデルを定義するディレクトリです。
- ビジネスロジックの中核となるモデルを定義
- エンティティ、値オブジェクト、ドメインイベントなどを配置

### internal/usecase/
ユースケースの実装を配置するディレクトリです。
- ビジネスロジックの実装
- ドメインモデルを使用した具体的な処理の実装

### internal/interface/
外部とのインターフェースを定義・実装するディレクトリです。

#### handler/
HTTPリクエストを処理するハンドラーを実装
- リクエストのバリデーション
- ユースケースの呼び出し
- レスポンスの生成

#### repository/
データアクセスのインターフェースを定義
- データベース操作の抽象化
- リポジトリパターンのインターフェース定義

#### presenter/
プレゼンテーション層の実装
- データの整形
- レスポンスの形式変換

### internal/infrastructure/
インフラストラクチャ層の実装を配置するディレクトリです。

#### persistence/
データベース関連の実装
- リポジトリの具体的な実装
- データベース接続の管理

#### server/
サーバー関連の実装
- サーバー設定
- ミドルウェアの実装
- ルーティングの設定

### api/
APIの定義を配置するディレクトリです。
- OpenAPIスキーマの定義
- APIドキュメントの生成

### web/
フロントエンド関連のファイルを配置するディレクトリです。

#### templates/
HTMLテンプレート
- Goのテンプレートエンジン用のファイル

#### static/
静的ファイル
- CSS、JavaScript、画像などの静的ファイル

### docker/
Docker関連の設定ファイルを配置するディレクトリです。

#### mysql/
MySQLコンテナの設定
- Dockerfile
- データベース初期化スクリプト

## 依存関係の方向
クリーンアーキテクチャの原則に従い、依存関係は以下の方向に流れます：

1. 外側の層（infrastructure, interface）は内側の層（usecase, domain）に依存
2. 内側の層は外側の層に依存しない
3. 依存性逆転の原則に従い、インターフェースを介して依存関係を管理 