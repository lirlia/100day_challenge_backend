---
description: 
globs: 
alwaysApply: true
---
# Your rule content

- `template` ディレクトリ配下を丸ごとコピーして、指定の日のディレクトリをまず最初に作成してください（例：`day3` の銀行アプリ といわれたら `day3_bank_app` というディレクトリを作ること)

## 作成するアプリについて
- いまから day100 まで毎日異なるアプリを作ります
- 同じドメインのアプリ(フォーカスを変えるはあり)はなしです
- 言語は **TypeScript**, フレームワークは **Next.js (App Router)** です
- 簡素で構わないので実装した機能を一通り操作できるwebページを用意してください
  - ユーザが必要なものについては、認証ページを作成するのではなく簡単にユーザを切り替えられる機能で代替してください (例: `userId` をクエリパラメータやシンプルなUIで切り替える)
- ログは **`console.log`** を基本とし、必要に応じてデバッグに役立つ情報を出力してください
- エラーハンドリングは標準の `try...catch` を基本とし、複雑なラップは不要です。エラー発生時は **`console.error`** でログを出力してください。
- DBは **SQLite** を利用します。(`template/prisma/dev.db`)
- DBスキーマの変更は **Prisma Migrate** (`npx prisma migrate dev`) を使用してください。**マイグレーションファイルはコミット対象**です。
- DBアクセスには **Prisma Client** を利用してください。トランザクションは必要に応じて `prisma.$transaction` を使用してください。
- APIは **Next.js Route Handlers** (`app/api/.../route.ts`) で実装してください。スキーマ駆動開発は必須ではありません。
- 細かいエラーハンドリングやセキュリティ観点については目を瞑ってください。
- Linter (ESLint) の警告やエラーは可能な範囲で修正してください。
- アーキテクチャはシンプルさを保ち、厳密なレイヤリングは不要です。
- 起動はローカルでのみ行うためSSLなどは不要です。
- サーバの起動は別のターミナルで行い、curl などのテストが成立するようにしてください
- 画像は https://picsum.photos のものを直接リンクで使用してください
- サーバは localhost:3001 で起動てください

## デザイン

- スタイリングは **Tailwind CSS** を利用してください。
- レスポンシブデザインを採用する

## 使用技術

| 種類           | 使うもの                 | 理由                                                              |
| -------------- | ------------------------ | ----------------------------------------------------------------- |
| フレームワーク | Next.js (App Router)     | フルスタック開発に適しており、現在の主流                                  |
| 言語           | TypeScript               | 型安全性による開発効率向上                                        |
| DB             | SQLite                   | セットアップが容易でローカル開発向き                                |
| ORM            | Prisma                   | TypeScriptとの親和性が高く、型安全なDBアクセス、マイグレーション機能 |
| API実装        | Next.js Route Handlers   | フレームワーク標準機能でシンプル                                  |
| スタイリング   | Tailwind CSS             | 迅速なUI構築が可能                                                |
| パッケージ管理 | npm                      | Node.js標準                                                       |
| タスクランナー | npm scripts              | `package.json` で完結                                             |
| ホットリロード | `next dev`               | Next.js 標準機能                                                  |

## 必ずやること
- 新しい日のディレクトリを作成したら、`template` ディレクトリからコピーした後、**`package.json` の `name` フィールド** を適切なもの (例: `day3_bank_app`) に変更してください。
- コピーしたディレクトリ直下の README に今回作るアプリの設計内容を記載してください(append ではなく modify です)
- **`.env` ファイルの `DATABASE_URL`** は `file:./dev.db` のままで通常は変更不要ですが、必要に応じて調整してください。
- DBスキーマを変更した場合は `prisma migrate deploy` でお願いします。(`prisma migrate dev` だと安全ではありますが、interactive になって生産性が落ちるため)
- 不要なファイルやコードは削除してください

## アプリケーションの作成の流れについて

以下の順番で作成をしてください。また、各工程ごとに確認を取る必要はありません。

0. **プロジェクトの仕様決定**
   - 私がテーマを決めるので、その壁打ちを実施
   - 仕様が不明確な場合は質問をする
   - 仕様が決定したら、作業順序を報告する

1. **プロジェクト初期化**
   - テンプレートからプロジェクトコピー
   - 必要な設定ファイルの更新
   - 基本レイアウト作成

2. **データモデリングとDB設定**
   - 主要エンティティの定義
   - リレーションシップの設計
   - マイグレーションとシードデータ作成

3. **APIエンドポイント実装**
   - データ取得APIの作成
   - データ更新・作成APIの実装
   - 最低限のエラーハンドリング

4. **ユーザー識別機構**
   - シンプルなユーザー切替UI
   - ユーザーコンテキスト作成

5. **UIコンポーネント実装**
   - 一覧表示ページ
   - 詳細表示ページ
   - フォームと操作UI

6. **主要業務フロー実装**
   - 主要な操作シーケンスの実装
   - データの関連処理
   - 基本的なフィードバック表示

7. **デバッグとテスト**
   - curl などで API の動作確認（テストはあなたが実施してください）
   - MCP 経由での playwright による動作確認
   - エラーハンドリングの確認
   - 不要なファイルやコードは削除してください

8. **ドキュメント作成**
   - README の更新
   - rules/knowledge.md の更新


## 気をつけること
- rm を実施する場合は /bin/rm を使ってください（別のコマンドが alias 設定されているため）
- cd するときは pwd でカレントディレクトリを確認してから cd してください
- types やライブラリのバージョンはあなたが学習しているものと違う可能性があるため、使用前に定義を確認し使い方を理解した上でコードを記載してください
- Next.js 15 から Route Handler の params などの動的 API が非同期になり、アクセス前に await する必要があるため、handleGitRequest 関数内で params オブジェクト自体を await してからプロパティにアクセスしてください
- バグや不具合が発生した場合は、まず自分で調査してみてください。
   - デバッグログを出力して、どこでどういうエラーが出ているかを確認してください。
   - 調査の結果、私に確認が必要な場合はその旨を伝えてください。
   - 解消したらデバッグログを削除してください。

## 禁止

- こちらからアクションしない限りは勝手に生成を止めずコードを生成し続けてください。
- 作業は必ず `template` ディレクトリからコピーした `dayXX_xxxx` 配下のディレクトリ内で行うこと。それ以外の箇所でのファイルの作成は禁止する
- 完成したら自分自身で正しくアクセスできて表示できるか？（最低限APIレベルでの確認）を行ってください。
- `package.json` の `next`, `react` 等の主要な依存パッケージバージョンを勝手に変更する行為。
- `package.json` の スクリプトの既存のコマンドを勝手に変更する行為

## 実装時の注意点 (汎用)

- **ライブラリ/APIの事前調査:**
    - 主要な外部ライブラリやAPIを使用する際は、**コード生成前にその使い方（主要な関数、引数、期待されるデータ構造、必要なデータ変換等）を十分に調査・確認**してください。
    - 不明な点や複数の選択肢がある場合は、安易に推測せず、**確認または提案**を行ってください。

- **状態管理の明確化:**
    - リクエストをまたいで状態を保持する必要がある場合（例: 認証トークン、一時データ、チャレンジ）、**どこに（例: DBの特定モデル、セッションストレージ）、何を（データ項目）、どのように（有効期限、検索キー）管理するか**を明記してください。インメモリでの安易な状態保持は避け、DBや適切なストレージを利用する方針を指示してください。

- **複雑なフローの段階的実装:**
    - 複数のステップやコンポーネントが連携する複雑な機能を実装する場合、**機能を小さな単位に分割**し、**各単位の実装と動作確認**を段階的に進めるように指示してください。（例: 「まずAPIエンドポイントを実装し`curl`でテスト、次にUIを接続」）

- **設計と実装の整合性:**
    - 最初に設計（シーケンス図など）を提示した場合でも、実装中に**より良い方法が見つかった場合**や**設計との乖離が発生しそうな場合**は、立ち止まって確認や相談をするように促してください。

## 実装のアイデアだしについて

- rules/knowledge.md に記載されているアプリケーションとは被らないようにしてください
- バックエンドの学習を目的としているため、フロントエンドの学習を目的としたアプリケーションは避けてください
- 可能な限り、実際の業務で使われるようなアプリケーションを想定してください
- ただし、あまりにも大規模なアプリケーションは避けてください
- また、あまりにも簡単なアプリケーションも避けてください
  - 例えば、ToDoアプリやメモアプリなどは避けてください
- 提案は10個以上してください
- 提案は、実装の難易度や学習効果を考慮して、優先順位をつけてください
