// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// APISessionGet implements GET /api/session operation.
	//
	// 現在のセッション情報取得.
	//
	// GET /api/session
	APISessionGet(ctx context.Context) (APISessionGetRes, error)
	// APISessionPost implements POST /api/session operation.
	//
	// セッション作成（ユーザー選択）.
	//
	// POST /api/session
	APISessionPost(ctx context.Context, req *APISessionPostReq) (APISessionPostRes, error)
	// APITodosArchivedGet implements GET /api/todos/archived operation.
	//
	// アーカイブされたTodo一覧取得.
	//
	// GET /api/todos/archived
	APITodosArchivedGet(ctx context.Context, params APITodosArchivedGetParams) (*TodoList, error)
	// APITodosGet implements GET /api/todos operation.
	//
	// Todo一覧取得.
	//
	// GET /api/todos
	APITodosGet(ctx context.Context, params APITodosGetParams) (*TodoList, error)
	// APITodosIDDelete implements DELETE /api/todos/{id} operation.
	//
	// Todoアーカイブ.
	//
	// DELETE /api/todos/{id}
	APITodosIDDelete(ctx context.Context, params APITodosIDDeleteParams) (APITodosIDDeleteRes, error)
	// APITodosIDPut implements PUT /api/todos/{id} operation.
	//
	// Todo更新.
	//
	// PUT /api/todos/{id}
	APITodosIDPut(ctx context.Context, req *APITodosIDPutReq, params APITodosIDPutParams) (APITodosIDPutRes, error)
	// APITodosIDRestorePut implements PUT /api/todos/{id}/restore operation.
	//
	// アーカイブされたTodoの復活.
	//
	// PUT /api/todos/{id}/restore
	APITodosIDRestorePut(ctx context.Context, params APITodosIDRestorePutParams) (APITodosIDRestorePutRes, error)
	// APITodosPost implements POST /api/todos operation.
	//
	// Todo新規作成.
	//
	// POST /api/todos
	APITodosPost(ctx context.Context, req *APITodosPostReq) (APITodosPostRes, error)
	// APITodosSortPut implements PUT /api/todos/sort operation.
	//
	// Todoの並び順一括更新.
	//
	// PUT /api/todos/sort
	APITodosSortPut(ctx context.Context, req *APITodosSortPutReq) (APITodosSortPutRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
