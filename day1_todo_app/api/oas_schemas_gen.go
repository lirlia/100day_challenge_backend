// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
)

type APISessionPostReq struct {
	UserID int64 `json:"user_id"`
}

// GetUserID returns the value of UserID.
func (s *APISessionPostReq) GetUserID() int64 {
	return s.UserID
}

// SetUserID sets the value of UserID.
func (s *APISessionPostReq) SetUserID(val int64) {
	s.UserID = val
}

// APITodosIDDeleteNoContent is response for APITodosIDDelete operation.
type APITodosIDDeleteNoContent struct{}

func (*APITodosIDDeleteNoContent) aPITodosIDDeleteRes() {}

type APITodosIDPutBadRequest Error

func (*APITodosIDPutBadRequest) aPITodosIDPutRes() {}

type APITodosIDPutNotFound Error

func (*APITodosIDPutNotFound) aPITodosIDPutRes() {}

type APITodosIDPutReq struct {
	Title       OptString                 `json:"title"`
	Description OptString                 `json:"description"`
	Status      OptAPITodosIDPutReqStatus `json:"status"`
}

// GetTitle returns the value of Title.
func (s *APITodosIDPutReq) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *APITodosIDPutReq) GetDescription() OptString {
	return s.Description
}

// GetStatus returns the value of Status.
func (s *APITodosIDPutReq) GetStatus() OptAPITodosIDPutReqStatus {
	return s.Status
}

// SetTitle sets the value of Title.
func (s *APITodosIDPutReq) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *APITodosIDPutReq) SetDescription(val OptString) {
	s.Description = val
}

// SetStatus sets the value of Status.
func (s *APITodosIDPutReq) SetStatus(val OptAPITodosIDPutReqStatus) {
	s.Status = val
}

type APITodosIDPutReqStatus string

const (
	APITodosIDPutReqStatusNotStarted APITodosIDPutReqStatus = "not_started"
	APITodosIDPutReqStatusInProgress APITodosIDPutReqStatus = "in_progress"
	APITodosIDPutReqStatusDone       APITodosIDPutReqStatus = "done"
	APITodosIDPutReqStatusPending    APITodosIDPutReqStatus = "pending"
	APITodosIDPutReqStatusCancel     APITodosIDPutReqStatus = "cancel"
)

// AllValues returns all APITodosIDPutReqStatus values.
func (APITodosIDPutReqStatus) AllValues() []APITodosIDPutReqStatus {
	return []APITodosIDPutReqStatus{
		APITodosIDPutReqStatusNotStarted,
		APITodosIDPutReqStatusInProgress,
		APITodosIDPutReqStatusDone,
		APITodosIDPutReqStatusPending,
		APITodosIDPutReqStatusCancel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APITodosIDPutReqStatus) MarshalText() ([]byte, error) {
	switch s {
	case APITodosIDPutReqStatusNotStarted:
		return []byte(s), nil
	case APITodosIDPutReqStatusInProgress:
		return []byte(s), nil
	case APITodosIDPutReqStatusDone:
		return []byte(s), nil
	case APITodosIDPutReqStatusPending:
		return []byte(s), nil
	case APITodosIDPutReqStatusCancel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APITodosIDPutReqStatus) UnmarshalText(data []byte) error {
	switch APITodosIDPutReqStatus(data) {
	case APITodosIDPutReqStatusNotStarted:
		*s = APITodosIDPutReqStatusNotStarted
		return nil
	case APITodosIDPutReqStatusInProgress:
		*s = APITodosIDPutReqStatusInProgress
		return nil
	case APITodosIDPutReqStatusDone:
		*s = APITodosIDPutReqStatusDone
		return nil
	case APITodosIDPutReqStatusPending:
		*s = APITodosIDPutReqStatusPending
		return nil
	case APITodosIDPutReqStatusCancel:
		*s = APITodosIDPutReqStatusCancel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APITodosPostReq struct {
	Title       string                `json:"title"`
	Description OptString             `json:"description"`
	Status      APITodosPostReqStatus `json:"status"`
}

// GetTitle returns the value of Title.
func (s *APITodosPostReq) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *APITodosPostReq) GetDescription() OptString {
	return s.Description
}

// GetStatus returns the value of Status.
func (s *APITodosPostReq) GetStatus() APITodosPostReqStatus {
	return s.Status
}

// SetTitle sets the value of Title.
func (s *APITodosPostReq) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *APITodosPostReq) SetDescription(val OptString) {
	s.Description = val
}

// SetStatus sets the value of Status.
func (s *APITodosPostReq) SetStatus(val APITodosPostReqStatus) {
	s.Status = val
}

type APITodosPostReqStatus string

const (
	APITodosPostReqStatusNotStarted APITodosPostReqStatus = "not_started"
	APITodosPostReqStatusInProgress APITodosPostReqStatus = "in_progress"
	APITodosPostReqStatusDone       APITodosPostReqStatus = "done"
	APITodosPostReqStatusPending    APITodosPostReqStatus = "pending"
	APITodosPostReqStatusCancel     APITodosPostReqStatus = "cancel"
)

// AllValues returns all APITodosPostReqStatus values.
func (APITodosPostReqStatus) AllValues() []APITodosPostReqStatus {
	return []APITodosPostReqStatus{
		APITodosPostReqStatusNotStarted,
		APITodosPostReqStatusInProgress,
		APITodosPostReqStatusDone,
		APITodosPostReqStatusPending,
		APITodosPostReqStatusCancel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APITodosPostReqStatus) MarshalText() ([]byte, error) {
	switch s {
	case APITodosPostReqStatusNotStarted:
		return []byte(s), nil
	case APITodosPostReqStatusInProgress:
		return []byte(s), nil
	case APITodosPostReqStatusDone:
		return []byte(s), nil
	case APITodosPostReqStatusPending:
		return []byte(s), nil
	case APITodosPostReqStatusCancel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APITodosPostReqStatus) UnmarshalText(data []byte) error {
	switch APITodosPostReqStatus(data) {
	case APITodosPostReqStatusNotStarted:
		*s = APITodosPostReqStatusNotStarted
		return nil
	case APITodosPostReqStatusInProgress:
		*s = APITodosPostReqStatusInProgress
		return nil
	case APITodosPostReqStatusDone:
		*s = APITodosPostReqStatusDone
		return nil
	case APITodosPostReqStatusPending:
		*s = APITodosPostReqStatusPending
		return nil
	case APITodosPostReqStatusCancel:
		*s = APITodosPostReqStatusCancel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// APITodosSortPutNoContent is response for APITodosSortPut operation.
type APITodosSortPutNoContent struct{}

func (*APITodosSortPutNoContent) aPITodosSortPutRes() {}

type APITodosSortPutReq struct {
	TodoIds []int64 `json:"todo_ids"`
}

// GetTodoIds returns the value of TodoIds.
func (s *APITodosSortPutReq) GetTodoIds() []int64 {
	return s.TodoIds
}

// SetTodoIds sets the value of TodoIds.
func (s *APITodosSortPutReq) SetTodoIds(val []int64) {
	s.TodoIds = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Message OptString `json:"message"`
	Code    OptString `json:"code"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// GetCode returns the value of Code.
func (s *Error) GetCode() OptString {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val OptString) {
	s.Code = val
}

func (*Error) aPISessionGetRes()        {}
func (*Error) aPISessionPostRes()       {}
func (*Error) aPITodosIDDeleteRes()     {}
func (*Error) aPITodosIDRestorePutRes() {}
func (*Error) aPITodosPostRes()         {}
func (*Error) aPITodosSortPutRes()      {}

// NewOptAPITodosIDPutReqStatus returns new OptAPITodosIDPutReqStatus with value set to v.
func NewOptAPITodosIDPutReqStatus(v APITodosIDPutReqStatus) OptAPITodosIDPutReqStatus {
	return OptAPITodosIDPutReqStatus{
		Value: v,
		Set:   true,
	}
}

// OptAPITodosIDPutReqStatus is optional APITodosIDPutReqStatus.
type OptAPITodosIDPutReqStatus struct {
	Value APITodosIDPutReqStatus
	Set   bool
}

// IsSet returns true if OptAPITodosIDPutReqStatus was set.
func (o OptAPITodosIDPutReqStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAPITodosIDPutReqStatus) Reset() {
	var v APITodosIDPutReqStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAPITodosIDPutReqStatus) SetTo(v APITodosIDPutReqStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAPITodosIDPutReqStatus) Get() (v APITodosIDPutReqStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAPITodosIDPutReqStatus) Or(d APITodosIDPutReqStatus) APITodosIDPutReqStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Todo
type Todo struct {
	ID          OptInt64    `json:"id"`
	UserID      OptInt64    `json:"user_id"`
	Title       string      `json:"title"`
	Description OptString   `json:"description"`
	Status      TodoStatus  `json:"status"`
	SortOrder   OptInt      `json:"sort_order"`
	IsArchived  OptBool     `json:"is_archived"`
	CreatedAt   OptDateTime `json:"created_at"`
	UpdatedAt   OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Todo) GetID() OptInt64 {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *Todo) GetUserID() OptInt64 {
	return s.UserID
}

// GetTitle returns the value of Title.
func (s *Todo) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Todo) GetDescription() OptString {
	return s.Description
}

// GetStatus returns the value of Status.
func (s *Todo) GetStatus() TodoStatus {
	return s.Status
}

// GetSortOrder returns the value of SortOrder.
func (s *Todo) GetSortOrder() OptInt {
	return s.SortOrder
}

// GetIsArchived returns the value of IsArchived.
func (s *Todo) GetIsArchived() OptBool {
	return s.IsArchived
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Todo) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Todo) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Todo) SetID(val OptInt64) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *Todo) SetUserID(val OptInt64) {
	s.UserID = val
}

// SetTitle sets the value of Title.
func (s *Todo) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Todo) SetDescription(val OptString) {
	s.Description = val
}

// SetStatus sets the value of Status.
func (s *Todo) SetStatus(val TodoStatus) {
	s.Status = val
}

// SetSortOrder sets the value of SortOrder.
func (s *Todo) SetSortOrder(val OptInt) {
	s.SortOrder = val
}

// SetIsArchived sets the value of IsArchived.
func (s *Todo) SetIsArchived(val OptBool) {
	s.IsArchived = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Todo) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Todo) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

func (*Todo) aPITodosIDPutRes()        {}
func (*Todo) aPITodosIDRestorePutRes() {}
func (*Todo) aPITodosPostRes()         {}

// Ref: #/components/schemas/TodoList
type TodoList struct {
	Items      []Todo       `json:"items"`
	NextCursor OptNilString `json:"next_cursor"`
}

// GetItems returns the value of Items.
func (s *TodoList) GetItems() []Todo {
	return s.Items
}

// GetNextCursor returns the value of NextCursor.
func (s *TodoList) GetNextCursor() OptNilString {
	return s.NextCursor
}

// SetItems sets the value of Items.
func (s *TodoList) SetItems(val []Todo) {
	s.Items = val
}

// SetNextCursor sets the value of NextCursor.
func (s *TodoList) SetNextCursor(val OptNilString) {
	s.NextCursor = val
}

type TodoStatus string

const (
	TodoStatusNotStarted TodoStatus = "not_started"
	TodoStatusInProgress TodoStatus = "in_progress"
	TodoStatusDone       TodoStatus = "done"
	TodoStatusPending    TodoStatus = "pending"
	TodoStatusCancel     TodoStatus = "cancel"
)

// AllValues returns all TodoStatus values.
func (TodoStatus) AllValues() []TodoStatus {
	return []TodoStatus{
		TodoStatusNotStarted,
		TodoStatusInProgress,
		TodoStatusDone,
		TodoStatusPending,
		TodoStatusCancel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TodoStatus) MarshalText() ([]byte, error) {
	switch s {
	case TodoStatusNotStarted:
		return []byte(s), nil
	case TodoStatusInProgress:
		return []byte(s), nil
	case TodoStatusDone:
		return []byte(s), nil
	case TodoStatusPending:
		return []byte(s), nil
	case TodoStatusCancel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TodoStatus) UnmarshalText(data []byte) error {
	switch TodoStatus(data) {
	case TodoStatusNotStarted:
		*s = TodoStatusNotStarted
		return nil
	case TodoStatusInProgress:
		*s = TodoStatusInProgress
		return nil
	case TodoStatusDone:
		*s = TodoStatusDone
		return nil
	case TodoStatusPending:
		*s = TodoStatusPending
		return nil
	case TodoStatusCancel:
		*s = TodoStatusCancel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/User
type User struct {
	ID        OptInt64    `json:"id"`
	Name      string      `json:"name"`
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptInt64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *User) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *User) SetID(val OptInt64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *User) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

func (*User) aPISessionGetRes()  {}
func (*User) aPISessionPostRes() {}
