// Code generated by ogen, DO NOT EDIT.

package handler

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ArchiveTodo implements archiveTodo operation.
	//
	// Archive a ToDo.
	//
	// DELETE /todos/{todoId}
	ArchiveTodo(ctx context.Context, params ArchiveTodoParams) error
	// CreateTodo implements createTodo operation.
	//
	// Create a new ToDo.
	//
	// POST /todos
	CreateTodo(ctx context.Context, req *CreateTodoRequest) (*Todo, error)
	// GetArchivedTodos implements getArchivedTodos operation.
	//
	// Get list of archived ToDos for the current user.
	//
	// GET /todos/archived
	GetArchivedTodos(ctx context.Context, params GetArchivedTodosParams) ([]Todo, error)
	// GetTodos implements getTodos operation.
	//
	// Get list of ToDos for the current user.
	//
	// GET /todos
	GetTodos(ctx context.Context, params GetTodosParams) ([]Todo, error)
	// GetUsers implements getUsers operation.
	//
	// Get list of users.
	//
	// GET /users
	GetUsers(ctx context.Context) ([]User, error)
	// SetSession implements setSession operation.
	//
	// Set current user session.
	//
	// POST /session
	SetSession(ctx context.Context, req *SetSessionRequest) error
	// UnarchiveTodo implements unarchiveTodo operation.
	//
	// Unarchive a ToDo.
	//
	// PATCH /todos/{todoId}/unarchive
	UnarchiveTodo(ctx context.Context, params UnarchiveTodoParams) (*Todo, error)
	// UpdateTodo implements updateTodo operation.
	//
	// Update an existing ToDo.
	//
	// PUT /todos/{todoId}
	UpdateTodo(ctx context.Context, req *UpdateTodoRequest, params UpdateTodoParams) (*Todo, error)
	// UpdateTodoOrder implements updateTodoOrder operation.
	//
	// Update the sort order of multiple ToDos.
	//
	// PATCH /todos/order
	UpdateTodoOrder(ctx context.Context, req *UpdateTodoOrderRequest) error
	// UpdateTodoStatus implements updateTodoStatus operation.
	//
	// Update the status of a ToDo.
	//
	// PATCH /todos/{todoId}/status
	UpdateTodoStatus(ctx context.Context, req *UpdateTodoStatusRequest, params UpdateTodoStatusParams) (*Todo, error)
	// NewError creates *ErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
