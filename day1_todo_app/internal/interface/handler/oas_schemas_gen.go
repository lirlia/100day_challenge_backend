// Code generated by ogen, DO NOT EDIT.

package handler

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
)

func (s *ErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// ArchiveTodoNoContent is response for ArchiveTodo operation.
type ArchiveTodoNoContent struct{}

// Ref: #/components/schemas/CreateTodoRequest
type CreateTodoRequest struct {
	// ToDo title.
	Title string `json:"title"`
	// ToDo description (optional).
	Description OptString `json:"description"`
}

// GetTitle returns the value of Title.
func (s *CreateTodoRequest) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *CreateTodoRequest) GetDescription() OptString {
	return s.Description
}

// SetTitle sets the value of Title.
func (s *CreateTodoRequest) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *CreateTodoRequest) SetDescription(val OptString) {
	s.Description = val
}

// Ref: #/components/schemas/Error
type Error struct {
	// An error code.
	Code string `json:"code"`
	// A human-readable error message.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorResponseStatusCode wraps Error with StatusCode.
type ErrorResponseStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorResponseStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorResponseStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// SetSessionNoContent is response for SetSession operation.
type SetSessionNoContent struct{}

// Ref: #/components/schemas/SetSessionRequest
type SetSessionRequest struct {
	// The ID of the user to set in the session.
	UserID int64 `json:"user_id"`
}

// GetUserID returns the value of UserID.
func (s *SetSessionRequest) GetUserID() int64 {
	return s.UserID
}

// SetUserID sets the value of UserID.
func (s *SetSessionRequest) SetUserID(val int64) {
	s.UserID = val
}

// Ref: #/components/schemas/Todo
type Todo struct {
	// ToDo ID.
	ID int64 `json:"id"`
	// ID of the user who owns this ToDo.
	UserID int64 `json:"user_id"`
	// ToDo title.
	Title string `json:"title"`
	// ToDo description (optional).
	Description OptString  `json:"description"`
	Status      TodoStatus `json:"status"`
	// Value used for manual sorting.
	SortOrder float64 `json:"sort_order"`
	// Timestamp when the ToDo was created.
	CreatedAt time.Time `json:"created_at"`
	// Timestamp when the ToDo was archived (null if not archived).
	ArchivedAt OptNilDateTime `json:"archived_at"`
}

// GetID returns the value of ID.
func (s *Todo) GetID() int64 {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *Todo) GetUserID() int64 {
	return s.UserID
}

// GetTitle returns the value of Title.
func (s *Todo) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Todo) GetDescription() OptString {
	return s.Description
}

// GetStatus returns the value of Status.
func (s *Todo) GetStatus() TodoStatus {
	return s.Status
}

// GetSortOrder returns the value of SortOrder.
func (s *Todo) GetSortOrder() float64 {
	return s.SortOrder
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Todo) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetArchivedAt returns the value of ArchivedAt.
func (s *Todo) GetArchivedAt() OptNilDateTime {
	return s.ArchivedAt
}

// SetID sets the value of ID.
func (s *Todo) SetID(val int64) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *Todo) SetUserID(val int64) {
	s.UserID = val
}

// SetTitle sets the value of Title.
func (s *Todo) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Todo) SetDescription(val OptString) {
	s.Description = val
}

// SetStatus sets the value of Status.
func (s *Todo) SetStatus(val TodoStatus) {
	s.Status = val
}

// SetSortOrder sets the value of SortOrder.
func (s *Todo) SetSortOrder(val float64) {
	s.SortOrder = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Todo) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetArchivedAt sets the value of ArchivedAt.
func (s *Todo) SetArchivedAt(val OptNilDateTime) {
	s.ArchivedAt = val
}

// The status of the ToDo item.
// Ref: #/components/schemas/TodoStatus
type TodoStatus string

const (
	TodoStatusNotStarted TodoStatus = "not started"
	TodoStatusInProgress TodoStatus = "in progress"
	TodoStatusDone       TodoStatus = "done"
	TodoStatusPending    TodoStatus = "pending"
	TodoStatusCancel     TodoStatus = "cancel"
)

// AllValues returns all TodoStatus values.
func (TodoStatus) AllValues() []TodoStatus {
	return []TodoStatus{
		TodoStatusNotStarted,
		TodoStatusInProgress,
		TodoStatusDone,
		TodoStatusPending,
		TodoStatusCancel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TodoStatus) MarshalText() ([]byte, error) {
	switch s {
	case TodoStatusNotStarted:
		return []byte(s), nil
	case TodoStatusInProgress:
		return []byte(s), nil
	case TodoStatusDone:
		return []byte(s), nil
	case TodoStatusPending:
		return []byte(s), nil
	case TodoStatusCancel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TodoStatus) UnmarshalText(data []byte) error {
	switch TodoStatus(data) {
	case TodoStatusNotStarted:
		*s = TodoStatusNotStarted
		return nil
	case TodoStatusInProgress:
		*s = TodoStatusInProgress
		return nil
	case TodoStatusDone:
		*s = TodoStatusDone
		return nil
	case TodoStatusPending:
		*s = TodoStatusPending
		return nil
	case TodoStatusCancel:
		*s = TodoStatusCancel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdateTodoOrderNoContent is response for UpdateTodoOrder operation.
type UpdateTodoOrderNoContent struct{}

// Ref: #/components/schemas/UpdateTodoOrderRequest
type UpdateTodoOrderRequest struct {
	Orders []UpdateTodoOrderRequestOrdersItem `json:"orders"`
}

// GetOrders returns the value of Orders.
func (s *UpdateTodoOrderRequest) GetOrders() []UpdateTodoOrderRequestOrdersItem {
	return s.Orders
}

// SetOrders sets the value of Orders.
func (s *UpdateTodoOrderRequest) SetOrders(val []UpdateTodoOrderRequestOrdersItem) {
	s.Orders = val
}

type UpdateTodoOrderRequestOrdersItem struct {
	// ToDo ID.
	ID int64 `json:"id"`
	// New sort order value.
	SortOrder float64 `json:"sort_order"`
}

// GetID returns the value of ID.
func (s *UpdateTodoOrderRequestOrdersItem) GetID() int64 {
	return s.ID
}

// GetSortOrder returns the value of SortOrder.
func (s *UpdateTodoOrderRequestOrdersItem) GetSortOrder() float64 {
	return s.SortOrder
}

// SetID sets the value of ID.
func (s *UpdateTodoOrderRequestOrdersItem) SetID(val int64) {
	s.ID = val
}

// SetSortOrder sets the value of SortOrder.
func (s *UpdateTodoOrderRequestOrdersItem) SetSortOrder(val float64) {
	s.SortOrder = val
}

// Ref: #/components/schemas/UpdateTodoRequest
type UpdateTodoRequest struct {
	// ToDo title.
	Title string `json:"title"`
	// ToDo description (optional).
	Description OptString  `json:"description"`
	Status      TodoStatus `json:"status"`
}

// GetTitle returns the value of Title.
func (s *UpdateTodoRequest) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *UpdateTodoRequest) GetDescription() OptString {
	return s.Description
}

// GetStatus returns the value of Status.
func (s *UpdateTodoRequest) GetStatus() TodoStatus {
	return s.Status
}

// SetTitle sets the value of Title.
func (s *UpdateTodoRequest) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *UpdateTodoRequest) SetDescription(val OptString) {
	s.Description = val
}

// SetStatus sets the value of Status.
func (s *UpdateTodoRequest) SetStatus(val TodoStatus) {
	s.Status = val
}

// Ref: #/components/schemas/UpdateTodoStatusRequest
type UpdateTodoStatusRequest struct {
	Status TodoStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *UpdateTodoStatusRequest) GetStatus() TodoStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *UpdateTodoStatusRequest) SetStatus(val TodoStatus) {
	s.Status = val
}

// Ref: #/components/schemas/User
type User struct {
	// User ID.
	ID int64 `json:"id"`
	// User name.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *User) GetID() int64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *User) SetID(val int64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}
