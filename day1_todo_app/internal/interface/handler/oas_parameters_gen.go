// Code generated by ogen, DO NOT EDIT.

package handler

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// ArchiveTodoParams is parameters of archiveTodo operation.
type ArchiveTodoParams struct {
	TodoId int64
}

func unpackArchiveTodoParams(packed middleware.Parameters) (params ArchiveTodoParams) {
	{
		key := middleware.ParameterKey{
			Name: "todoId",
			In:   "path",
		}
		params.TodoId = packed[key].(int64)
	}
	return params
}

func decodeArchiveTodoParams(args [1]string, argsEscaped bool, r *http.Request) (params ArchiveTodoParams, _ error) {
	// Decode path: todoId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "todoId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.TodoId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "todoId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetArchivedTodosParams is parameters of getArchivedTodos operation.
type GetArchivedTodosParams struct {
	// Maximum number of items to return.
	Limit OptInt32
	// Page number for pagination.
	Page OptInt32
}

func unpackGetArchivedTodosParams(packed middleware.Parameters) (params GetArchivedTodosParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt32)
		}
	}
	return params
}

func decodeGetArchivedTodosParams(args [0]string, argsEscaped bool, r *http.Request) (params GetArchivedTodosParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int32(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int32(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTodosParams is parameters of getTodos operation.
type GetTodosParams struct {
	// Maximum number of items to return.
	Limit OptInt32
	// Page number for pagination.
	Page OptInt32
	// Include archived ToDos in the list.
	IncludeArchived OptBool
}

func unpackGetTodosParams(packed middleware.Parameters) (params GetTodosParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "include_archived",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IncludeArchived = v.(OptBool)
		}
	}
	return params
}

func decodeGetTodosParams(args [0]string, argsEscaped bool, r *http.Request) (params GetTodosParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: limit.
	{
		val := int32(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int32(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: include_archived.
	{
		val := bool(false)
		params.IncludeArchived.SetTo(val)
	}
	// Decode query: include_archived.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "include_archived",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludeArchivedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIncludeArchivedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IncludeArchived.SetTo(paramsDotIncludeArchivedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "include_archived",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// UnarchiveTodoParams is parameters of unarchiveTodo operation.
type UnarchiveTodoParams struct {
	TodoId int64
}

func unpackUnarchiveTodoParams(packed middleware.Parameters) (params UnarchiveTodoParams) {
	{
		key := middleware.ParameterKey{
			Name: "todoId",
			In:   "path",
		}
		params.TodoId = packed[key].(int64)
	}
	return params
}

func decodeUnarchiveTodoParams(args [1]string, argsEscaped bool, r *http.Request) (params UnarchiveTodoParams, _ error) {
	// Decode path: todoId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "todoId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.TodoId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "todoId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateTodoParams is parameters of updateTodo operation.
type UpdateTodoParams struct {
	TodoId int64
}

func unpackUpdateTodoParams(packed middleware.Parameters) (params UpdateTodoParams) {
	{
		key := middleware.ParameterKey{
			Name: "todoId",
			In:   "path",
		}
		params.TodoId = packed[key].(int64)
	}
	return params
}

func decodeUpdateTodoParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateTodoParams, _ error) {
	// Decode path: todoId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "todoId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.TodoId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "todoId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateTodoStatusParams is parameters of updateTodoStatus operation.
type UpdateTodoStatusParams struct {
	TodoId int64
}

func unpackUpdateTodoStatusParams(packed middleware.Parameters) (params UpdateTodoStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "todoId",
			In:   "path",
		}
		params.TodoId = packed[key].(int64)
	}
	return params
}

func decodeUpdateTodoStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateTodoStatusParams, _ error) {
	// Decode path: todoId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "todoId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.TodoId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "todoId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
