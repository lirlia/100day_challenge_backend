/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sharedb";
exports.ids = ["vendor-chunks/sharedb"];
exports.modules = {

/***/ "(ssr)/./node_modules/sharedb/lib/client/connection.js":
/*!*******************************************************!*\
  !*** ./node_modules/sharedb/lib/client/connection.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Doc = __webpack_require__(/*! ./doc */ \"(ssr)/./node_modules/sharedb/lib/client/doc.js\");\nvar Query = __webpack_require__(/*! ./query */ \"(ssr)/./node_modules/sharedb/lib/client/query.js\");\nvar Presence = __webpack_require__(/*! ./presence/presence */ \"(ssr)/./node_modules/sharedb/lib/client/presence/presence.js\");\nvar DocPresence = __webpack_require__(/*! ./presence/doc-presence */ \"(ssr)/./node_modules/sharedb/lib/client/presence/doc-presence.js\");\nvar SnapshotVersionRequest = __webpack_require__(/*! ./snapshot-request/snapshot-version-request */ \"(ssr)/./node_modules/sharedb/lib/client/snapshot-request/snapshot-version-request.js\");\nvar SnapshotTimestampRequest = __webpack_require__(/*! ./snapshot-request/snapshot-timestamp-request */ \"(ssr)/./node_modules/sharedb/lib/client/snapshot-request/snapshot-timestamp-request.js\");\nvar emitter = __webpack_require__(/*! ../emitter */ \"(ssr)/./node_modules/sharedb/lib/emitter.js\");\nvar ShareDBError = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/sharedb/lib/error.js\");\nvar ACTIONS = (__webpack_require__(/*! ../message-actions */ \"(ssr)/./node_modules/sharedb/lib/message-actions.js\").ACTIONS);\nvar types = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/sharedb/lib/types.js\");\nvar util = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\nvar logger = __webpack_require__(/*! ../logger */ \"(ssr)/./node_modules/sharedb/lib/logger/index.js\");\nvar DocPresenceEmitter = __webpack_require__(/*! ./presence/doc-presence-emitter */ \"(ssr)/./node_modules/sharedb/lib/client/presence/doc-presence-emitter.js\");\nvar protocol = __webpack_require__(/*! ../protocol */ \"(ssr)/./node_modules/sharedb/lib/protocol.js\");\n\nvar ERROR_CODE = ShareDBError.CODES;\n\nfunction connectionState(socket) {\n  if (socket.readyState === 0 || socket.readyState === 1) return 'connecting';\n  return 'disconnected';\n}\n\n/**\n * Handles communication with the sharejs server and provides queries and\n * documents.\n *\n * We create a connection with a socket object\n *   connection = new sharejs.Connection(sockset)\n * The socket may be any object handling the websocket protocol. See the\n * documentation of bindToSocket() for details. We then wait for the connection\n * to connect\n *   connection.on('connected', ...)\n * and are finally able to work with shared documents\n *   connection.get('food', 'steak') // Doc\n *\n * @param socket @see bindToSocket\n */\nmodule.exports = Connection;\nfunction Connection(socket) {\n  emitter.EventEmitter.call(this);\n\n  // Map of collection -> id -> doc object for created documents.\n  // (created documents MUST BE UNIQUE)\n  this.collections = Object.create(null);\n\n  // Each query and snapshot request is created with an id that the server uses when it sends us\n  // info about the request (updates, etc)\n  this.nextQueryId = 1;\n  this.nextSnapshotRequestId = 1;\n\n  // Map from query ID -> query object.\n  this.queries = Object.create(null);\n\n  // Maps from channel -> presence objects\n  this._presences = Object.create(null);\n  this._docPresenceEmitter = new DocPresenceEmitter();\n\n  // Map from snapshot request ID -> snapshot request\n  this._snapshotRequests = Object.create(null);\n\n  // A unique message number for the given id\n  this.seq = 1;\n\n  // A unique message number for presence\n  this._presenceSeq = 1;\n\n  // Equals agent.src on the server\n  this.id = null;\n\n  // This direct reference from connection to agent is not used internal to\n  // ShareDB, but it is handy for server-side only user code that may cache\n  // state on the agent and read it in middleware\n  this.agent = null;\n\n  this.debug = false;\n\n  this.state = connectionState(socket);\n\n  this.bindToSocket(socket);\n}\nemitter.mixin(Connection);\n\n\n/**\n * Use socket to communicate with server\n *\n * Socket is an object that can handle the websocket protocol. This method\n * installs the onopen, onclose, onmessage and onerror handlers on the socket to\n * handle communication and sends messages by calling socket.send(message). The\n * sockets `readyState` property is used to determine the initaial state.\n *\n * @param socket Handles the websocket protocol\n * @param socket.readyState\n * @param socket.close\n * @param socket.send\n * @param socket.onopen\n * @param socket.onclose\n * @param socket.onmessage\n * @param socket.onerror\n */\nConnection.prototype.bindToSocket = function(socket) {\n  if (this.socket) {\n    this.socket.close();\n    this.socket.onmessage = null;\n    this.socket.onopen = null;\n    this.socket.onerror = null;\n    this.socket.onclose = null;\n  }\n\n  this.socket = socket;\n\n  // State of the connection. The corresponding events are emitted when this changes\n  //\n  // - 'connecting'   The connection is still being established, or we are still\n  //                    waiting on the server to send us the initialization message\n  // - 'connected'    The connection is open and we have connected to a server\n  //                    and recieved the initialization message\n  // - 'disconnected' Connection is closed, but it will reconnect automatically\n  // - 'closed'       The connection was closed by the client, and will not reconnect\n  // - 'stopped'      The connection was closed by the server, and will not reconnect\n  var newState = connectionState(socket);\n  this._setState(newState);\n\n  // This is a helper variable the document uses to see whether we're\n  // currently in a 'live' state. It is true if and only if we're connected\n  this.canSend = false;\n\n  var connection = this;\n\n  socket.onmessage = function(event) {\n    try {\n      var data = (typeof event.data === 'string') ?\n        JSON.parse(event.data) : event.data;\n    } catch (err) {\n      logger.warn('Failed to parse message', event);\n      return;\n    }\n\n    if (connection.debug) logger.info('RECV', JSON.stringify(data));\n\n    var request = {data: data};\n    connection.emit('receive', request);\n    if (!request.data) return;\n\n    try {\n      connection.handleMessage(request.data);\n    } catch (err) {\n      util.nextTick(function() {\n        connection.emit('error', err);\n      });\n    }\n  };\n\n  // If socket is already open, do handshake immediately.\n  if (socket.readyState === 1) {\n    connection._initializeHandshake();\n  }\n  socket.onopen = function() {\n    connection._setState('connecting');\n    connection._initializeHandshake();\n  };\n\n  socket.onerror = function(err) {\n    // This isn't the same as a regular error, because it will happen normally\n    // from time to time. Your connection should probably automatically\n    // reconnect anyway, but that should be triggered off onclose not onerror.\n    // (onclose happens when onerror gets called anyway).\n    connection.emit('connection error', err);\n  };\n\n  socket.onclose = function(reason) {\n    // node-browserchannel reason values:\n    //   'Closed' - The socket was manually closed by calling socket.close()\n    //   'Stopped by server' - The server sent the stop message to tell the client not to try connecting\n    //   'Request failed' - Server didn't respond to request (temporary, usually offline)\n    //   'Unknown session ID' - Server session for client is missing (temporary, will immediately reestablish)\n\n    if (reason === 'closed' || reason === 'Closed') {\n      connection._setState('closed', reason);\n    } else if (reason === 'stopped' || reason === 'Stopped by server') {\n      connection._setState('stopped', reason);\n    } else {\n      connection._setState('disconnected', reason);\n    }\n  };\n};\n\n/**\n * @param {object} message\n * @param {string} message.a action\n */\nConnection.prototype.handleMessage = function(message) {\n  var err = null;\n  if (message.error) {\n    err = wrapErrorData(message.error, message);\n    delete message.error;\n  }\n  // Switch on the message action. Most messages are for documents and are\n  // handled in the doc class.\n  switch (message.a) {\n    case ACTIONS.initLegacy:\n      // Client initialization packet\n      return this._handleLegacyInit(message);\n    case ACTIONS.handshake:\n      return this._handleHandshake(err, message);\n    case ACTIONS.queryFetch:\n      var query = this.queries[message.id];\n      if (query) query._handleFetch(err, message.data, message.extra);\n      return;\n    case ACTIONS.querySubscribe:\n      var query = this.queries[message.id];\n      if (query) query._handleSubscribe(err, message.data, message.extra);\n      return;\n    case ACTIONS.queryUnsubscribe:\n      // Queries are removed immediately on calls to destroy, so we ignore\n      // replies to query unsubscribes. Perhaps there should be a callback for\n      // destroy, but this is currently unimplemented\n      return;\n    case ACTIONS.queryUpdate:\n      // Query message. Pass this to the appropriate query object.\n      var query = this.queries[message.id];\n      if (!query) return;\n      if (err) return query._handleError(err);\n      if (message.diff) query._handleDiff(message.diff);\n      if (util.hasOwn(message, 'extra')) query._handleExtra(message.extra);\n      return;\n\n    case ACTIONS.bulkFetch:\n      return this._handleBulkMessage(err, message, '_handleFetch');\n    case ACTIONS.bulkSubscribe:\n    case ACTIONS.bulkUnsubscribe:\n      return this._handleBulkMessage(err, message, '_handleSubscribe');\n\n    case ACTIONS.snapshotFetch:\n    case ACTIONS.snapshotFetchByTimestamp:\n      return this._handleSnapshotFetch(err, message);\n\n    case ACTIONS.fetch:\n      var doc = this.getExisting(message.c, message.d);\n      if (doc) doc._handleFetch(err, message.data);\n      return;\n    case ACTIONS.subscribe:\n    case ACTIONS.unsubscribe:\n      var doc = this.getExisting(message.c, message.d);\n      if (doc) doc._handleSubscribe(err, message.data);\n      return;\n    case ACTIONS.op:\n      var doc = this.getExisting(message.c, message.d);\n      if (doc) doc._handleOp(err, message);\n      return;\n    case ACTIONS.presence:\n      return this._handlePresence(err, message);\n    case ACTIONS.presenceSubscribe:\n      return this._handlePresenceSubscribe(err, message);\n    case ACTIONS.presenceUnsubscribe:\n      return this._handlePresenceUnsubscribe(err, message);\n    case ACTIONS.presenceRequest:\n      return this._handlePresenceRequest(err, message);\n    case ACTIONS.pingPong:\n      return this._handlePingPong(err);\n\n    default:\n      logger.warn('Ignoring unrecognized message', message);\n  }\n};\n\nfunction wrapErrorData(errorData, fullMessage) {\n  // wrap in Error object so can be passed through event emitters\n  var err = new Error(errorData.message);\n  err.code = errorData.code;\n  if (fullMessage) {\n    // Add the message data to the error object for more context\n    err.data = fullMessage;\n  }\n  return err;\n}\n\nConnection.prototype._handleBulkMessage = function(err, message, method) {\n  if (message.data) {\n    for (var id in message.data) {\n      var dataForId = message.data[id];\n      var doc = this.getExisting(message.c, id);\n      if (doc) {\n        if (err) {\n          doc[method](err);\n        } else if (dataForId.error) {\n          // Bulk reply snapshot-specific errorr - see agent.js getMapResult\n          doc[method](wrapErrorData(dataForId.error));\n        } else {\n          doc[method](null, dataForId);\n        }\n      }\n    }\n  } else if (Array.isArray(message.b)) {\n    for (var i = 0; i < message.b.length; i++) {\n      var id = message.b[i];\n      var doc = this.getExisting(message.c, id);\n      if (doc) doc[method](err);\n    }\n  } else if (message.b) {\n    for (var id in message.b) {\n      var doc = this.getExisting(message.c, id);\n      if (doc) doc[method](err);\n    }\n  } else {\n    logger.error('Invalid bulk message', message);\n  }\n};\n\nConnection.prototype._reset = function() {\n  this.agent = null;\n};\n\n// Set the connection's state. The connection is basically a state machine.\nConnection.prototype._setState = function(newState, reason) {\n  if (this.state === newState) return;\n\n  // I made a state diagram. The only invalid transitions are getting to\n  // 'connecting' from anywhere other than 'disconnected' and getting to\n  // 'connected' from anywhere other than 'connecting'.\n  if (\n    (\n      newState === 'connecting' &&\n      this.state !== 'disconnected' &&\n      this.state !== 'stopped' &&\n      this.state !== 'closed'\n    ) || (\n      newState === 'connected' &&\n      this.state !== 'connecting'\n    )\n  ) {\n    var err = new ShareDBError(\n      ERROR_CODE.ERR_CONNECTION_STATE_TRANSITION_INVALID,\n      'Cannot transition directly from ' + this.state + ' to ' + newState\n    );\n    return this.emit('error', err);\n  }\n\n  this.state = newState;\n  this.canSend = (newState === 'connected');\n\n  if (\n    newState === 'disconnected' ||\n    newState === 'stopped' ||\n    newState === 'closed'\n  ) {\n    this._reset();\n  }\n\n  // Group subscribes together to help server make more efficient calls\n  this.startBulk();\n  // Emit the event to all queries\n  for (var id in this.queries) {\n    var query = this.queries[id];\n    query._onConnectionStateChanged();\n  }\n  // Emit the event to all documents\n  for (var collection in this.collections) {\n    var docs = this.collections[collection];\n    for (var id in docs) {\n      docs[id]._onConnectionStateChanged();\n    }\n  }\n  // Emit the event to all Presences\n  for (var channel in this._presences) {\n    this._presences[channel]._onConnectionStateChanged();\n  }\n  // Emit the event to all snapshots\n  for (var id in this._snapshotRequests) {\n    var snapshotRequest = this._snapshotRequests[id];\n    snapshotRequest._onConnectionStateChanged();\n  }\n  this.endBulk();\n\n  this.emit(newState, reason);\n  this.emit('state', newState, reason);\n};\n\nConnection.prototype.startBulk = function() {\n  if (!this.bulk) this.bulk = Object.create(null);\n};\n\nConnection.prototype.endBulk = function() {\n  if (this.bulk) {\n    for (var collection in this.bulk) {\n      var actions = this.bulk[collection];\n      this._sendBulk('f', collection, actions.f);\n      this._sendBulk('s', collection, actions.s);\n      this._sendBulk('u', collection, actions.u);\n    }\n  }\n  this.bulk = null;\n};\n\nConnection.prototype._sendBulk = function(action, collection, values) {\n  if (!values) return;\n  var ids = [];\n  var versions = Object.create(null);\n  var versionsCount = 0;\n  var versionId;\n  for (var id in values) {\n    var value = values[id];\n    if (value == null) {\n      ids.push(id);\n    } else {\n      versions[id] = value;\n      versionId = id;\n      versionsCount++;\n    }\n  }\n  if (ids.length === 1) {\n    var id = ids[0];\n    this.send({a: action, c: collection, d: id});\n  } else if (ids.length) {\n    this.send({a: 'b' + action, c: collection, b: ids});\n  }\n  if (versionsCount === 1) {\n    var version = versions[versionId];\n    this.send({a: action, c: collection, d: versionId, v: version});\n  } else if (versionsCount) {\n    this.send({a: 'b' + action, c: collection, b: versions});\n  }\n};\n\nConnection.prototype._sendActions = function(action, doc, version) {\n  // Ensure the doc is registered so that it receives the reply message\n  this._addDoc(doc);\n  if (this.bulk) {\n    // Bulk subscribe\n    var actions = this.bulk[doc.collection] || (this.bulk[doc.collection] = Object.create(null));\n    var versions = actions[action] || (actions[action] = Object.create(null));\n    var isDuplicate = util.hasOwn(versions, doc.id);\n    versions[doc.id] = version;\n    return isDuplicate;\n  } else {\n    // Send single doc subscribe message\n    var message = {a: action, c: doc.collection, d: doc.id, v: version};\n    this.send(message);\n  }\n};\n\nConnection.prototype.sendFetch = function(doc) {\n  return this._sendActions(ACTIONS.fetch, doc, doc.version);\n};\n\nConnection.prototype.sendSubscribe = function(doc) {\n  return this._sendActions(ACTIONS.subscribe, doc, doc.version);\n};\n\nConnection.prototype.sendUnsubscribe = function(doc) {\n  return this._sendActions(ACTIONS.unsubscribe, doc);\n};\n\nConnection.prototype.sendOp = function(doc, op) {\n  // Ensure the doc is registered so that it receives the reply message\n  this._addDoc(doc);\n  var message = {\n    a: ACTIONS.op,\n    c: doc.collection,\n    d: doc.id,\n    v: doc.version,\n    src: op.src,\n    seq: op.seq,\n    x: {}\n  };\n  if ('op' in op) message.op = op.op;\n  if (op.create) message.create = op.create;\n  if (op.del) message.del = op.del;\n  if (doc.submitSource) message.x.source = op.source;\n  this.send(message);\n};\n\n\n/**\n * Sends a message down the socket\n */\nConnection.prototype.send = function(message) {\n  if (this.debug) logger.info('SEND', JSON.stringify(message));\n\n  this.emit('send', message);\n  this.socket.send(JSON.stringify(message));\n};\n\nConnection.prototype.ping = function() {\n  if (!this.canSend) {\n    throw new ShareDBError(\n      ERROR_CODE.ERR_CANNOT_PING_OFFLINE,\n      'Socket must be CONNECTED to ping'\n    );\n  }\n\n  var message = {\n    a: ACTIONS.pingPong\n  };\n  this.send(message);\n};\n\n/**\n * Closes the socket and emits 'closed'\n */\nConnection.prototype.close = function() {\n  this.socket.close();\n};\n\nConnection.prototype.getExisting = function(collection, id) {\n  if (this.collections[collection]) return this.collections[collection][id];\n};\n\n\n/**\n * Get or create a document.\n *\n * @param collection\n * @param id\n * @return {Doc}\n */\nConnection.prototype.get = function(collection, id) {\n  var docs = this.collections[collection] ||\n    (this.collections[collection] = Object.create(null));\n\n  var doc = docs[id];\n  if (!doc) {\n    doc = docs[id] = new Doc(this, collection, id);\n    this.emit('doc', doc);\n  }\n\n  doc._wantsDestroy = false;\n  return doc;\n};\n\n\n/**\n * Remove document from this.collections\n *\n * @private\n */\nConnection.prototype._destroyDoc = function(doc) {\n  if (!doc._wantsDestroy) return;\n  util.digAndRemove(this.collections, doc.collection, doc.id);\n  doc.emit('destroy');\n};\n\nConnection.prototype._addDoc = function(doc) {\n  var docs = this.collections[doc.collection];\n  if (!docs) {\n    docs = this.collections[doc.collection] = Object.create(null);\n  }\n  if (docs[doc.id] !== doc) {\n    docs[doc.id] = doc;\n  }\n};\n\n// Helper for createFetchQuery and createSubscribeQuery, below.\nConnection.prototype._createQuery = function(action, collection, q, options, callback) {\n  var id = this.nextQueryId++;\n  var query = new Query(action, this, id, collection, q, options, callback);\n  this.queries[id] = query;\n  query.send();\n  return query;\n};\n\n// Internal function. Use query.destroy() to remove queries.\nConnection.prototype._destroyQuery = function(query) {\n  delete this.queries[query.id];\n};\n\n// The query options object can contain the following fields:\n//\n// db: Name of the db for the query. You can attach extraDbs to ShareDB and\n//   pick which one the query should hit using this parameter.\n\n// Create a fetch query. Fetch queries are only issued once, returning the\n// results directly into the callback.\n//\n// The callback should have the signature function(error, results, extra)\n// where results is a list of Doc objects.\nConnection.prototype.createFetchQuery = function(collection, q, options, callback) {\n  return this._createQuery(ACTIONS.queryFetch, collection, q, options, callback);\n};\n\n// Create a subscribe query. Subscribe queries return with the initial data\n// through the callback, then update themselves whenever the query result set\n// changes via their own event emitter.\n//\n// If present, the callback should have the signature function(error, results, extra)\n// where results is a list of Doc objects.\nConnection.prototype.createSubscribeQuery = function(collection, q, options, callback) {\n  return this._createQuery(ACTIONS.querySubscribe, collection, q, options, callback);\n};\n\nConnection.prototype.hasPending = function() {\n  return !!(\n    this._firstDoc(hasPending) ||\n    this._firstQuery(hasPending) ||\n    this._firstSnapshotRequest()\n  );\n};\nfunction hasPending(object) {\n  return object.hasPending();\n}\n\nConnection.prototype.hasWritePending = function() {\n  return !!this._firstDoc(hasWritePending);\n};\nfunction hasWritePending(object) {\n  return object.hasWritePending();\n}\n\nConnection.prototype.whenNothingPending = function(callback) {\n  var doc = this._firstDoc(hasPending);\n  if (doc) {\n    // If a document is found with a pending operation, wait for it to emit\n    // that nothing is pending anymore, and then recheck all documents again.\n    // We have to recheck all documents, just in case another mutation has\n    // been made in the meantime as a result of an event callback\n    doc.once('nothing pending', this._nothingPendingRetry(callback));\n    return;\n  }\n  var query = this._firstQuery(hasPending);\n  if (query) {\n    query.once('ready', this._nothingPendingRetry(callback));\n    return;\n  }\n  var snapshotRequest = this._firstSnapshotRequest();\n  if (snapshotRequest) {\n    snapshotRequest.once('ready', this._nothingPendingRetry(callback));\n    return;\n  }\n  // Call back when no pending operations\n  util.nextTick(callback);\n};\nConnection.prototype._nothingPendingRetry = function(callback) {\n  var connection = this;\n  return function() {\n    util.nextTick(function() {\n      connection.whenNothingPending(callback);\n    });\n  };\n};\n\nConnection.prototype._firstDoc = function(fn) {\n  for (var collection in this.collections) {\n    var docs = this.collections[collection];\n    for (var id in docs) {\n      var doc = docs[id];\n      if (fn(doc)) {\n        return doc;\n      }\n    }\n  }\n};\n\nConnection.prototype._firstQuery = function(fn) {\n  for (var id in this.queries) {\n    var query = this.queries[id];\n    if (fn(query)) {\n      return query;\n    }\n  }\n};\n\nConnection.prototype._firstSnapshotRequest = function() {\n  for (var id in this._snapshotRequests) {\n    return this._snapshotRequests[id];\n  }\n};\n\n/**\n * Fetch a read-only snapshot at a given version\n *\n * @param collection - the collection name of the snapshot\n * @param id - the ID of the snapshot\n * @param version (optional) - the version number to fetch. If null, the latest version is fetched.\n * @param callback - (error, snapshot) => void, where snapshot takes the following schema:\n *\n * {\n *   id: string;         // ID of the snapshot\n *   v: number;          // version number of the snapshot\n *   type: string;       // the OT type of the snapshot, or null if it doesn't exist or is deleted\n *   data: any;          // the snapshot\n * }\n *\n */\nConnection.prototype.fetchSnapshot = function(collection, id, version, callback) {\n  if (typeof version === 'function') {\n    callback = version;\n    version = null;\n  }\n\n  var requestId = this.nextSnapshotRequestId++;\n  var snapshotRequest = new SnapshotVersionRequest(this, requestId, collection, id, version, callback);\n  this._snapshotRequests[snapshotRequest.requestId] = snapshotRequest;\n  snapshotRequest.send();\n};\n\n/**\n * Fetch a read-only snapshot at a given timestamp\n *\n * @param collection - the collection name of the snapshot\n * @param id - the ID of the snapshot\n * @param timestamp (optional) - the timestamp to fetch. If null, the latest version is fetched.\n * @param callback - (error, snapshot) => void, where snapshot takes the following schema:\n *\n * {\n *   id: string;         // ID of the snapshot\n *   v: number;          // version number of the snapshot\n *   type: string;       // the OT type of the snapshot, or null if it doesn't exist or is deleted\n *   data: any;          // the snapshot\n * }\n *\n */\nConnection.prototype.fetchSnapshotByTimestamp = function(collection, id, timestamp, callback) {\n  if (typeof timestamp === 'function') {\n    callback = timestamp;\n    timestamp = null;\n  }\n\n  var requestId = this.nextSnapshotRequestId++;\n  var snapshotRequest = new SnapshotTimestampRequest(this, requestId, collection, id, timestamp, callback);\n  this._snapshotRequests[snapshotRequest.requestId] = snapshotRequest;\n  snapshotRequest.send();\n};\n\nConnection.prototype._handleSnapshotFetch = function(error, message) {\n  var snapshotRequest = this._snapshotRequests[message.id];\n  if (!snapshotRequest) return;\n  delete this._snapshotRequests[message.id];\n  snapshotRequest._handleResponse(error, message);\n};\n\nConnection.prototype._handleLegacyInit = function(message) {\n  // If the protocol is at least 1.1, we want to use the\n  // new handshake protocol. Let's send a handshake initialize, because\n  // we now know the server is ready. If we've already sent it, we'll\n  // just ignore the response anyway.\n  if (protocol.checkAtLeast(message, '1.1')) return this._initializeHandshake();\n  this._initialize(message);\n};\n\nConnection.prototype._initializeHandshake = function() {\n  this.send({\n    a: ACTIONS.handshake,\n    id: this.id,\n    protocol: protocol.major,\n    protocolMinor: protocol.minor\n  });\n};\n\nConnection.prototype._handleHandshake = function(error, message) {\n  if (error) return this.emit('error', error);\n  this._initialize(message);\n};\n\nConnection.prototype._handlePingPong = function(error) {\n  if (error) return this.emit('error', error);\n  this.emit('pong');\n};\n\nConnection.prototype._initialize = function(message) {\n  if (this.state !== 'connecting') return;\n\n  if (message.protocol !== protocol.major) {\n    return this.emit('error', new ShareDBError(\n      ERROR_CODE.ERR_PROTOCOL_VERSION_NOT_SUPPORTED,\n      'Unsupported protocol version: ' + message.protocol\n    ));\n  }\n  if (types.map[message.type] !== types.defaultType) {\n    return this.emit('error', new ShareDBError(\n      ERROR_CODE.ERR_DEFAULT_TYPE_MISMATCH,\n      message.type + ' does not match the server default type'\n    ));\n  }\n  if (typeof message.id !== 'string') {\n    return this.emit('error', new ShareDBError(\n      ERROR_CODE.ERR_CLIENT_ID_BADLY_FORMED,\n      'Client id must be a string'\n    ));\n  }\n  this.id = message.id;\n\n  this._setState('connected');\n};\n\nConnection.prototype.getPresence = function(channel) {\n  var connection = this;\n  var presence = util.digOrCreate(this._presences, channel, function() {\n    return new Presence(connection, channel);\n  });\n  presence._wantsDestroy = false;\n  return presence;\n};\n\nConnection.prototype.getDocPresence = function(collection, id) {\n  var channel = DocPresence.channel(collection, id);\n  var connection = this;\n  var presence = util.digOrCreate(this._presences, channel, function() {\n    return new DocPresence(connection, collection, id);\n  });\n  presence._wantsDestroy = false;\n  return presence;\n};\n\nConnection.prototype._sendPresenceAction = function(action, seq, presence) {\n  // Ensure the presence is registered so that it receives the reply message\n  this._addPresence(presence);\n  var message = {a: action, ch: presence.channel, seq: seq};\n  this.send(message);\n  return message.seq;\n};\n\nConnection.prototype._addPresence = function(presence) {\n  util.digOrCreate(this._presences, presence.channel, function() {\n    return presence;\n  });\n};\n\nConnection.prototype._requestRemotePresence = function(channel) {\n  this.send({a: ACTIONS.presenceRequest, ch: channel});\n};\n\nConnection.prototype._handlePresenceSubscribe = function(error, message) {\n  var presence = util.dig(this._presences, message.ch);\n  if (presence) presence._handleSubscribe(error, message.seq);\n};\n\nConnection.prototype._handlePresenceUnsubscribe = function(error, message) {\n  var presence = util.dig(this._presences, message.ch);\n  if (presence) presence._handleUnsubscribe(error, message.seq);\n};\n\nConnection.prototype._handlePresence = function(error, message) {\n  var presence = util.dig(this._presences, message.ch);\n  if (presence) presence._receiveUpdate(error, message);\n};\n\nConnection.prototype._handlePresenceRequest = function(error, message) {\n  var presence = util.dig(this._presences, message.ch);\n  if (presence) presence._broadcastAllLocalPresence(error, message);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/doc.js":
/*!************************************************!*\
  !*** ./node_modules/sharedb/lib/client/doc.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var emitter = __webpack_require__(/*! ../emitter */ \"(ssr)/./node_modules/sharedb/lib/emitter.js\");\nvar logger = __webpack_require__(/*! ../logger */ \"(ssr)/./node_modules/sharedb/lib/logger/index.js\");\nvar ShareDBError = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/sharedb/lib/error.js\");\nvar types = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/sharedb/lib/types.js\");\nvar util = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\nvar clone = util.clone;\nvar deepEqual = __webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\");\nvar ACTIONS = (__webpack_require__(/*! ../message-actions */ \"(ssr)/./node_modules/sharedb/lib/message-actions.js\").ACTIONS);\n\nvar ERROR_CODE = ShareDBError.CODES;\n\n/**\n * A Doc is a client's view on a sharejs document.\n *\n * It is is uniquely identified by its `id` and `collection`.  Documents\n * should not be created directly. Create them with connection.get()\n *\n *\n * Subscriptions\n * -------------\n *\n * We can subscribe a document to stay in sync with the server.\n *   doc.subscribe(function(error) {\n *     doc.subscribed // = true\n *   })\n * The server now sends us all changes concerning this document and these are\n * applied to our data. If the subscription was successful the initial\n * data and version sent by the server are loaded into the document.\n *\n * To stop listening to the changes we call `doc.unsubscribe()`.\n *\n * If we just want to load the data but not stay up-to-date, we call\n *   doc.fetch(function(error) {\n *     doc.data // sent by server\n *   })\n *\n *\n * Events\n * ------\n *\n * You can use doc.on(eventName, callback) to subscribe to the following events:\n * - `before op (op, source)` Fired before a partial operation is applied to the data.\n *   It may be used to read the old data just before applying an operation\n * - `op (op, source)` Fired after every partial operation with this operation as the\n *   first argument\n * - `create (source)` The document was created. That means its type was\n *   set and it has some initial data.\n * - `del (data, source)` Fired after the document is deleted, that is\n *   the data is null. It is passed the data before deletion as an\n *   argument\n * - `load ()` Fired when a new snapshot is ingested from a fetch, subscribe, or query\n */\n\nmodule.exports = Doc;\nfunction Doc(connection, collection, id) {\n  emitter.EventEmitter.call(this);\n\n  this.connection = connection;\n\n  this.collection = collection;\n  this.id = id;\n\n  this.version = null;\n  // The OT type of this document. An uncreated document has type `null`\n  this.type = null;\n  this.data = undefined;\n\n  // Array of callbacks or nulls as placeholders\n  this.inflightFetch = [];\n  this.inflightSubscribe = null;\n  this.pendingFetch = [];\n  this.pendingSubscribe = [];\n\n  this._isInHardRollback = false;\n\n  // Whether we think we are subscribed on the server. Synchronously set to\n  // false on calls to unsubscribe and disconnect. Should never be true when\n  // this.wantSubscribe is false\n  this.subscribed = false;\n  // Whether to re-establish the subscription on reconnect\n  this.wantSubscribe = false;\n\n  this._wantsDestroy = false;\n\n  // The op that is currently roundtripping to the server, or null.\n  //\n  // When the connection reconnects, the inflight op is resubmitted.\n  //\n  // This has the same format as an entry in pendingOps\n  this.inflightOp = null;\n\n  // All ops that are waiting for the server to acknowledge this.inflightOp\n  // This used to just be a single operation, but creates & deletes can't be\n  // composed with regular operations.\n  //\n  // This is a list of {[create:{...}], [del:true], [op:...], callbacks:[...]}\n  this.pendingOps = [];\n\n  // The applyStack enables us to track any ops submitted while we are\n  // applying an op incrementally. This value is an array when we are\n  // performing an incremental apply and null otherwise. When it is an array,\n  // all submitted ops should be pushed onto it. The `_otApply` method will\n  // reset it back to null when all incremental apply loops are complete.\n  this.applyStack = null;\n\n  // Disable the default behavior of composing submitted ops. This is read at\n  // the time of op submit, so it may be toggled on before submitting a\n  // specifc op and toggled off afterward\n  this.preventCompose = false;\n\n  // If set to true, the source will be submitted over the connection. This\n  // will also have the side-effect of only composing ops whose sources are\n  // equal\n  this.submitSource = false;\n\n  // Prevent own ops being submitted to the server. If subscribed, remote\n  // ops are still received. Should be toggled through the pause() and\n  // resume() methods to correctly flush on resume.\n  this.paused = false;\n\n  // Internal counter that gets incremented every time doc.data is updated.\n  // Used as a cheap way to check if doc.data has changed.\n  this._dataStateVersion = 0;\n}\nemitter.mixin(Doc);\n\nDoc.prototype.destroy = function(callback) {\n  this._wantsDestroy = true;\n  var doc = this;\n  doc.whenNothingPending(function() {\n    if (doc.wantSubscribe) {\n      doc.unsubscribe(function(err) {\n        if (err) {\n          if (callback) return callback(err);\n          return doc.emit('error', err);\n        }\n        doc.connection._destroyDoc(doc);\n        if (callback) callback();\n      });\n    } else {\n      doc.connection._destroyDoc(doc);\n      if (callback) callback();\n    }\n  });\n};\n\n\n// ****** Manipulating the document data, version and type.\n\n// Set the document's type, and associated properties. Most of the logic in\n// this function exists to update the document based on any added & removed API\n// methods.\n//\n// @param newType OT type provided by the ottypes library or its name or uri\nDoc.prototype._setType = function(newType) {\n  if (typeof newType === 'string') {\n    newType = types.map[newType];\n  }\n\n  if (newType) {\n    this.type = newType;\n  } else if (newType === null) {\n    this.type = newType;\n    // If we removed the type from the object, also remove its data\n    this._setData(undefined);\n  } else {\n    var err = new ShareDBError(ERROR_CODE.ERR_DOC_TYPE_NOT_RECOGNIZED, 'Missing type ' + newType);\n    return this.emit('error', err);\n  }\n};\n\nDoc.prototype._setData = function(data) {\n  this.data = data;\n  this._dataStateVersion++;\n};\n\n// Ingest snapshot data. This data must include a version, snapshot and type.\n// This is used both to ingest data that was exported with a webpage and data\n// that was received from the server during a fetch.\n//\n// @param snapshot.v    version\n// @param snapshot.data\n// @param snapshot.type\n// @param callback\nDoc.prototype.ingestSnapshot = function(snapshot, callback) {\n  if (!snapshot) return callback && callback();\n\n  if (typeof snapshot.v !== 'number') {\n    var err = new ShareDBError(\n      ERROR_CODE.ERR_INGESTED_SNAPSHOT_HAS_NO_VERSION,\n      'Missing version in ingested snapshot. ' + this.collection + '.' + this.id\n    );\n    if (callback) return callback(err);\n    return this.emit('error', err);\n  }\n\n  // If the doc is already created or there are ops pending, we cannot use the\n  // ingested snapshot and need ops in order to update the document\n  if (this.type || this.hasWritePending()) {\n    // The version should only be null on a created document when it was\n    // created locally without fetching\n    if (this.version == null) {\n      if (this.hasWritePending()) {\n        // If we have pending ops and we get a snapshot for a locally created\n        // document, we have to wait for the pending ops to complete, because\n        // we don't know what version to fetch ops from. It is possible that\n        // the snapshot came from our local op, but it is also possible that\n        // the doc was created remotely (which would conflict and be an error)\n        return callback && this.once('no write pending', callback);\n      }\n      // Otherwise, we've encounted an error state\n      var err = new ShareDBError(\n        ERROR_CODE.ERR_DOC_MISSING_VERSION,\n        'Cannot ingest snapshot in doc with null version. ' + this.collection + '.' + this.id\n      );\n      if (callback) return callback(err);\n      return this.emit('error', err);\n    }\n    // If we got a snapshot for a version further along than the document is\n    // currently, issue a fetch to get the latest ops and catch us up\n    if (snapshot.v > this.version) return this.fetch(callback);\n    return callback && callback();\n  }\n\n  // Ignore the snapshot if we are already at a newer version. Under no\n  // circumstance should we ever set the current version backward\n  if (this.version > snapshot.v) return callback && callback();\n\n  this.version = snapshot.v;\n  var type = (snapshot.type === undefined) ? types.defaultType : snapshot.type;\n  this._setType(type);\n  this._setData(\n    (this.type && this.type.deserialize) ?\n      this.type.deserialize(snapshot.data) :\n      snapshot.data\n  );\n  this.emit('load');\n  callback && callback();\n};\n\nDoc.prototype.whenNothingPending = function(callback) {\n  var doc = this;\n  util.nextTick(function() {\n    if (doc.hasPending()) {\n      doc.once('nothing pending', callback);\n      return;\n    }\n    callback();\n  });\n};\n\nDoc.prototype.hasPending = function() {\n  return !!(\n    this.inflightOp ||\n    this.pendingOps.length ||\n    this.inflightFetch.length ||\n    this.inflightSubscribe ||\n    this.pendingFetch.length ||\n    this.pendingSubscribe.length\n  );\n};\n\nDoc.prototype.hasWritePending = function() {\n  return !!(this.inflightOp || this.pendingOps.length);\n};\n\nDoc.prototype._emitNothingPending = function() {\n  if (this.hasWritePending()) return;\n  this.emit('no write pending');\n  if (this.hasPending()) return;\n  this.emit('nothing pending');\n};\n\n// **** Helpers for network messages\n\nDoc.prototype._emitResponseError = function(err, callback) {\n  if (err && err.code === ERROR_CODE.ERR_SNAPSHOT_READ_SILENT_REJECTION) {\n    this.wantSubscribe = false;\n    if (callback) {\n      callback();\n    }\n    this._emitNothingPending();\n    return;\n  }\n  if (callback) {\n    callback(err);\n    this._emitNothingPending();\n    return;\n  }\n  this._emitNothingPending();\n  this.emit('error', err);\n};\n\nDoc.prototype._handleFetch = function(error, snapshot) {\n  var callbacks = this.pendingFetch;\n  this.pendingFetch = [];\n  var callback = this.inflightFetch.shift();\n  if (callback) callbacks.unshift(callback);\n  if (callbacks.length) {\n    callback = function(error) {\n      util.callEach(callbacks, error);\n    };\n  }\n  if (error) return this._emitResponseError(error, callback);\n  this.ingestSnapshot(snapshot, callback);\n  this._emitNothingPending();\n};\n\nDoc.prototype._handleSubscribe = function(error, snapshot) {\n  var request = this.inflightSubscribe;\n  this.inflightSubscribe = null;\n  var callbacks = this.pendingFetch;\n  this.pendingFetch = [];\n  if (request.callback) callbacks.push(request.callback);\n  var callback;\n  if (callbacks.length) {\n    callback = function(error) {\n      util.callEach(callbacks, error);\n    };\n  }\n  if (error) return this._emitResponseError(error, callback);\n  this.subscribed = request.wantSubscribe;\n  if (this.subscribed) this.ingestSnapshot(snapshot, callback);\n  else if (callback) callback();\n  this._emitNothingPending();\n  this._flushSubscribe();\n};\n\nDoc.prototype._handleOp = function(err, message) {\n  if (err) {\n    if (err.code === ERROR_CODE.ERR_NO_OP && message.seq === this.inflightOp.seq) {\n      // Our op was a no-op, either because we submitted a no-op, or - more\n      // likely - because our op was transformed into a no-op by the server\n      // because of a similar remote op. In this case, the server has avoided\n      // committing the op to the database, and we should just clear the in-flight\n      // op and call the callbacks. However, let's first catch ourselves up to\n      // the remote, so that we're in a nice consistent state\n      return this.fetch(this._clearInflightOp.bind(this));\n    }\n    if (this.inflightOp) {\n      return this._rollback(err);\n    }\n    return this.emit('error', err);\n  }\n\n  if (this.inflightOp &&\n      message.src === this.inflightOp.src &&\n      message.seq === this.inflightOp.seq) {\n    // The op has already been applied locally. Just update the version\n    // and pending state appropriately\n    this._opAcknowledged(message);\n    return;\n  }\n\n  if (this.version == null || message.v > this.version) {\n    // This will happen in normal operation if we become subscribed to a\n    // new document via a query. It can also happen if we get an op for\n    // a future version beyond the version we are expecting next. This\n    // could happen if the server doesn't publish an op for whatever reason\n    // or because of a race condition. In any case, we can send a fetch\n    // command to catch back up.\n    //\n    // Fetch only sends a new fetch command if no fetches are inflight, which\n    // will act as a natural debouncing so we don't send multiple fetch\n    // requests for many ops received at once.\n    this.fetch();\n    return;\n  }\n\n  if (message.v < this.version) {\n    // We can safely ignore the old (duplicate) operation.\n    return;\n  }\n\n  if (this.inflightOp) {\n    var transformErr = transformX(this.inflightOp, message);\n    if (transformErr) return this._hardRollback(transformErr);\n  }\n\n  for (var i = 0; i < this.pendingOps.length; i++) {\n    var transformErr = transformX(this.pendingOps[i], message);\n    if (transformErr) return this._hardRollback(transformErr);\n  }\n\n  this.version++;\n  try {\n    this._otApply(message, false);\n  } catch (error) {\n    return this._hardRollback(error);\n  }\n};\n\n// Called whenever (you guessed it!) the connection state changes. This will\n// happen when we get disconnected & reconnect.\nDoc.prototype._onConnectionStateChanged = function() {\n  if (this.connection.canSend) {\n    this.flush();\n    this._resubscribe();\n  } else {\n    if (this.inflightOp) {\n      this.pendingOps.unshift(this.inflightOp);\n      this.inflightOp = null;\n    }\n    this.subscribed = false;\n    if (this.inflightSubscribe) {\n      if (this.inflightSubscribe.wantSubscribe) {\n        this.pendingSubscribe.unshift(this.inflightSubscribe);\n        this.inflightSubscribe = null;\n      } else {\n        this._handleSubscribe();\n      }\n    }\n    if (this.inflightFetch.length) {\n      this.pendingFetch = this.pendingFetch.concat(this.inflightFetch);\n      this.inflightFetch.length = 0;\n    }\n  }\n};\n\nDoc.prototype._resubscribe = function() {\n  if (!this.pendingSubscribe.length && this.wantSubscribe) {\n    return this.subscribe();\n  }\n  var willFetch = this.pendingSubscribe.some(function(request) {\n    return request.wantSubscribe;\n  });\n  if (!willFetch && this.pendingFetch.length) this.fetch();\n  this._flushSubscribe();\n};\n\n// Request the current document snapshot or ops that bring us up to date\nDoc.prototype.fetch = function(callback) {\n  this._fetch({}, callback);\n};\n\nDoc.prototype._fetch = function(options, callback) {\n  this.pendingFetch.push(callback);\n  var shouldSend = this.connection.canSend && (\n    options.force || !this.inflightFetch.length\n  );\n  if (!shouldSend) return;\n  this.inflightFetch.push(this.pendingFetch.shift());\n  this.connection.sendFetch(this);\n};\n\n// Fetch the initial document and keep receiving updates\nDoc.prototype.subscribe = function(callback) {\n  var wantSubscribe = true;\n  this._queueSubscribe(wantSubscribe, callback);\n};\n\n// Unsubscribe. The data will stay around in local memory, but we'll stop\n// receiving updates\nDoc.prototype.unsubscribe = function(callback) {\n  var wantSubscribe = false;\n  this._queueSubscribe(wantSubscribe, callback);\n};\n\nDoc.prototype._queueSubscribe = function(wantSubscribe, callback) {\n  var lastRequest = this.pendingSubscribe[this.pendingSubscribe.length - 1] || this.inflightSubscribe;\n  var isDuplicateRequest = lastRequest && lastRequest.wantSubscribe === wantSubscribe;\n  if (isDuplicateRequest) {\n    lastRequest.callback = combineCallbacks([lastRequest.callback, callback]);\n    return;\n  }\n  this.pendingSubscribe.push({\n    wantSubscribe: !!wantSubscribe,\n    callback: callback\n  });\n  this._flushSubscribe();\n};\n\nDoc.prototype._flushSubscribe = function() {\n  if (this.inflightSubscribe || !this.pendingSubscribe.length) return;\n\n  if (this.connection.canSend) {\n    this.inflightSubscribe = this.pendingSubscribe.shift();\n    this.wantSubscribe = this.inflightSubscribe.wantSubscribe;\n    if (this.wantSubscribe) {\n      this.connection.sendSubscribe(this);\n    } else {\n      // Be conservative about our subscription state. We'll be unsubscribed\n      // some time between sending this request, and receiving the callback,\n      // so let's just set ourselves to unsubscribed now.\n      this.subscribed = false;\n      this.connection.sendUnsubscribe(this);\n    }\n\n    return;\n  }\n\n  // If we're offline, then we're already unsubscribed. Therefore, call back\n  // the next request immediately if it's an unsubscribe request.\n  if (!this.pendingSubscribe[0].wantSubscribe) {\n    this.inflightSubscribe = this.pendingSubscribe.shift();\n    var doc = this;\n    util.nextTick(function() {\n      doc._handleSubscribe();\n    });\n  }\n};\n\nfunction combineCallbacks(callbacks) {\n  callbacks = callbacks.filter(util.truthy);\n  if (!callbacks.length) return null;\n  return function(error) {\n    util.callEach(callbacks, error);\n  };\n}\n\n\n// Operations //\n\n// Send the next pending op to the server, if we can.\n//\n// Only one operation can be in-flight at a time. If an operation is already on\n// its way, or we're not currently connected, this method does nothing.\nDoc.prototype.flush = function() {\n  // Ignore if we can't send or we are already sending an op\n  if (!this.connection.canSend || this.inflightOp) return;\n\n  // Send first pending op unless paused\n  if (!this.paused && this.pendingOps.length) {\n    this._sendOp();\n  }\n};\n\n// Helper function to set op to contain a no-op.\nfunction setNoOp(op) {\n  delete op.op;\n  delete op.create;\n  delete op.del;\n}\n\n// Transform server op data by a client op, and vice versa. Ops are edited in place.\nfunction transformX(client, server) {\n  // Order of statements in this function matters. Be especially careful if\n  // refactoring this function\n\n  // A client delete op should dominate if both the server and the client\n  // delete the document. Thus, any ops following the client delete (such as a\n  // subsequent create) will be maintained, since the server op is transformed\n  // to a no-op\n  if (client.del) return setNoOp(server);\n\n  if (server.del) {\n    return new ShareDBError(ERROR_CODE.ERR_DOC_WAS_DELETED, 'Document was deleted');\n  }\n  if (server.create) {\n    return new ShareDBError(ERROR_CODE.ERR_DOC_ALREADY_CREATED, 'Document already created');\n  }\n\n  // Ignore no-op coming from server\n  if (!('op' in server)) return;\n\n  // I believe that this should not occur, but check just in case\n  if (client.create) {\n    return new ShareDBError(ERROR_CODE.ERR_DOC_ALREADY_CREATED, 'Document already created');\n  }\n\n  // They both edited the document. This is the normal case for this function -\n  // as in, most of the time we'll end up down here.\n  //\n  // You should be wondering why I'm using client.type instead of this.type.\n  // The reason is, if we get ops at an old version of the document, this.type\n  // might be undefined or a totally different type. By pinning the type to the\n  // op data, we make sure the right type has its transform function called.\n  if (client.type.transformX) {\n    var result = client.type.transformX(client.op, server.op);\n    client.op = result[0];\n    server.op = result[1];\n  } else {\n    var clientOp = client.type.transform(client.op, server.op, 'left');\n    var serverOp = client.type.transform(server.op, client.op, 'right');\n    client.op = clientOp;\n    server.op = serverOp;\n  }\n};\n\n/**\n * Applies the operation to the snapshot\n *\n * If the operation is create or delete it emits `create` or `del`. Then the\n * operation is applied to the snapshot and `op` and `after op` are emitted.\n * If the type supports incremental updates and `this.incremental` is true we\n * fire `op` after every small operation.\n *\n * This is the only function to fire the above mentioned events.\n *\n * @private\n */\nDoc.prototype._otApply = function(op, source) {\n  if ('op' in op) {\n    if (!this.type) {\n      // Throw here, because all usage of _otApply should be wrapped with a try/catch\n      throw new ShareDBError(\n        ERROR_CODE.ERR_DOC_DOES_NOT_EXIST,\n        'Cannot apply op to uncreated document. ' + this.collection + '.' + this.id\n      );\n    }\n\n    // NB: If we need to add another argument to this event, we should consider\n    // the fact that the 'op' event has op.src as its 3rd argument\n    this.emit('before op batch', op.op, source);\n\n    // Iteratively apply multi-component remote operations and rollback ops\n    // (source === false) for the default JSON0 OT type. It could use\n    // type.shatter(), but since this code is so specific to use cases for the\n    // JSON0 type and ShareDB explicitly bundles the default type, we might as\n    // well write it this way and save needing to iterate through the op\n    // components twice.\n    //\n    // Ideally, we would not need this extra complexity. However, it is\n    // helpful for implementing bindings that update DOM nodes and other\n    // stateful objects by translating op events directly into corresponding\n    // mutations. Such bindings are most easily written as responding to\n    // individual op components one at a time in order, and it is important\n    // that the snapshot only include updates from the particular op component\n    // at the time of emission. Eliminating this would require rethinking how\n    // such external bindings are implemented.\n    if (!source && this.type === types.defaultType && op.op.length > 1) {\n      if (!this.applyStack) this.applyStack = [];\n      var stackLength = this.applyStack.length;\n      for (var i = 0; i < op.op.length; i++) {\n        var component = op.op[i];\n        var componentOp = {op: [component]};\n        // Apply the individual op component\n        this.emit('before op', componentOp.op, source, op.src);\n        // Transform componentOp against any ops that have been submitted\n        // sychronously inside of an op event handler since we began apply of\n        // our operation\n        for (var j = stackLength; j < this.applyStack.length; j++) {\n          var transformErr = transformX(this.applyStack[j], componentOp);\n          if (transformErr) return this._hardRollback(transformErr);\n        }\n        this._setData(this.type.apply(this.data, componentOp.op));\n        this.emit('op', componentOp.op, source, op.src);\n      }\n      this.emit('op batch', op.op, source);\n      // Pop whatever was submitted since we started applying this op\n      this._popApplyStack(stackLength);\n      return;\n    }\n\n    // The 'before op' event enables clients to pull any necessary data out of\n    // the snapshot before it gets changed\n    this.emit('before op', op.op, source, op.src);\n    // Apply the operation to the local data, mutating it in place\n    this._setData(this.type.apply(this.data, op.op));\n    // Emit an 'op' event once the local data includes the changes from the\n    // op. For locally submitted ops, this will be synchronously with\n    // submission and before the server or other clients have received the op.\n    // For ops from other clients, this will be after the op has been\n    // committed to the database and published\n    this.emit('op', op.op, source, op.src);\n    this.emit('op batch', op.op, source);\n    return;\n  }\n\n  if (op.create) {\n    this._setType(op.create.type);\n    if (this.type.deserialize) {\n      if (this.type.createDeserialized) {\n        this._setData(this.type.createDeserialized(op.create.data));\n      } else {\n        this._setData(this.type.deserialize(this.type.create(op.create.data)));\n      }\n    } else {\n      this._setData(this.type.create(op.create.data));\n    }\n    this.emit('create', source);\n    return;\n  }\n\n  if (op.del) {\n    var oldData = this.data;\n    this._setType(null);\n    this.emit('del', oldData, source);\n    return;\n  }\n};\n\n\n// ***** Sending operations\n\n// Actually send op to the server.\nDoc.prototype._sendOp = function() {\n  if (!this.connection.canSend) return;\n  var src = this.connection.id;\n\n  // When there is no inflightOp, send the first item in pendingOps. If\n  // there is inflightOp, try sending it again\n  if (!this.inflightOp) {\n    // Send first pending op\n    this.inflightOp = this.pendingOps.shift();\n  }\n  var op = this.inflightOp;\n  if (!op) {\n    var err = new ShareDBError(ERROR_CODE.ERR_INFLIGHT_OP_MISSING, 'No op to send on call to _sendOp');\n    return this.emit('error', err);\n  }\n\n  // Track data for retrying ops\n  op.sentAt = Date.now();\n  op.retries = (op.retries == null) ? 0 : op.retries + 1;\n\n  // The src + seq number is a unique ID representing this operation. This tuple\n  // is used on the server to detect when ops have been sent multiple times and\n  // on the client to match acknowledgement of an op back to the inflightOp.\n  // Note that the src could be different from this.connection.id after a\n  // reconnect, since an op may still be pending after the reconnection and\n  // this.connection.id will change. In case an op is sent multiple times, we\n  // also need to be careful not to override the original seq value.\n  if (op.seq == null) {\n    if (this.connection.seq >= util.MAX_SAFE_INTEGER) {\n      return this.emit('error', new ShareDBError(\n        ERROR_CODE.ERR_CONNECTION_SEQ_INTEGER_OVERFLOW,\n        'Connection seq has exceeded the max safe integer, maybe from being open for too long'\n      ));\n    }\n\n    op.seq = this.connection.seq++;\n  }\n\n  this.connection.sendOp(this, op);\n\n  // src isn't needed on the first try, since the server session will have the\n  // same id, but it must be set on the inflightOp in case it is sent again\n  // after a reconnect and the connection's id has changed by then\n  if (op.src == null) op.src = src;\n};\n\n\n// Queues the operation for submission to the server and applies it locally.\n//\n// Internal method called to do the actual work for submit(), create() and del().\n// @private\n//\n// @param op\n// @param [op.op]\n// @param [op.del]\n// @param [op.create]\n// @param [callback] called when operation is submitted\nDoc.prototype._submit = function(op, source, callback) {\n  // Locally submitted ops must always have a truthy source\n  if (!source) source = true;\n\n  // The op contains either op, create, delete, or none of the above (a no-op).\n  if ('op' in op) {\n    if (!this.type) {\n      if (this._isInHardRollback) {\n        var err = new ShareDBError(\n          ERROR_CODE.ERR_DOC_IN_HARD_ROLLBACK,\n          'Cannot submit op. Document is performing hard rollback. ' + this.collection + '.' + this.id\n        );\n      } else {\n        var err = new ShareDBError(\n          ERROR_CODE.ERR_DOC_DOES_NOT_EXIST,\n          'Cannot submit op. Document has not been created. ' + this.collection + '.' + this.id\n        );\n      }\n\n      if (callback) return callback(err);\n      return this.emit('error', err);\n    }\n    // Try to normalize the op. This removes trailing skip:0's and things like that.\n    if (this.type.normalize) op.op = this.type.normalize(op.op);\n  }\n\n  try {\n    this._pushOp(op, source, callback);\n    this._otApply(op, source);\n  } catch (error) {\n    return this._hardRollback(error);\n  }\n\n  // The call to flush is delayed so if submit() is called multiple times\n  // synchronously, all the ops are combined before being sent to the server.\n  var doc = this;\n  util.nextTick(function() {\n    doc.flush();\n  });\n};\n\nDoc.prototype._pushOp = function(op, source, callback) {\n  op.source = source;\n  if (this.applyStack) {\n    // If we are in the process of incrementally applying an operation, don't\n    // compose the op and push it onto the applyStack so it can be transformed\n    // against other components from the op or ops being applied\n    this.applyStack.push(op);\n  } else {\n    // If the type supports composes, try to compose the operation onto the\n    // end of the last pending operation.\n    var composed = this._tryCompose(op);\n    if (composed) {\n      composed.callbacks.push(callback);\n      return;\n    }\n  }\n  // Push on to the pendingOps queue of ops to submit if we didn't compose\n  op.type = this.type;\n  op.callbacks = [callback];\n  this.pendingOps.push(op);\n};\n\nDoc.prototype._popApplyStack = function(to) {\n  if (to > 0) {\n    this.applyStack.length = to;\n    return;\n  }\n  // Once we have completed the outermost apply loop, reset to null and no\n  // longer add ops to the applyStack as they are submitted\n  var op = this.applyStack[0];\n  this.applyStack = null;\n  if (!op) return;\n  // Compose the ops added since the beginning of the apply stack, since we\n  // had to skip compose when they were originally pushed\n  var i = this.pendingOps.indexOf(op);\n  if (i === -1) return;\n  var ops = this.pendingOps.splice(i);\n  for (var i = 0; i < ops.length; i++) {\n    var op = ops[i];\n    var composed = this._tryCompose(op);\n    if (composed) {\n      composed.callbacks = composed.callbacks.concat(op.callbacks);\n    } else {\n      this.pendingOps.push(op);\n    }\n  }\n};\n\n// Try to compose a submitted op into the last pending op. Returns the\n// composed op if it succeeds, undefined otherwise\nDoc.prototype._tryCompose = function(op) {\n  if (this.preventCompose) return;\n\n  // We can only compose into the last pending op. Inflight ops have already\n  // been sent to the server, so we can't modify them\n  var last = this.pendingOps[this.pendingOps.length - 1];\n  if (!last || last.sentAt) return;\n\n  // If we're submitting the op source, we can only combine ops that have\n  // a matching source\n  if (this.submitSource && !deepEqual(op.source, last.source)) return;\n\n  // Compose an op into a create by applying it. This effectively makes the op\n  // invisible, as if the document were created including the op originally\n  if (last.create && 'op' in op) {\n    last.create.data = this.type.apply(last.create.data, op.op);\n    return last;\n  }\n\n  // Compose two ops into a single op if supported by the type. Types that\n  // support compose must be able to compose any two ops together\n  if ('op' in last && 'op' in op && this.type.compose) {\n    last.op = this.type.compose(last.op, op.op);\n    return last;\n  }\n};\n\n// *** Client OT entrypoints.\n\n// Submit an operation to the document.\n//\n// @param operation handled by the OT type\n// @param options  {source: ...}\n// @param [callback] called after operation submitted\n//\n// @fires before op, op, after op\nDoc.prototype.submitOp = function(component, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  var op = {op: component};\n  var source = options && options.source;\n  this._submit(op, source, callback);\n};\n\n// Create the document, which in ShareJS semantics means to set its type. Every\n// object implicitly exists in the database but has no data and no type. Create\n// sets the type of the object and can optionally set some initial data on the\n// object, depending on the type.\n//\n// @param data  initial\n// @param type  OT type\n// @param options  {source: ...}\n// @param callback  called when operation submitted\nDoc.prototype.create = function(data, type, options, callback) {\n  if (typeof type === 'function') {\n    callback = type;\n    options = null;\n    type = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  if (!type) {\n    type = types.defaultType.uri;\n  }\n  if (this.type) {\n    var err = new ShareDBError(ERROR_CODE.ERR_DOC_ALREADY_CREATED, 'Document already exists');\n    if (callback) return callback(err);\n    return this.emit('error', err);\n  }\n  var op = {create: {type: type, data: data}};\n  var source = options && options.source;\n  this._submit(op, source, callback);\n};\n\n// Delete the document. This creates and submits a delete operation to the\n// server. Deleting resets the object's type to null and deletes its data. The\n// document still exists, and still has the version it used to have before you\n// deleted it (well, old version +1).\n//\n// @param options  {source: ...}\n// @param callback  called when operation submitted\nDoc.prototype.del = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  if (!this.type) {\n    var err = new ShareDBError(ERROR_CODE.ERR_DOC_DOES_NOT_EXIST, 'Document does not exist');\n    if (callback) return callback(err);\n    return this.emit('error', err);\n  }\n  var op = {del: true};\n  var source = options && options.source;\n  this._submit(op, source, callback);\n};\n\n\n// Stops the document from sending any operations to the server.\nDoc.prototype.pause = function() {\n  this.paused = true;\n};\n\n// Continue sending operations to the server\nDoc.prototype.resume = function() {\n  this.paused = false;\n  this.flush();\n};\n\n// Create a snapshot that can be serialized, deserialized, and passed into `Doc.ingestSnapshot`.\nDoc.prototype.toSnapshot = function() {\n  return {\n    v: this.version,\n    data: clone(this.data),\n    type: this.type.uri\n  };\n};\n\n// *** Receiving operations\n\n// This is called when the server acknowledges an operation from the client.\nDoc.prototype._opAcknowledged = function(message) {\n  if (this.inflightOp.create) {\n    this.version = message.v;\n  } else if (message.v !== this.version) {\n    // We should already be at the same version, because the server should\n    // have sent all the ops that have happened before acknowledging our op\n    logger.warn('Invalid version from server. Expected: ' + this.version + ' Received: ' + message.v, message);\n\n    // Fetching should get us back to a working document state\n    return this.fetch();\n  }\n\n  if (message[ACTIONS.fixup]) {\n    for (var i = 0; i < message[ACTIONS.fixup].length; i++) {\n      var fixupOp = message[ACTIONS.fixup][i];\n\n      for (var j = 0; j < this.pendingOps.length; j++) {\n        var transformErr = transformX(this.pendingOps[i], fixupOp);\n        if (transformErr) return this._hardRollback(transformErr);\n      }\n\n      try {\n        this._otApply(fixupOp, false);\n      } catch (error) {\n        return this._hardRollback(error);\n      }\n    }\n  }\n\n  // The op was committed successfully. Increment the version number\n  this.version++;\n\n  this._clearInflightOp();\n};\n\nDoc.prototype._rollback = function(err) {\n  // The server has rejected submission of the current operation. Invert by\n  // just the inflight op if possible. If not possible to invert, cancel all\n  // pending ops and fetch the latest from the server to get us back into a\n  // working state, then call back\n  var op = this.inflightOp;\n\n  if (!('op' in op && op.type.invert)) {\n    return this._hardRollback(err);\n  }\n\n  try {\n    op.op = op.type.invert(op.op);\n  } catch (error) {\n    // If the op doesn't support `.invert()`, we just reload the doc\n    // instead of trying to locally revert it.\n    return this._hardRollback(err);\n  }\n\n  // Transform the undo operation by any pending ops.\n  for (var i = 0; i < this.pendingOps.length; i++) {\n    var transformErr = transformX(this.pendingOps[i], op);\n    if (transformErr) return this._hardRollback(transformErr);\n  }\n\n  // ... and apply it locally, reverting the changes.\n  //\n  // This operation is applied to look like it comes from a remote source.\n  // I'm still not 100% sure about this functionality, because its really a\n  // local op. Basically, the problem is that if the client's op is rejected\n  // by the server, the editor window should update to reflect the undo.\n  try {\n    this._otApply(op, false);\n  } catch (error) {\n    return this._hardRollback(error);\n  }\n\n  // The server has rejected submission of the current operation. If we get\n  // an \"Op submit rejected\" error, this was done intentionally\n  // and we should roll back but not return an error to the user.\n  if (err.code === ERROR_CODE.ERR_OP_SUBMIT_REJECTED) {\n    return this._clearInflightOp(null);\n  }\n\n  this._clearInflightOp(err);\n};\n\nDoc.prototype._hardRollback = function(err) {\n  this._isInHardRollback = true;\n  // Store pending ops so that we can notify their callbacks of the error.\n  // We combine the inflight op and the pending ops, because it's possible\n  // to hit a condition where we have no inflight op, but we do have pending\n  // ops. This can happen when an invalid op is submitted, which causes us\n  // to hard rollback before the pending op was flushed.\n  var pendingOps = this.pendingOps;\n  var inflightOp = this.inflightOp;\n\n  // Cancel all pending ops and reset if we can't invert\n  this._setType(null);\n  this.version = null;\n  this.inflightOp = null;\n  this.pendingOps = [];\n\n  // Fetch the latest version from the server to get us back into a working state\n  var doc = this;\n  this._fetch({force: true}, function(fetchError) {\n    doc._isInHardRollback = false;\n\n    // We want to check that no errors are swallowed, so we check that:\n    // - there are callbacks to call, and\n    // - that every single pending op called a callback\n    // If there are no ops queued, or one of them didn't handle the error,\n    // then we emit the error.\n\n    if (fetchError) {\n      // This is critical error as it means that our doc is not in usable state\n      // anymore, we should throw doc error.\n      logger.error('Hard rollback doc fetch failed.', fetchError, inflightOp);\n\n      doc.emit('error', new ShareDBError(\n        ERROR_CODE.ERR_HARD_ROLLBACK_FETCH_FAILED,\n        'Hard rollback fetch failed: ' + fetchError.message\n      ));\n    }\n\n    if (err.code === ERROR_CODE.ERR_OP_SUBMIT_REJECTED) {\n      /**\n       * Handle special case of ERR_OP_SUBMIT_REJECTED\n       * This ensures that we resolve the main op callback and reject\n       * all the pending ops. This is hard rollback so all the pending ops will be\n       * discarded. This will ensure that the user is at least informed about it.\n       * more info: https://github.com/share/sharedb/pull/626\n       */\n      if (inflightOp) {\n        util.callEach(inflightOp.callbacks);\n        inflightOp = null;\n      }\n\n      if (!pendingOps.length) return;\n      err = new ShareDBError(\n        ERROR_CODE.ERR_PENDING_OP_REMOVED_BY_OP_SUBMIT_REJECTED,\n        'Discarding pending op because of hard rollback during ERR_OP_SUBMIT_REJECTED'\n      );\n    }\n\n    if (inflightOp) pendingOps.unshift(inflightOp);\n    var allOpsHadCallbacks = !!pendingOps.length;\n    for (var i = 0; i < pendingOps.length; i++) {\n      allOpsHadCallbacks = util.callEach(pendingOps[i].callbacks, err) && allOpsHadCallbacks;\n    }\n    if (err && !allOpsHadCallbacks) doc.emit('error', err);\n  });\n};\n\nDoc.prototype._clearInflightOp = function(err) {\n  var inflightOp = this.inflightOp;\n\n  this.inflightOp = null;\n\n  var called = util.callEach(inflightOp.callbacks, err);\n\n  this.flush();\n  this._emitNothingPending();\n\n  if (err && !called) return this.emit('error', err);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/doc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/index.js":
/*!**************************************************!*\
  !*** ./node_modules/sharedb/lib/client/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.Connection = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/sharedb/lib/client/connection.js\");\nexports.Doc = __webpack_require__(/*! ./doc */ \"(ssr)/./node_modules/sharedb/lib/client/doc.js\");\nexports.Error = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/sharedb/lib/error.js\");\nexports.Query = __webpack_require__(/*! ./query */ \"(ssr)/./node_modules/sharedb/lib/client/query.js\");\nexports.types = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/sharedb/lib/types.js\");\nexports.logger = __webpack_require__(/*! ../logger */ \"(ssr)/./node_modules/sharedb/lib/logger/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvY2xpZW50L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFIQUE0QztBQUM1QyxnR0FBOEI7QUFDOUIsZ0dBQW1DO0FBQ25DLHNHQUFrQztBQUNsQyxnR0FBbUM7QUFDbkMseUdBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9jbGllbnQvaW5kZXguanM/YzM0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLkNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL2Nvbm5lY3Rpb24nKTtcbmV4cG9ydHMuRG9jID0gcmVxdWlyZSgnLi9kb2MnKTtcbmV4cG9ydHMuRXJyb3IgPSByZXF1aXJlKCcuLi9lcnJvcicpO1xuZXhwb3J0cy5RdWVyeSA9IHJlcXVpcmUoJy4vcXVlcnknKTtcbmV4cG9ydHMudHlwZXMgPSByZXF1aXJlKCcuLi90eXBlcycpO1xuZXhwb3J0cy5sb2dnZXIgPSByZXF1aXJlKCcuLi9sb2dnZXInKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/presence/doc-presence-emitter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/sharedb/lib/client/presence/doc-presence-emitter.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var util = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\n\nvar EVENTS = [\n  'create',\n  'del',\n  'destroy',\n  'load',\n  'op'\n];\n\nmodule.exports = DocPresenceEmitter;\n\nfunction DocPresenceEmitter() {\n  this._docs = Object.create(null);\n  this._forwarders = Object.create(null);\n  this._emitters = Object.create(null);\n}\n\nDocPresenceEmitter.prototype.addEventListener = function(doc, event, listener) {\n  this._registerDoc(doc);\n  var emitter = util.dig(this._emitters, doc.collection, doc.id);\n  emitter.on(event, listener);\n};\n\nDocPresenceEmitter.prototype.removeEventListener = function(doc, event, listener) {\n  var emitter = util.dig(this._emitters, doc.collection, doc.id);\n  if (!emitter) return;\n  emitter.off(event, listener);\n  // We'll always have at least one, because of the destroy listener\n  if (emitter._eventsCount === 1) this._unregisterDoc(doc);\n};\n\nDocPresenceEmitter.prototype._registerDoc = function(doc) {\n  var alreadyRegistered = true;\n  util.digOrCreate(this._docs, doc.collection, doc.id, function() {\n    alreadyRegistered = false;\n    return doc;\n  });\n\n  if (alreadyRegistered) return;\n\n  var emitter = util.digOrCreate(this._emitters, doc.collection, doc.id, function() {\n    var e = new EventEmitter();\n    // Set a high limit to avoid unnecessary warnings, but still\n    // retain some degree of memory leak detection\n    e.setMaxListeners(1000);\n    return e;\n  });\n\n  var self = this;\n  EVENTS.forEach(function(event) {\n    var forwarder = util.digOrCreate(self._forwarders, doc.collection, doc.id, event, function() {\n      return emitter.emit.bind(emitter, event);\n    });\n\n    doc.on(event, forwarder);\n  });\n\n  this.addEventListener(doc, 'destroy', this._unregisterDoc.bind(this, doc));\n};\n\nDocPresenceEmitter.prototype._unregisterDoc = function(doc) {\n  var forwarders = util.dig(this._forwarders, doc.collection, doc.id);\n  for (var event in forwarders) {\n    doc.off(event, forwarders[event]);\n  }\n\n  var emitter = util.dig(this._emitters, doc.collection, doc.id);\n  emitter.removeAllListeners();\n\n  util.digAndRemove(this._forwarders, doc.collection, doc.id);\n  util.digAndRemove(this._emitters, doc.collection, doc.id);\n  util.digAndRemove(this._docs, doc.collection, doc.id);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvY2xpZW50L3ByZXNlbmNlL2RvYy1wcmVzZW5jZS1lbWl0dGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyw0REFBWTtBQUMvQixtQkFBbUIsMERBQThCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9jbGllbnQvcHJlc2VuY2UvZG9jLXByZXNlbmNlLWVtaXR0ZXIuanM/MzcyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdXRpbCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKTtcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFVkVOVFMgPSBbXG4gICdjcmVhdGUnLFxuICAnZGVsJyxcbiAgJ2Rlc3Ryb3knLFxuICAnbG9hZCcsXG4gICdvcCdcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gRG9jUHJlc2VuY2VFbWl0dGVyO1xuXG5mdW5jdGlvbiBEb2NQcmVzZW5jZUVtaXR0ZXIoKSB7XG4gIHRoaXMuX2RvY3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9mb3J3YXJkZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fZW1pdHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG5Eb2NQcmVzZW5jZUVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihkb2MsIGV2ZW50LCBsaXN0ZW5lcikge1xuICB0aGlzLl9yZWdpc3RlckRvYyhkb2MpO1xuICB2YXIgZW1pdHRlciA9IHV0aWwuZGlnKHRoaXMuX2VtaXR0ZXJzLCBkb2MuY29sbGVjdGlvbiwgZG9jLmlkKTtcbiAgZW1pdHRlci5vbihldmVudCwgbGlzdGVuZXIpO1xufTtcblxuRG9jUHJlc2VuY2VFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZG9jLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgdmFyIGVtaXR0ZXIgPSB1dGlsLmRpZyh0aGlzLl9lbWl0dGVycywgZG9jLmNvbGxlY3Rpb24sIGRvYy5pZCk7XG4gIGlmICghZW1pdHRlcikgcmV0dXJuO1xuICBlbWl0dGVyLm9mZihldmVudCwgbGlzdGVuZXIpO1xuICAvLyBXZSdsbCBhbHdheXMgaGF2ZSBhdCBsZWFzdCBvbmUsIGJlY2F1c2Ugb2YgdGhlIGRlc3Ryb3kgbGlzdGVuZXJcbiAgaWYgKGVtaXR0ZXIuX2V2ZW50c0NvdW50ID09PSAxKSB0aGlzLl91bnJlZ2lzdGVyRG9jKGRvYyk7XG59O1xuXG5Eb2NQcmVzZW5jZUVtaXR0ZXIucHJvdG90eXBlLl9yZWdpc3RlckRvYyA9IGZ1bmN0aW9uKGRvYykge1xuICB2YXIgYWxyZWFkeVJlZ2lzdGVyZWQgPSB0cnVlO1xuICB1dGlsLmRpZ09yQ3JlYXRlKHRoaXMuX2RvY3MsIGRvYy5jb2xsZWN0aW9uLCBkb2MuaWQsIGZ1bmN0aW9uKCkge1xuICAgIGFscmVhZHlSZWdpc3RlcmVkID0gZmFsc2U7XG4gICAgcmV0dXJuIGRvYztcbiAgfSk7XG5cbiAgaWYgKGFscmVhZHlSZWdpc3RlcmVkKSByZXR1cm47XG5cbiAgdmFyIGVtaXR0ZXIgPSB1dGlsLmRpZ09yQ3JlYXRlKHRoaXMuX2VtaXR0ZXJzLCBkb2MuY29sbGVjdGlvbiwgZG9jLmlkLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAvLyBTZXQgYSBoaWdoIGxpbWl0IHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhcm5pbmdzLCBidXQgc3RpbGxcbiAgICAvLyByZXRhaW4gc29tZSBkZWdyZWUgb2YgbWVtb3J5IGxlYWsgZGV0ZWN0aW9uXG4gICAgZS5zZXRNYXhMaXN0ZW5lcnMoMTAwMCk7XG4gICAgcmV0dXJuIGU7XG4gIH0pO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgRVZFTlRTLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgZm9yd2FyZGVyID0gdXRpbC5kaWdPckNyZWF0ZShzZWxmLl9mb3J3YXJkZXJzLCBkb2MuY29sbGVjdGlvbiwgZG9jLmlkLCBldmVudCwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZW1pdHRlci5lbWl0LmJpbmQoZW1pdHRlciwgZXZlbnQpO1xuICAgIH0pO1xuXG4gICAgZG9jLm9uKGV2ZW50LCBmb3J3YXJkZXIpO1xuICB9KTtcblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZG9jLCAnZGVzdHJveScsIHRoaXMuX3VucmVnaXN0ZXJEb2MuYmluZCh0aGlzLCBkb2MpKTtcbn07XG5cbkRvY1ByZXNlbmNlRW1pdHRlci5wcm90b3R5cGUuX3VucmVnaXN0ZXJEb2MgPSBmdW5jdGlvbihkb2MpIHtcbiAgdmFyIGZvcndhcmRlcnMgPSB1dGlsLmRpZyh0aGlzLl9mb3J3YXJkZXJzLCBkb2MuY29sbGVjdGlvbiwgZG9jLmlkKTtcbiAgZm9yICh2YXIgZXZlbnQgaW4gZm9yd2FyZGVycykge1xuICAgIGRvYy5vZmYoZXZlbnQsIGZvcndhcmRlcnNbZXZlbnRdKTtcbiAgfVxuXG4gIHZhciBlbWl0dGVyID0gdXRpbC5kaWcodGhpcy5fZW1pdHRlcnMsIGRvYy5jb2xsZWN0aW9uLCBkb2MuaWQpO1xuICBlbWl0dGVyLnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gIHV0aWwuZGlnQW5kUmVtb3ZlKHRoaXMuX2ZvcndhcmRlcnMsIGRvYy5jb2xsZWN0aW9uLCBkb2MuaWQpO1xuICB1dGlsLmRpZ0FuZFJlbW92ZSh0aGlzLl9lbWl0dGVycywgZG9jLmNvbGxlY3Rpb24sIGRvYy5pZCk7XG4gIHV0aWwuZGlnQW5kUmVtb3ZlKHRoaXMuX2RvY3MsIGRvYy5jb2xsZWN0aW9uLCBkb2MuaWQpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/presence/doc-presence-emitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/presence/doc-presence.js":
/*!******************************************************************!*\
  !*** ./node_modules/sharedb/lib/client/presence/doc-presence.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Presence = __webpack_require__(/*! ./presence */ \"(ssr)/./node_modules/sharedb/lib/client/presence/presence.js\");\nvar LocalDocPresence = __webpack_require__(/*! ./local-doc-presence */ \"(ssr)/./node_modules/sharedb/lib/client/presence/local-doc-presence.js\");\nvar RemoteDocPresence = __webpack_require__(/*! ./remote-doc-presence */ \"(ssr)/./node_modules/sharedb/lib/client/presence/remote-doc-presence.js\");\n\nfunction DocPresence(connection, collection, id) {\n  var channel = DocPresence.channel(collection, id);\n  Presence.call(this, connection, channel);\n\n  this.collection = collection;\n  this.id = id;\n}\nmodule.exports = DocPresence;\n\nDocPresence.prototype = Object.create(Presence.prototype);\n\nDocPresence.channel = function(collection, id) {\n  return collection + '.' + id;\n};\n\nDocPresence.prototype._createLocalPresence = function(id) {\n  return new LocalDocPresence(this, id);\n};\n\nDocPresence.prototype._createRemotePresence = function(id) {\n  return new RemoteDocPresence(this, id);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvY2xpZW50L3ByZXNlbmNlL2RvYy1wcmVzZW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsZ0ZBQVk7QUFDbkMsdUJBQXVCLG1CQUFPLENBQUMsb0dBQXNCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLHNHQUF1Qjs7QUFFdkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9jbGllbnQvcHJlc2VuY2UvZG9jLXByZXNlbmNlLmpzP2E1NzciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFByZXNlbmNlID0gcmVxdWlyZSgnLi9wcmVzZW5jZScpO1xudmFyIExvY2FsRG9jUHJlc2VuY2UgPSByZXF1aXJlKCcuL2xvY2FsLWRvYy1wcmVzZW5jZScpO1xudmFyIFJlbW90ZURvY1ByZXNlbmNlID0gcmVxdWlyZSgnLi9yZW1vdGUtZG9jLXByZXNlbmNlJyk7XG5cbmZ1bmN0aW9uIERvY1ByZXNlbmNlKGNvbm5lY3Rpb24sIGNvbGxlY3Rpb24sIGlkKSB7XG4gIHZhciBjaGFubmVsID0gRG9jUHJlc2VuY2UuY2hhbm5lbChjb2xsZWN0aW9uLCBpZCk7XG4gIFByZXNlbmNlLmNhbGwodGhpcywgY29ubmVjdGlvbiwgY2hhbm5lbCk7XG5cbiAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgdGhpcy5pZCA9IGlkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBEb2NQcmVzZW5jZTtcblxuRG9jUHJlc2VuY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQcmVzZW5jZS5wcm90b3R5cGUpO1xuXG5Eb2NQcmVzZW5jZS5jaGFubmVsID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgaWQpIHtcbiAgcmV0dXJuIGNvbGxlY3Rpb24gKyAnLicgKyBpZDtcbn07XG5cbkRvY1ByZXNlbmNlLnByb3RvdHlwZS5fY3JlYXRlTG9jYWxQcmVzZW5jZSA9IGZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBuZXcgTG9jYWxEb2NQcmVzZW5jZSh0aGlzLCBpZCk7XG59O1xuXG5Eb2NQcmVzZW5jZS5wcm90b3R5cGUuX2NyZWF0ZVJlbW90ZVByZXNlbmNlID0gZnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIG5ldyBSZW1vdGVEb2NQcmVzZW5jZSh0aGlzLCBpZCk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/presence/doc-presence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/presence/local-doc-presence.js":
/*!************************************************************************!*\
  !*** ./node_modules/sharedb/lib/client/presence/local-doc-presence.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var LocalPresence = __webpack_require__(/*! ./local-presence */ \"(ssr)/./node_modules/sharedb/lib/client/presence/local-presence.js\");\nvar ShareDBError = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/sharedb/lib/error.js\");\nvar util = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\nvar ERROR_CODE = ShareDBError.CODES;\n\nmodule.exports = LocalDocPresence;\nfunction LocalDocPresence(presence, presenceId) {\n  LocalPresence.call(this, presence, presenceId);\n\n  this.collection = this.presence.collection;\n  this.id = this.presence.id;\n\n  this._doc = this.connection.get(this.collection, this.id);\n  this._emitter = this.connection._docPresenceEmitter;\n  this._isSending = false;\n  this._docDataVersionByPresenceVersion = Object.create(null);\n\n  this._opHandler = this._transformAgainstOp.bind(this);\n  this._createOrDelHandler = this._handleCreateOrDel.bind(this);\n  this._loadHandler = this._handleLoad.bind(this);\n  this._destroyHandler = this.destroy.bind(this);\n  this._registerWithDoc();\n}\n\nLocalDocPresence.prototype = Object.create(LocalPresence.prototype);\n\nLocalDocPresence.prototype.submit = function(value, callback) {\n  if (!this._doc.type) {\n    // If the Doc hasn't been created, we already assume all presence to\n    // be null. Let's early return, instead of error since this is a harmless\n    // no-op\n    if (value === null) return this._callbackOrEmit(null, callback);\n\n    var error = null;\n    if (this._doc._isInHardRollback) {\n      error = {\n        code: ERROR_CODE.ERR_DOC_IN_HARD_ROLLBACK,\n        message: 'Cannot submit presence. Document is processing hard rollback'\n      };\n    } else {\n      error = {\n        code: ERROR_CODE.ERR_DOC_DOES_NOT_EXIST,\n        message: 'Cannot submit presence. Document has not been created'\n      };\n    }\n\n    return this._callbackOrEmit(error, callback);\n  };\n\n  // Record the current data state version to check if we need to transform\n  // the presence later\n  this._docDataVersionByPresenceVersion[this.presenceVersion] = this._doc._dataStateVersion;\n  LocalPresence.prototype.submit.call(this, value, callback);\n};\n\nLocalDocPresence.prototype.destroy = function(callback) {\n  this._emitter.removeEventListener(this._doc, 'op', this._opHandler);\n  this._emitter.removeEventListener(this._doc, 'create', this._createOrDelHandler);\n  this._emitter.removeEventListener(this._doc, 'del', this._createOrDelHandler);\n  this._emitter.removeEventListener(this._doc, 'load', this._loadHandler);\n  this._emitter.removeEventListener(this._doc, 'destroy', this._destroyHandler);\n\n  LocalPresence.prototype.destroy.call(this, callback);\n};\n\nLocalDocPresence.prototype._sendPending = function() {\n  if (this._isSending) return;\n  this._isSending = true;\n  var presence = this;\n  this._doc.whenNothingPending(function() {\n    presence._isSending = false;\n    if (!presence.connection.canSend) return;\n\n    presence._pendingMessages.forEach(function(message) {\n      message.t = presence._doc.type.uri;\n      message.v = presence._doc.version;\n      presence.connection.send(message);\n    });\n\n    presence._pendingMessages = [];\n    presence._docDataVersionByPresenceVersion = Object.create(null);\n  });\n};\n\nLocalDocPresence.prototype._registerWithDoc = function() {\n  this._emitter.addEventListener(this._doc, 'op', this._opHandler);\n  this._emitter.addEventListener(this._doc, 'create', this._createOrDelHandler);\n  this._emitter.addEventListener(this._doc, 'del', this._createOrDelHandler);\n  this._emitter.addEventListener(this._doc, 'load', this._loadHandler);\n  this._emitter.addEventListener(this._doc, 'destroy', this._destroyHandler);\n};\n\nLocalDocPresence.prototype._transformAgainstOp = function(op, source) {\n  var presence = this;\n  var docDataVersion = this._doc._dataStateVersion;\n\n  this._pendingMessages.forEach(function(message) {\n    // Check if the presence needs transforming against the op - this is to check against\n    // edge cases where presence is submitted from an 'op' event\n    var messageDocDataVersion = presence._docDataVersionByPresenceVersion[message.pv];\n    if (messageDocDataVersion >= docDataVersion) return;\n    try {\n      message.p = presence._transformPresence(message.p, op, source);\n      // Ensure the presence's data version is kept consistent to deal with \"deep\" op\n      // submissions\n      presence._docDataVersionByPresenceVersion[message.pv] = docDataVersion;\n    } catch (error) {\n      var callback = presence._getCallback(message.pv);\n      presence._callbackOrEmit(error, callback);\n    }\n  });\n\n  try {\n    this.value = this._transformPresence(this.value, op, source);\n  } catch (error) {\n    this.emit('error', error);\n  }\n};\n\nLocalDocPresence.prototype._handleCreateOrDel = function() {\n  this._pendingMessages.forEach(function(message) {\n    message.p = null;\n  });\n\n  this.value = null;\n};\n\nLocalDocPresence.prototype._handleLoad = function() {\n  this.value = null;\n  this._pendingMessages = [];\n  this._docDataVersionByPresenceVersion = Object.create(null);\n};\n\nLocalDocPresence.prototype._message = function() {\n  var message = LocalPresence.prototype._message.call(this);\n  message.c = this.collection,\n  message.d = this.id,\n  message.v = null;\n  message.t = null;\n  return message;\n};\n\nLocalDocPresence.prototype._transformPresence = function(value, op, source) {\n  var type = this._doc.type;\n  if (!util.supportsPresence(type)) {\n    throw new ShareDBError(\n      ERROR_CODE.ERR_TYPE_DOES_NOT_SUPPORT_PRESENCE,\n      'Type does not support presence: ' + type.name\n    );\n  }\n  return type.transformPresence(value, op, source);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/presence/local-doc-presence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/presence/local-presence.js":
/*!********************************************************************!*\
  !*** ./node_modules/sharedb/lib/client/presence/local-presence.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var emitter = __webpack_require__(/*! ../../emitter */ \"(ssr)/./node_modules/sharedb/lib/emitter.js\");\nvar ACTIONS = (__webpack_require__(/*! ../../message-actions */ \"(ssr)/./node_modules/sharedb/lib/message-actions.js\").ACTIONS);\nvar util = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\n\nmodule.exports = LocalPresence;\nfunction LocalPresence(presence, presenceId) {\n  emitter.EventEmitter.call(this);\n\n  if (!presenceId || typeof presenceId !== 'string') {\n    throw new Error('LocalPresence presenceId must be a string');\n  }\n\n  this.presence = presence;\n  this.presenceId = presenceId;\n  this.connection = presence.connection;\n  this.presenceVersion = 0;\n\n  this.value = null;\n\n  this._pendingMessages = [];\n  this._callbacksByPresenceVersion = Object.create(null);\n}\nemitter.mixin(LocalPresence);\n\nLocalPresence.prototype.submit = function(value, callback) {\n  this.value = value;\n  this.send(callback);\n};\n\nLocalPresence.prototype.send = function(callback) {\n  var message = this._message();\n  this._pendingMessages.push(message);\n  this._callbacksByPresenceVersion[message.pv] = callback;\n  this._sendPending();\n};\n\nLocalPresence.prototype.destroy = function(callback) {\n  var presence = this;\n  this.submit(null, function(error) {\n    if (error) return presence._callbackOrEmit(error, callback);\n    delete presence.presence.localPresences[presence.presenceId];\n    if (callback) callback();\n  });\n};\n\nLocalPresence.prototype._sendPending = function() {\n  if (!this.connection.canSend) return;\n  var presence = this;\n  this._pendingMessages.forEach(function(message) {\n    presence.connection.send(message);\n  });\n\n  this._pendingMessages = [];\n};\n\nLocalPresence.prototype._ack = function(error, presenceVersion) {\n  var callback = this._getCallback(presenceVersion);\n  this._callbackOrEmit(error, callback);\n};\n\nLocalPresence.prototype._message = function() {\n  return {\n    a: ACTIONS.presence,\n    ch: this.presence.channel,\n    id: this.presenceId,\n    p: this.value,\n    pv: this.presenceVersion++\n  };\n};\n\nLocalPresence.prototype._getCallback = function(presenceVersion) {\n  var callback = this._callbacksByPresenceVersion[presenceVersion];\n  delete this._callbacksByPresenceVersion[presenceVersion];\n  return callback;\n};\n\nLocalPresence.prototype._callbackOrEmit = function(error, callback) {\n  if (callback) return util.nextTick(callback, error);\n  if (error) this.emit('error', error);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvY2xpZW50L3ByZXNlbmNlL2xvY2FsLXByZXNlbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxrRUFBZTtBQUNyQyxjQUFjLGlIQUF3QztBQUN0RCxXQUFXLG1CQUFPLENBQUMsNERBQVk7O0FBRS9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9jbGllbnQvcHJlc2VuY2UvbG9jYWwtcHJlc2VuY2UuanM/Njg2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZW1pdHRlciA9IHJlcXVpcmUoJy4uLy4uL2VtaXR0ZXInKTtcbnZhciBBQ1RJT05TID0gcmVxdWlyZSgnLi4vLi4vbWVzc2FnZS1hY3Rpb25zJykuQUNUSU9OUztcbnZhciB1dGlsID0gcmVxdWlyZSgnLi4vLi4vdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsUHJlc2VuY2U7XG5mdW5jdGlvbiBMb2NhbFByZXNlbmNlKHByZXNlbmNlLCBwcmVzZW5jZUlkKSB7XG4gIGVtaXR0ZXIuRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgaWYgKCFwcmVzZW5jZUlkIHx8IHR5cGVvZiBwcmVzZW5jZUlkICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignTG9jYWxQcmVzZW5jZSBwcmVzZW5jZUlkIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIHRoaXMucHJlc2VuY2UgPSBwcmVzZW5jZTtcbiAgdGhpcy5wcmVzZW5jZUlkID0gcHJlc2VuY2VJZDtcbiAgdGhpcy5jb25uZWN0aW9uID0gcHJlc2VuY2UuY29ubmVjdGlvbjtcbiAgdGhpcy5wcmVzZW5jZVZlcnNpb24gPSAwO1xuXG4gIHRoaXMudmFsdWUgPSBudWxsO1xuXG4gIHRoaXMuX3BlbmRpbmdNZXNzYWdlcyA9IFtdO1xuICB0aGlzLl9jYWxsYmFja3NCeVByZXNlbmNlVmVyc2lvbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5lbWl0dGVyLm1peGluKExvY2FsUHJlc2VuY2UpO1xuXG5Mb2NhbFByZXNlbmNlLnByb3RvdHlwZS5zdWJtaXQgPSBmdW5jdGlvbih2YWx1ZSwgY2FsbGJhY2spIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLnNlbmQoY2FsbGJhY2spO1xufTtcblxuTG9jYWxQcmVzZW5jZS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBtZXNzYWdlID0gdGhpcy5fbWVzc2FnZSgpO1xuICB0aGlzLl9wZW5kaW5nTWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgdGhpcy5fY2FsbGJhY2tzQnlQcmVzZW5jZVZlcnNpb25bbWVzc2FnZS5wdl0gPSBjYWxsYmFjaztcbiAgdGhpcy5fc2VuZFBlbmRpbmcoKTtcbn07XG5cbkxvY2FsUHJlc2VuY2UucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcHJlc2VuY2UgPSB0aGlzO1xuICB0aGlzLnN1Ym1pdChudWxsLCBmdW5jdGlvbihlcnJvcikge1xuICAgIGlmIChlcnJvcikgcmV0dXJuIHByZXNlbmNlLl9jYWxsYmFja09yRW1pdChlcnJvciwgY2FsbGJhY2spO1xuICAgIGRlbGV0ZSBwcmVzZW5jZS5wcmVzZW5jZS5sb2NhbFByZXNlbmNlc1twcmVzZW5jZS5wcmVzZW5jZUlkXTtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gIH0pO1xufTtcblxuTG9jYWxQcmVzZW5jZS5wcm90b3R5cGUuX3NlbmRQZW5kaW5nID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5jb25uZWN0aW9uLmNhblNlbmQpIHJldHVybjtcbiAgdmFyIHByZXNlbmNlID0gdGhpcztcbiAgdGhpcy5fcGVuZGluZ01lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIHByZXNlbmNlLmNvbm5lY3Rpb24uc2VuZChtZXNzYWdlKTtcbiAgfSk7XG5cbiAgdGhpcy5fcGVuZGluZ01lc3NhZ2VzID0gW107XG59O1xuXG5Mb2NhbFByZXNlbmNlLnByb3RvdHlwZS5fYWNrID0gZnVuY3Rpb24oZXJyb3IsIHByZXNlbmNlVmVyc2lvbikge1xuICB2YXIgY2FsbGJhY2sgPSB0aGlzLl9nZXRDYWxsYmFjayhwcmVzZW5jZVZlcnNpb24pO1xuICB0aGlzLl9jYWxsYmFja09yRW1pdChlcnJvciwgY2FsbGJhY2spO1xufTtcblxuTG9jYWxQcmVzZW5jZS5wcm90b3R5cGUuX21lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBhOiBBQ1RJT05TLnByZXNlbmNlLFxuICAgIGNoOiB0aGlzLnByZXNlbmNlLmNoYW5uZWwsXG4gICAgaWQ6IHRoaXMucHJlc2VuY2VJZCxcbiAgICBwOiB0aGlzLnZhbHVlLFxuICAgIHB2OiB0aGlzLnByZXNlbmNlVmVyc2lvbisrXG4gIH07XG59O1xuXG5Mb2NhbFByZXNlbmNlLnByb3RvdHlwZS5fZ2V0Q2FsbGJhY2sgPSBmdW5jdGlvbihwcmVzZW5jZVZlcnNpb24pIHtcbiAgdmFyIGNhbGxiYWNrID0gdGhpcy5fY2FsbGJhY2tzQnlQcmVzZW5jZVZlcnNpb25bcHJlc2VuY2VWZXJzaW9uXTtcbiAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc0J5UHJlc2VuY2VWZXJzaW9uW3ByZXNlbmNlVmVyc2lvbl07XG4gIHJldHVybiBjYWxsYmFjaztcbn07XG5cbkxvY2FsUHJlc2VuY2UucHJvdG90eXBlLl9jYWxsYmFja09yRW1pdCA9IGZ1bmN0aW9uKGVycm9yLCBjYWxsYmFjaykge1xuICBpZiAoY2FsbGJhY2spIHJldHVybiB1dGlsLm5leHRUaWNrKGNhbGxiYWNrLCBlcnJvcik7XG4gIGlmIChlcnJvcikgdGhpcy5lbWl0KCdlcnJvcicsIGVycm9yKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/presence/local-presence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/presence/presence.js":
/*!**************************************************************!*\
  !*** ./node_modules/sharedb/lib/client/presence/presence.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var emitter = __webpack_require__(/*! ../../emitter */ \"(ssr)/./node_modules/sharedb/lib/emitter.js\");\nvar LocalPresence = __webpack_require__(/*! ./local-presence */ \"(ssr)/./node_modules/sharedb/lib/client/presence/local-presence.js\");\nvar RemotePresence = __webpack_require__(/*! ./remote-presence */ \"(ssr)/./node_modules/sharedb/lib/client/presence/remote-presence.js\");\nvar util = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\nvar async = __webpack_require__(/*! async */ \"(ssr)/./node_modules/async/dist/async.mjs\");\nvar hat = __webpack_require__(/*! hat */ \"(ssr)/./node_modules/hat/index.js\");\nvar ACTIONS = (__webpack_require__(/*! ../../message-actions */ \"(ssr)/./node_modules/sharedb/lib/message-actions.js\").ACTIONS);\n\nmodule.exports = Presence;\nfunction Presence(connection, channel) {\n  emitter.EventEmitter.call(this);\n\n  if (!channel || typeof channel !== 'string') {\n    throw new Error('Presence channel must be provided');\n  }\n\n  this.connection = connection;\n  this.channel = channel;\n\n  this.wantSubscribe = false;\n  this.subscribed = false;\n  this.remotePresences = Object.create(null);\n  this.localPresences = Object.create(null);\n\n  this._remotePresenceInstances = Object.create(null);\n  this._subscriptionCallbacksBySeq = Object.create(null);\n  this._wantsDestroy = false;\n}\nemitter.mixin(Presence);\n\nPresence.prototype.subscribe = function(callback) {\n  this._sendSubscriptionAction(true, callback);\n};\n\nPresence.prototype.unsubscribe = function(callback) {\n  this._sendSubscriptionAction(false, callback);\n};\n\nPresence.prototype.create = function(id) {\n  if (this._wantsDestroy) {\n    throw new Error('Presence is being destroyed');\n  }\n  id = id || hat();\n  var localPresence = this._createLocalPresence(id);\n  this.localPresences[id] = localPresence;\n  return localPresence;\n};\n\nPresence.prototype.destroy = function(callback) {\n  this._wantsDestroy = true;\n  var presence = this;\n  // Store these at the time of destruction: any LocalPresence on this\n  // instance at this time will be destroyed, but if the destroy is\n  // cancelled, any future LocalPresence objects will be kept.\n  // See: https://github.com/share/sharedb/pull/579\n  var localIds = Object.keys(presence.localPresences);\n  this.unsubscribe(function(error) {\n    if (error) return presence._callbackOrEmit(error, callback);\n    var remoteIds = Object.keys(presence._remotePresenceInstances);\n    async.parallel(\n      [\n        function(next) {\n          async.each(localIds, function(presenceId, next) {\n            var localPresence = presence.localPresences[presenceId];\n            if (!localPresence) return next();\n            localPresence.destroy(next);\n          }, next);\n        },\n        function(next) {\n          // We don't bother stashing the RemotePresence instances because\n          // they're not really bound to our local state: if we want to\n          // destroy, we destroy them all, but if we cancel the destroy,\n          // we'll want to keep them all\n          if (!presence._wantsDestroy) return next();\n          async.each(remoteIds, function(presenceId, next) {\n            presence._remotePresenceInstances[presenceId].destroy(next);\n          }, next);\n        }\n      ],\n      function(error) {\n        if (presence._wantsDestroy) delete presence.connection._presences[presence.channel];\n        presence._callbackOrEmit(error, callback);\n      }\n    );\n  });\n};\n\nPresence.prototype._sendSubscriptionAction = function(wantSubscribe, callback) {\n  wantSubscribe = !!wantSubscribe;\n  if (wantSubscribe === this.wantSubscribe) {\n    if (!callback) return;\n    if (wantSubscribe === this.subscribed) return util.nextTick(callback);\n    if (Object.keys(this._subscriptionCallbacksBySeq).length) {\n      return this._combineSubscribeCallbackWithLastAdded(callback);\n    }\n  }\n  this.wantSubscribe = wantSubscribe;\n  var action = this.wantSubscribe ? ACTIONS.presenceSubscribe : ACTIONS.presenceUnsubscribe;\n  var seq = this.connection._presenceSeq++;\n  this._subscriptionCallbacksBySeq[seq] = callback;\n  if (this.connection.canSend) {\n    this.connection._sendPresenceAction(action, seq, this);\n  }\n};\n\nPresence.prototype._requestRemotePresence = function() {\n  this.connection._requestRemotePresence(this.channel);\n};\n\nPresence.prototype._handleSubscribe = function(error, seq) {\n  if (this.wantSubscribe) this.subscribed = true;\n  var callback = this._subscriptionCallback(seq);\n  this._callbackOrEmit(error, callback);\n};\n\nPresence.prototype._handleUnsubscribe = function(error, seq) {\n  this.subscribed = false;\n  var callback = this._subscriptionCallback(seq);\n  this._callbackOrEmit(error, callback);\n};\n\nPresence.prototype._receiveUpdate = function(error, message) {\n  var localPresence = util.dig(this.localPresences, message.id);\n  if (localPresence) return localPresence._ack(error, message.pv);\n\n  if (error) return this.emit('error', error);\n  var presence = this;\n  var remotePresence = util.digOrCreate(this._remotePresenceInstances, message.id, function() {\n    return presence._createRemotePresence(message.id);\n  });\n\n  remotePresence.receiveUpdate(message);\n};\n\nPresence.prototype._updateRemotePresence = function(remotePresence) {\n  this.remotePresences[remotePresence.presenceId] = remotePresence.value;\n  if (remotePresence.value === null) this._removeRemotePresence(remotePresence.presenceId);\n  this.emit('receive', remotePresence.presenceId, remotePresence.value);\n};\n\nPresence.prototype._broadcastAllLocalPresence = function(error) {\n  if (error) return this.emit('error', error);\n  for (var id in this.localPresences) {\n    var localPresence = this.localPresences[id];\n    if (localPresence.value !== null) localPresence.send();\n  }\n};\n\nPresence.prototype._removeRemotePresence = function(id) {\n  this._remotePresenceInstances[id].destroy();\n  delete this._remotePresenceInstances[id];\n  delete this.remotePresences[id];\n};\n\nPresence.prototype._onConnectionStateChanged = function() {\n  if (!this.connection.canSend) {\n    this.subscribed = false;\n    return;\n  }\n  this._resubscribe();\n  for (var id in this.localPresences) {\n    this.localPresences[id]._sendPending();\n  }\n};\n\nPresence.prototype._resubscribe = function() {\n  var callbacks = [];\n  for (var seq in this._subscriptionCallbacksBySeq) {\n    var callback = this._subscriptionCallback(seq);\n    callbacks.push(callback);\n  }\n\n  if (!this.wantSubscribe) return this._callEachOrEmit(callbacks);\n\n  var presence = this;\n  this.subscribe(function(error) {\n    presence._callEachOrEmit(callbacks, error);\n  });\n};\n\nPresence.prototype._subscriptionCallback = function(seq) {\n  var callback = this._subscriptionCallbacksBySeq[seq];\n  delete this._subscriptionCallbacksBySeq[seq];\n  return callback;\n};\n\nPresence.prototype._callbackOrEmit = function(error, callback) {\n  if (callback) return util.nextTick(callback, error);\n  if (error) this.emit('error', error);\n};\n\nPresence.prototype._createLocalPresence = function(id) {\n  return new LocalPresence(this, id);\n};\n\nPresence.prototype._createRemotePresence = function(id) {\n  return new RemotePresence(this, id);\n};\n\nPresence.prototype._callEachOrEmit = function(callbacks, error) {\n  var called = util.callEach(callbacks, error);\n  if (!called && error) this.emit('error', error);\n};\n\nPresence.prototype._combineSubscribeCallbackWithLastAdded = function(callback) {\n  var seqs = Object.keys(this._subscriptionCallbacksBySeq);\n  var lastSeq = seqs[seqs.length - 1];\n  var originalCallback = this._subscriptionCallbacksBySeq[lastSeq];\n  if (!originalCallback) return this._subscriptionCallbacksBySeq[lastSeq] = callback;\n  this._subscriptionCallbacksBySeq[lastSeq] = function(error) {\n    originalCallback(error);\n    callback(error);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/presence/presence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/presence/remote-doc-presence.js":
/*!*************************************************************************!*\
  !*** ./node_modules/sharedb/lib/client/presence/remote-doc-presence.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var RemotePresence = __webpack_require__(/*! ./remote-presence */ \"(ssr)/./node_modules/sharedb/lib/client/presence/remote-presence.js\");\nvar ot = __webpack_require__(/*! ../../ot */ \"(ssr)/./node_modules/sharedb/lib/ot.js\");\n\nmodule.exports = RemoteDocPresence;\nfunction RemoteDocPresence(presence, presenceId) {\n  RemotePresence.call(this, presence, presenceId);\n\n  this.collection = this.presence.collection;\n  this.id = this.presence.id;\n  this.src = null;\n  this.presenceVersion = null;\n\n  this._doc = this.connection.get(this.collection, this.id);\n  this._emitter = this.connection._docPresenceEmitter;\n  this._pending = null;\n  this._opCache = null;\n  this._pendingSetPending = false;\n\n  this._opHandler = this._handleOp.bind(this);\n  this._createDelHandler = this._handleCreateDel.bind(this);\n  this._loadHandler = this._handleLoad.bind(this);\n  this._registerWithDoc();\n}\n\nRemoteDocPresence.prototype = Object.create(RemotePresence.prototype);\n\nRemoteDocPresence.prototype.receiveUpdate = function(message) {\n  if (this._pending && message.pv < this._pending.pv) return;\n  this.src = message.src;\n  this._pending = message;\n  this._setPendingPresence();\n};\n\nRemoteDocPresence.prototype.destroy = function(callback) {\n  this._emitter.removeEventListener(this._doc, 'op', this._opHandler);\n  this._emitter.removeEventListener(this._doc, 'create', this._createDelHandler);\n  this._emitter.removeEventListener(this._doc, 'del', this._createDelHandler);\n  this._emitter.removeEventListener(this._doc, 'load', this._loadHandler);\n\n  RemotePresence.prototype.destroy.call(this, callback);\n};\n\nRemoteDocPresence.prototype._registerWithDoc = function() {\n  this._emitter.addEventListener(this._doc, 'op', this._opHandler);\n  this._emitter.addEventListener(this._doc, 'create', this._createDelHandler);\n  this._emitter.addEventListener(this._doc, 'del', this._createDelHandler);\n  this._emitter.addEventListener(this._doc, 'load', this._loadHandler);\n};\n\nRemoteDocPresence.prototype._setPendingPresence = function() {\n  if (this._pendingSetPending) return;\n  this._pendingSetPending = true;\n  var presence = this;\n  this._doc.whenNothingPending(function() {\n    presence._pendingSetPending = false;\n    if (!presence._pending) return;\n    if (presence._pending.pv < presence.presenceVersion) return presence._pending = null;\n\n    if (presence._pending.v > presence._doc.version) {\n      return presence._doc.fetch();\n    }\n\n    if (!presence._catchUpStalePresence()) return;\n\n    presence.value = presence._pending.p;\n    presence.presenceVersion = presence._pending.pv;\n    presence._pending = null;\n    presence.presence._updateRemotePresence(presence);\n  });\n};\n\nRemoteDocPresence.prototype._handleOp = function(op, source, connectionId) {\n  var isOwnOp = connectionId === this.src;\n  this._transformAgainstOp(op, isOwnOp);\n  this._cacheOp(op, isOwnOp);\n  this._setPendingPresence();\n};\n\nRemotePresence.prototype._handleCreateDel = function() {\n  this._cacheOp(null);\n  this._setPendingPresence();\n};\n\nRemotePresence.prototype._handleLoad = function() {\n  this.value = null;\n  this._pending = null;\n  this._opCache = null;\n  this.presence._updateRemotePresence(this);\n};\n\nRemoteDocPresence.prototype._transformAgainstOp = function(op, isOwnOp) {\n  if (!this.value) return;\n\n  try {\n    this.value = this._doc.type.transformPresence(this.value, op, isOwnOp);\n  } catch (error) {\n    return this.presence.emit('error', error);\n  }\n  this.presence._updateRemotePresence(this);\n};\n\nRemoteDocPresence.prototype._catchUpStalePresence = function() {\n  if (this._pending.v >= this._doc.version) return true;\n\n  if (!this._opCache) {\n    this._startCachingOps();\n    this._doc.fetch();\n    this.presence._requestRemotePresence();\n    return false;\n  }\n\n  while (this._opCache[this._pending.v]) {\n    var item = this._opCache[this._pending.v];\n    var op = item.op;\n    var isOwnOp = item.isOwnOp;\n    // We use a null op to signify a create or a delete operation. In both\n    // cases we just want to reset the presence (which doesn't make sense\n    // in a new document), so just set the presence to null.\n    if (op === null) {\n      this._pending.p = null;\n      this._pending.v++;\n    } else {\n      ot.transformPresence(this._pending, op, isOwnOp);\n    }\n  }\n\n  var hasCaughtUp = this._pending.v >= this._doc.version;\n  if (hasCaughtUp) {\n    this._stopCachingOps();\n  }\n\n  return hasCaughtUp;\n};\n\nRemoteDocPresence.prototype._startCachingOps = function() {\n  this._opCache = [];\n};\n\nRemoteDocPresence.prototype._stopCachingOps = function() {\n  this._opCache = null;\n};\n\nRemoteDocPresence.prototype._cacheOp = function(op, isOwnOp) {\n  if (this._opCache) {\n    op = op ? {op: op} : null;\n    // Subtract 1 from the current doc version, because an op with v3\n    // should be read as the op that takes a doc from v3 -> v4\n    this._opCache[this._doc.version - 1] = {op: op, isOwnOp: isOwnOp};\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvY2xpZW50L3ByZXNlbmNlL3JlbW90ZS1kb2MtcHJlc2VuY2UuanMiLCJtYXBwaW5ncyI6IkFBQUEscUJBQXFCLG1CQUFPLENBQUMsOEZBQW1CO0FBQ2hELFNBQVMsbUJBQU8sQ0FBQyx3REFBVTs7QUFFM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9jbGllbnQvcHJlc2VuY2UvcmVtb3RlLWRvYy1wcmVzZW5jZS5qcz9kNTNkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBSZW1vdGVQcmVzZW5jZSA9IHJlcXVpcmUoJy4vcmVtb3RlLXByZXNlbmNlJyk7XG52YXIgb3QgPSByZXF1aXJlKCcuLi8uLi9vdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbW90ZURvY1ByZXNlbmNlO1xuZnVuY3Rpb24gUmVtb3RlRG9jUHJlc2VuY2UocHJlc2VuY2UsIHByZXNlbmNlSWQpIHtcbiAgUmVtb3RlUHJlc2VuY2UuY2FsbCh0aGlzLCBwcmVzZW5jZSwgcHJlc2VuY2VJZCk7XG5cbiAgdGhpcy5jb2xsZWN0aW9uID0gdGhpcy5wcmVzZW5jZS5jb2xsZWN0aW9uO1xuICB0aGlzLmlkID0gdGhpcy5wcmVzZW5jZS5pZDtcbiAgdGhpcy5zcmMgPSBudWxsO1xuICB0aGlzLnByZXNlbmNlVmVyc2lvbiA9IG51bGw7XG5cbiAgdGhpcy5fZG9jID0gdGhpcy5jb25uZWN0aW9uLmdldCh0aGlzLmNvbGxlY3Rpb24sIHRoaXMuaWQpO1xuICB0aGlzLl9lbWl0dGVyID0gdGhpcy5jb25uZWN0aW9uLl9kb2NQcmVzZW5jZUVtaXR0ZXI7XG4gIHRoaXMuX3BlbmRpbmcgPSBudWxsO1xuICB0aGlzLl9vcENhY2hlID0gbnVsbDtcbiAgdGhpcy5fcGVuZGluZ1NldFBlbmRpbmcgPSBmYWxzZTtcblxuICB0aGlzLl9vcEhhbmRsZXIgPSB0aGlzLl9oYW5kbGVPcC5iaW5kKHRoaXMpO1xuICB0aGlzLl9jcmVhdGVEZWxIYW5kbGVyID0gdGhpcy5faGFuZGxlQ3JlYXRlRGVsLmJpbmQodGhpcyk7XG4gIHRoaXMuX2xvYWRIYW5kbGVyID0gdGhpcy5faGFuZGxlTG9hZC5iaW5kKHRoaXMpO1xuICB0aGlzLl9yZWdpc3RlcldpdGhEb2MoKTtcbn1cblxuUmVtb3RlRG9jUHJlc2VuY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZW1vdGVQcmVzZW5jZS5wcm90b3R5cGUpO1xuXG5SZW1vdGVEb2NQcmVzZW5jZS5wcm90b3R5cGUucmVjZWl2ZVVwZGF0ZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgaWYgKHRoaXMuX3BlbmRpbmcgJiYgbWVzc2FnZS5wdiA8IHRoaXMuX3BlbmRpbmcucHYpIHJldHVybjtcbiAgdGhpcy5zcmMgPSBtZXNzYWdlLnNyYztcbiAgdGhpcy5fcGVuZGluZyA9IG1lc3NhZ2U7XG4gIHRoaXMuX3NldFBlbmRpbmdQcmVzZW5jZSgpO1xufTtcblxuUmVtb3RlRG9jUHJlc2VuY2UucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB0aGlzLl9lbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5fZG9jLCAnb3AnLCB0aGlzLl9vcEhhbmRsZXIpO1xuICB0aGlzLl9lbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5fZG9jLCAnY3JlYXRlJywgdGhpcy5fY3JlYXRlRGVsSGFuZGxlcik7XG4gIHRoaXMuX2VtaXR0ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLl9kb2MsICdkZWwnLCB0aGlzLl9jcmVhdGVEZWxIYW5kbGVyKTtcbiAgdGhpcy5fZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuX2RvYywgJ2xvYWQnLCB0aGlzLl9sb2FkSGFuZGxlcik7XG5cbiAgUmVtb3RlUHJlc2VuY2UucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzLCBjYWxsYmFjayk7XG59O1xuXG5SZW1vdGVEb2NQcmVzZW5jZS5wcm90b3R5cGUuX3JlZ2lzdGVyV2l0aERvYyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9lbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5fZG9jLCAnb3AnLCB0aGlzLl9vcEhhbmRsZXIpO1xuICB0aGlzLl9lbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5fZG9jLCAnY3JlYXRlJywgdGhpcy5fY3JlYXRlRGVsSGFuZGxlcik7XG4gIHRoaXMuX2VtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLl9kb2MsICdkZWwnLCB0aGlzLl9jcmVhdGVEZWxIYW5kbGVyKTtcbiAgdGhpcy5fZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKHRoaXMuX2RvYywgJ2xvYWQnLCB0aGlzLl9sb2FkSGFuZGxlcik7XG59O1xuXG5SZW1vdGVEb2NQcmVzZW5jZS5wcm90b3R5cGUuX3NldFBlbmRpbmdQcmVzZW5jZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fcGVuZGluZ1NldFBlbmRpbmcpIHJldHVybjtcbiAgdGhpcy5fcGVuZGluZ1NldFBlbmRpbmcgPSB0cnVlO1xuICB2YXIgcHJlc2VuY2UgPSB0aGlzO1xuICB0aGlzLl9kb2Mud2hlbk5vdGhpbmdQZW5kaW5nKGZ1bmN0aW9uKCkge1xuICAgIHByZXNlbmNlLl9wZW5kaW5nU2V0UGVuZGluZyA9IGZhbHNlO1xuICAgIGlmICghcHJlc2VuY2UuX3BlbmRpbmcpIHJldHVybjtcbiAgICBpZiAocHJlc2VuY2UuX3BlbmRpbmcucHYgPCBwcmVzZW5jZS5wcmVzZW5jZVZlcnNpb24pIHJldHVybiBwcmVzZW5jZS5fcGVuZGluZyA9IG51bGw7XG5cbiAgICBpZiAocHJlc2VuY2UuX3BlbmRpbmcudiA+IHByZXNlbmNlLl9kb2MudmVyc2lvbikge1xuICAgICAgcmV0dXJuIHByZXNlbmNlLl9kb2MuZmV0Y2goKTtcbiAgICB9XG5cbiAgICBpZiAoIXByZXNlbmNlLl9jYXRjaFVwU3RhbGVQcmVzZW5jZSgpKSByZXR1cm47XG5cbiAgICBwcmVzZW5jZS52YWx1ZSA9IHByZXNlbmNlLl9wZW5kaW5nLnA7XG4gICAgcHJlc2VuY2UucHJlc2VuY2VWZXJzaW9uID0gcHJlc2VuY2UuX3BlbmRpbmcucHY7XG4gICAgcHJlc2VuY2UuX3BlbmRpbmcgPSBudWxsO1xuICAgIHByZXNlbmNlLnByZXNlbmNlLl91cGRhdGVSZW1vdGVQcmVzZW5jZShwcmVzZW5jZSk7XG4gIH0pO1xufTtcblxuUmVtb3RlRG9jUHJlc2VuY2UucHJvdG90eXBlLl9oYW5kbGVPcCA9IGZ1bmN0aW9uKG9wLCBzb3VyY2UsIGNvbm5lY3Rpb25JZCkge1xuICB2YXIgaXNPd25PcCA9IGNvbm5lY3Rpb25JZCA9PT0gdGhpcy5zcmM7XG4gIHRoaXMuX3RyYW5zZm9ybUFnYWluc3RPcChvcCwgaXNPd25PcCk7XG4gIHRoaXMuX2NhY2hlT3Aob3AsIGlzT3duT3ApO1xuICB0aGlzLl9zZXRQZW5kaW5nUHJlc2VuY2UoKTtcbn07XG5cblJlbW90ZVByZXNlbmNlLnByb3RvdHlwZS5faGFuZGxlQ3JlYXRlRGVsID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NhY2hlT3AobnVsbCk7XG4gIHRoaXMuX3NldFBlbmRpbmdQcmVzZW5jZSgpO1xufTtcblxuUmVtb3RlUHJlc2VuY2UucHJvdG90eXBlLl9oYW5kbGVMb2FkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudmFsdWUgPSBudWxsO1xuICB0aGlzLl9wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5fb3BDYWNoZSA9IG51bGw7XG4gIHRoaXMucHJlc2VuY2UuX3VwZGF0ZVJlbW90ZVByZXNlbmNlKHRoaXMpO1xufTtcblxuUmVtb3RlRG9jUHJlc2VuY2UucHJvdG90eXBlLl90cmFuc2Zvcm1BZ2FpbnN0T3AgPSBmdW5jdGlvbihvcCwgaXNPd25PcCkge1xuICBpZiAoIXRoaXMudmFsdWUpIHJldHVybjtcblxuICB0cnkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLl9kb2MudHlwZS50cmFuc2Zvcm1QcmVzZW5jZSh0aGlzLnZhbHVlLCBvcCwgaXNPd25PcCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRoaXMucHJlc2VuY2UuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gIH1cbiAgdGhpcy5wcmVzZW5jZS5fdXBkYXRlUmVtb3RlUHJlc2VuY2UodGhpcyk7XG59O1xuXG5SZW1vdGVEb2NQcmVzZW5jZS5wcm90b3R5cGUuX2NhdGNoVXBTdGFsZVByZXNlbmNlID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLl9wZW5kaW5nLnYgPj0gdGhpcy5fZG9jLnZlcnNpb24pIHJldHVybiB0cnVlO1xuXG4gIGlmICghdGhpcy5fb3BDYWNoZSkge1xuICAgIHRoaXMuX3N0YXJ0Q2FjaGluZ09wcygpO1xuICAgIHRoaXMuX2RvYy5mZXRjaCgpO1xuICAgIHRoaXMucHJlc2VuY2UuX3JlcXVlc3RSZW1vdGVQcmVzZW5jZSgpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHdoaWxlICh0aGlzLl9vcENhY2hlW3RoaXMuX3BlbmRpbmcudl0pIHtcbiAgICB2YXIgaXRlbSA9IHRoaXMuX29wQ2FjaGVbdGhpcy5fcGVuZGluZy52XTtcbiAgICB2YXIgb3AgPSBpdGVtLm9wO1xuICAgIHZhciBpc093bk9wID0gaXRlbS5pc093bk9wO1xuICAgIC8vIFdlIHVzZSBhIG51bGwgb3AgdG8gc2lnbmlmeSBhIGNyZWF0ZSBvciBhIGRlbGV0ZSBvcGVyYXRpb24uIEluIGJvdGhcbiAgICAvLyBjYXNlcyB3ZSBqdXN0IHdhbnQgdG8gcmVzZXQgdGhlIHByZXNlbmNlICh3aGljaCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyBpbiBhIG5ldyBkb2N1bWVudCksIHNvIGp1c3Qgc2V0IHRoZSBwcmVzZW5jZSB0byBudWxsLlxuICAgIGlmIChvcCA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fcGVuZGluZy5wID0gbnVsbDtcbiAgICAgIHRoaXMuX3BlbmRpbmcudisrO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdC50cmFuc2Zvcm1QcmVzZW5jZSh0aGlzLl9wZW5kaW5nLCBvcCwgaXNPd25PcCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhhc0NhdWdodFVwID0gdGhpcy5fcGVuZGluZy52ID49IHRoaXMuX2RvYy52ZXJzaW9uO1xuICBpZiAoaGFzQ2F1Z2h0VXApIHtcbiAgICB0aGlzLl9zdG9wQ2FjaGluZ09wcygpO1xuICB9XG5cbiAgcmV0dXJuIGhhc0NhdWdodFVwO1xufTtcblxuUmVtb3RlRG9jUHJlc2VuY2UucHJvdG90eXBlLl9zdGFydENhY2hpbmdPcHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fb3BDYWNoZSA9IFtdO1xufTtcblxuUmVtb3RlRG9jUHJlc2VuY2UucHJvdG90eXBlLl9zdG9wQ2FjaGluZ09wcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9vcENhY2hlID0gbnVsbDtcbn07XG5cblJlbW90ZURvY1ByZXNlbmNlLnByb3RvdHlwZS5fY2FjaGVPcCA9IGZ1bmN0aW9uKG9wLCBpc093bk9wKSB7XG4gIGlmICh0aGlzLl9vcENhY2hlKSB7XG4gICAgb3AgPSBvcCA/IHtvcDogb3B9IDogbnVsbDtcbiAgICAvLyBTdWJ0cmFjdCAxIGZyb20gdGhlIGN1cnJlbnQgZG9jIHZlcnNpb24sIGJlY2F1c2UgYW4gb3Agd2l0aCB2M1xuICAgIC8vIHNob3VsZCBiZSByZWFkIGFzIHRoZSBvcCB0aGF0IHRha2VzIGEgZG9jIGZyb20gdjMgLT4gdjRcbiAgICB0aGlzLl9vcENhY2hlW3RoaXMuX2RvYy52ZXJzaW9uIC0gMV0gPSB7b3A6IG9wLCBpc093bk9wOiBpc093bk9wfTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/presence/remote-doc-presence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/presence/remote-presence.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sharedb/lib/client/presence/remote-presence.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var util = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\n\nmodule.exports = RemotePresence;\nfunction RemotePresence(presence, presenceId) {\n  this.presence = presence;\n  this.presenceId = presenceId;\n  this.connection = this.presence.connection;\n\n  this.value = null;\n  this.presenceVersion = 0;\n}\n\nRemotePresence.prototype.receiveUpdate = function(message) {\n  if (message.pv < this.presenceVersion) return;\n  this.value = message.p;\n  this.presenceVersion = message.pv;\n  this.presence._updateRemotePresence(this);\n};\n\nRemotePresence.prototype.destroy = function(callback) {\n  delete this.presence._remotePresenceInstances[this.presenceId];\n  delete this.presence.remotePresences[this.presenceId];\n  if (callback) util.nextTick(callback);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvY2xpZW50L3ByZXNlbmNlL3JlbW90ZS1wcmVzZW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxXQUFXLG1CQUFPLENBQUMsNERBQVk7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9jbGllbnQvcHJlc2VuY2UvcmVtb3RlLXByZXNlbmNlLmpzPzcyNDYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHV0aWwgPSByZXF1aXJlKCcuLi8uLi91dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVtb3RlUHJlc2VuY2U7XG5mdW5jdGlvbiBSZW1vdGVQcmVzZW5jZShwcmVzZW5jZSwgcHJlc2VuY2VJZCkge1xuICB0aGlzLnByZXNlbmNlID0gcHJlc2VuY2U7XG4gIHRoaXMucHJlc2VuY2VJZCA9IHByZXNlbmNlSWQ7XG4gIHRoaXMuY29ubmVjdGlvbiA9IHRoaXMucHJlc2VuY2UuY29ubmVjdGlvbjtcblxuICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgdGhpcy5wcmVzZW5jZVZlcnNpb24gPSAwO1xufVxuXG5SZW1vdGVQcmVzZW5jZS5wcm90b3R5cGUucmVjZWl2ZVVwZGF0ZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgaWYgKG1lc3NhZ2UucHYgPCB0aGlzLnByZXNlbmNlVmVyc2lvbikgcmV0dXJuO1xuICB0aGlzLnZhbHVlID0gbWVzc2FnZS5wO1xuICB0aGlzLnByZXNlbmNlVmVyc2lvbiA9IG1lc3NhZ2UucHY7XG4gIHRoaXMucHJlc2VuY2UuX3VwZGF0ZVJlbW90ZVByZXNlbmNlKHRoaXMpO1xufTtcblxuUmVtb3RlUHJlc2VuY2UucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICBkZWxldGUgdGhpcy5wcmVzZW5jZS5fcmVtb3RlUHJlc2VuY2VJbnN0YW5jZXNbdGhpcy5wcmVzZW5jZUlkXTtcbiAgZGVsZXRlIHRoaXMucHJlc2VuY2UucmVtb3RlUHJlc2VuY2VzW3RoaXMucHJlc2VuY2VJZF07XG4gIGlmIChjYWxsYmFjaykgdXRpbC5uZXh0VGljayhjYWxsYmFjayk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/presence/remote-presence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/query.js":
/*!**************************************************!*\
  !*** ./node_modules/sharedb/lib/client/query.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var emitter = __webpack_require__(/*! ../emitter */ \"(ssr)/./node_modules/sharedb/lib/emitter.js\");\nvar ACTIONS = (__webpack_require__(/*! ../message-actions */ \"(ssr)/./node_modules/sharedb/lib/message-actions.js\").ACTIONS);\nvar util = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\n\n// Queries are live requests to the database for particular sets of fields.\n//\n// The server actively tells the client when there's new data that matches\n// a set of conditions.\nmodule.exports = Query;\nfunction Query(action, connection, id, collection, query, options, callback) {\n  emitter.EventEmitter.call(this);\n\n  // 'qf' or 'qs'\n  this.action = action;\n\n  this.connection = connection;\n  this.id = id;\n  this.collection = collection;\n\n  // The query itself. For mongo, this should look something like {\"data.x\":5}\n  this.query = query;\n\n  // A list of resulting documents. These are actual documents, complete with\n  // data and all the rest. It is possible to pass in an initial results set,\n  // so that a query can be serialized and then re-established\n  this.results = null;\n  if (options && options.results) {\n    this.results = options.results;\n    delete options.results;\n  }\n  this.extra = undefined;\n\n  // Options to pass through with the query\n  this.options = options;\n\n  this.callback = callback;\n  this.ready = false;\n  this.sent = false;\n}\nemitter.mixin(Query);\n\nQuery.prototype.hasPending = function() {\n  return !this.ready;\n};\n\n// Helper for subscribe & fetch, since they share the same message format.\n//\n// This function actually issues the query.\nQuery.prototype.send = function() {\n  if (!this.connection.canSend) return;\n\n  var message = {\n    a: this.action,\n    id: this.id,\n    c: this.collection,\n    q: this.query\n  };\n  if (this.options) {\n    message.o = this.options;\n  }\n  if (this.results) {\n    // Collect the version of all the documents in the current result set so we\n    // don't need to be sent their snapshots again.\n    var results = [];\n    for (var i = 0; i < this.results.length; i++) {\n      var doc = this.results[i];\n      results.push([doc.id, doc.version]);\n    }\n    message.r = results;\n  }\n\n  this.connection.send(message);\n  this.sent = true;\n};\n\n// Destroy the query object. Any subsequent messages for the query will be\n// ignored by the connection.\nQuery.prototype.destroy = function(callback) {\n  if (this.connection.canSend && this.action === ACTIONS.querySubscribe) {\n    this.connection.send({a: ACTIONS.queryUnsubscribe, id: this.id});\n  }\n  this.connection._destroyQuery(this);\n  // There is a callback for consistency, but we don't actually wait for the\n  // server's unsubscribe message currently\n  if (callback) util.nextTick(callback);\n};\n\nQuery.prototype._onConnectionStateChanged = function() {\n  if (this.connection.canSend && !this.sent) {\n    this.send();\n  } else {\n    this.sent = false;\n  }\n};\n\nQuery.prototype._handleFetch = function(err, data, extra) {\n  // Once a fetch query gets its data, it is destroyed.\n  this.connection._destroyQuery(this);\n  this._handleResponse(err, data, extra);\n};\n\nQuery.prototype._handleSubscribe = function(err, data, extra) {\n  this._handleResponse(err, data, extra);\n};\n\nQuery.prototype._handleResponse = function(err, data, extra) {\n  var callback = this.callback;\n  this.callback = null;\n  if (err) return this._finishResponse(err, callback);\n  if (!data) return this._finishResponse(null, callback);\n\n  var query = this;\n  var wait = 1;\n  var finish = function(err) {\n    if (err) return query._finishResponse(err, callback);\n    if (--wait) return;\n    query._finishResponse(null, callback);\n  };\n\n  if (Array.isArray(data)) {\n    wait += data.length;\n    this.results = this._ingestSnapshots(data, finish);\n    this.extra = extra;\n  } else {\n    for (var id in data) {\n      wait++;\n      var snapshot = data[id];\n      var doc = this.connection.get(snapshot.c || this.collection, id);\n      doc.ingestSnapshot(snapshot, finish);\n    }\n  }\n\n  finish();\n};\n\nQuery.prototype._ingestSnapshots = function(snapshots, finish) {\n  var results = [];\n  for (var i = 0; i < snapshots.length; i++) {\n    var snapshot = snapshots[i];\n    var doc = this.connection.get(snapshot.c || this.collection, snapshot.d);\n    doc.ingestSnapshot(snapshot, finish);\n    results.push(doc);\n  }\n  return results;\n};\n\nQuery.prototype._finishResponse = function(err, callback) {\n  this.emit('ready');\n  this.ready = true;\n  if (err) {\n    this.connection._destroyQuery(this);\n    if (callback) return callback(err);\n    return this.emit('error', err);\n  }\n  if (callback) callback(null, this.results, this.extra);\n};\n\nQuery.prototype._handleError = function(err) {\n  this.emit('error', err);\n};\n\nQuery.prototype._handleDiff = function(diff) {\n  // We need to go through the list twice. First, we'll ingest all the new\n  // documents. After that we'll emit events and actually update our list.\n  // This avoids race conditions around setting documents to be subscribed &\n  // unsubscribing documents in event callbacks.\n  for (var i = 0; i < diff.length; i++) {\n    var d = diff[i];\n    if (d.type === 'insert') d.values = this._ingestSnapshots(d.values);\n  }\n\n  for (var i = 0; i < diff.length; i++) {\n    var d = diff[i];\n    switch (d.type) {\n      case 'insert':\n        var newDocs = d.values;\n        Array.prototype.splice.apply(this.results, [d.index, 0].concat(newDocs));\n        this.emit('insert', newDocs, d.index);\n        break;\n      case 'remove':\n        var howMany = d.howMany || 1;\n        var removed = this.results.splice(d.index, howMany);\n        this.emit('remove', removed, d.index);\n        break;\n      case 'move':\n        var howMany = d.howMany || 1;\n        var docs = this.results.splice(d.from, howMany);\n        Array.prototype.splice.apply(this.results, [d.to, 0].concat(docs));\n        this.emit('move', docs, d.from, d.to);\n        break;\n    }\n  }\n\n  this.emit('changed', this.results);\n};\n\nQuery.prototype._handleExtra = function(extra) {\n  this.extra = extra;\n  this.emit('extra', extra);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/query.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/snapshot-request/snapshot-request.js":
/*!******************************************************************************!*\
  !*** ./node_modules/sharedb/lib/client/snapshot-request/snapshot-request.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Snapshot = __webpack_require__(/*! ../../snapshot */ \"(ssr)/./node_modules/sharedb/lib/snapshot.js\");\nvar emitter = __webpack_require__(/*! ../../emitter */ \"(ssr)/./node_modules/sharedb/lib/emitter.js\");\n\nmodule.exports = SnapshotRequest;\n\nfunction SnapshotRequest(connection, requestId, collection, id, callback) {\n  emitter.EventEmitter.call(this);\n\n  if (typeof callback !== 'function') {\n    throw new Error('Callback is required for SnapshotRequest');\n  }\n\n  this.requestId = requestId;\n  this.connection = connection;\n  this.id = id;\n  this.collection = collection;\n  this.callback = callback;\n\n  this.sent = false;\n}\nemitter.mixin(SnapshotRequest);\n\nSnapshotRequest.prototype.send = function() {\n  if (!this.connection.canSend) {\n    return;\n  }\n\n  this.connection.send(this._message());\n  this.sent = true;\n};\n\nSnapshotRequest.prototype._onConnectionStateChanged = function() {\n  if (this.connection.canSend) {\n    if (!this.sent) this.send();\n  } else {\n    // If the connection can't send, then we've had a disconnection, and even if we've already sent\n    // the request previously, we need to re-send it over this reconnected client, so reset the\n    // sent flag to false.\n    this.sent = false;\n  }\n};\n\nSnapshotRequest.prototype._handleResponse = function(error, message) {\n  this.emit('ready');\n\n  if (error) {\n    return this.callback(error);\n  }\n\n  var metadata = message.meta ? message.meta : null;\n  var snapshot = new Snapshot(this.id, message.v, message.type, message.data, metadata);\n\n  this.callback(null, snapshot);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvY2xpZW50L3NuYXBzaG90LXJlcXVlc3Qvc25hcHNob3QtcmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsb0VBQWdCO0FBQ3ZDLGNBQWMsbUJBQU8sQ0FBQyxrRUFBZTs7QUFFckM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9jbGllbnQvc25hcHNob3QtcmVxdWVzdC9zbmFwc2hvdC1yZXF1ZXN0LmpzP2YwY2QiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFNuYXBzaG90ID0gcmVxdWlyZSgnLi4vLi4vc25hcHNob3QnKTtcbnZhciBlbWl0dGVyID0gcmVxdWlyZSgnLi4vLi4vZW1pdHRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNuYXBzaG90UmVxdWVzdDtcblxuZnVuY3Rpb24gU25hcHNob3RSZXF1ZXN0KGNvbm5lY3Rpb24sIHJlcXVlc3RJZCwgY29sbGVjdGlvbiwgaWQsIGNhbGxiYWNrKSB7XG4gIGVtaXR0ZXIuRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgaXMgcmVxdWlyZWQgZm9yIFNuYXBzaG90UmVxdWVzdCcpO1xuICB9XG5cbiAgdGhpcy5yZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gIHRoaXMuaWQgPSBpZDtcbiAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuXG4gIHRoaXMuc2VudCA9IGZhbHNlO1xufVxuZW1pdHRlci5taXhpbihTbmFwc2hvdFJlcXVlc3QpO1xuXG5TbmFwc2hvdFJlcXVlc3QucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLmNvbm5lY3Rpb24uY2FuU2VuZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuY29ubmVjdGlvbi5zZW5kKHRoaXMuX21lc3NhZ2UoKSk7XG4gIHRoaXMuc2VudCA9IHRydWU7XG59O1xuXG5TbmFwc2hvdFJlcXVlc3QucHJvdG90eXBlLl9vbkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuY29ubmVjdGlvbi5jYW5TZW5kKSB7XG4gICAgaWYgKCF0aGlzLnNlbnQpIHRoaXMuc2VuZCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjb25uZWN0aW9uIGNhbid0IHNlbmQsIHRoZW4gd2UndmUgaGFkIGEgZGlzY29ubmVjdGlvbiwgYW5kIGV2ZW4gaWYgd2UndmUgYWxyZWFkeSBzZW50XG4gICAgLy8gdGhlIHJlcXVlc3QgcHJldmlvdXNseSwgd2UgbmVlZCB0byByZS1zZW5kIGl0IG92ZXIgdGhpcyByZWNvbm5lY3RlZCBjbGllbnQsIHNvIHJlc2V0IHRoZVxuICAgIC8vIHNlbnQgZmxhZyB0byBmYWxzZS5cbiAgICB0aGlzLnNlbnQgPSBmYWxzZTtcbiAgfVxufTtcblxuU25hcHNob3RSZXF1ZXN0LnByb3RvdHlwZS5faGFuZGxlUmVzcG9uc2UgPSBmdW5jdGlvbihlcnJvciwgbWVzc2FnZSkge1xuICB0aGlzLmVtaXQoJ3JlYWR5Jyk7XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbGJhY2soZXJyb3IpO1xuICB9XG5cbiAgdmFyIG1ldGFkYXRhID0gbWVzc2FnZS5tZXRhID8gbWVzc2FnZS5tZXRhIDogbnVsbDtcbiAgdmFyIHNuYXBzaG90ID0gbmV3IFNuYXBzaG90KHRoaXMuaWQsIG1lc3NhZ2UudiwgbWVzc2FnZS50eXBlLCBtZXNzYWdlLmRhdGEsIG1ldGFkYXRhKTtcblxuICB0aGlzLmNhbGxiYWNrKG51bGwsIHNuYXBzaG90KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/snapshot-request/snapshot-request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/snapshot-request/snapshot-timestamp-request.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/sharedb/lib/client/snapshot-request/snapshot-timestamp-request.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var SnapshotRequest = __webpack_require__(/*! ./snapshot-request */ \"(ssr)/./node_modules/sharedb/lib/client/snapshot-request/snapshot-request.js\");\nvar util = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\nvar ACTIONS = (__webpack_require__(/*! ../../message-actions */ \"(ssr)/./node_modules/sharedb/lib/message-actions.js\").ACTIONS);\n\nmodule.exports = SnapshotTimestampRequest;\n\nfunction SnapshotTimestampRequest(connection, requestId, collection, id, timestamp, callback) {\n  SnapshotRequest.call(this, connection, requestId, collection, id, callback);\n\n  if (!util.isValidTimestamp(timestamp)) {\n    throw new Error('Snapshot timestamp must be a positive integer or null');\n  }\n\n  this.timestamp = timestamp;\n}\n\nSnapshotTimestampRequest.prototype = Object.create(SnapshotRequest.prototype);\n\nSnapshotTimestampRequest.prototype._message = function() {\n  return {\n    a: ACTIONS.snapshotFetchByTimestamp,\n    id: this.requestId,\n    c: this.collection,\n    d: this.id,\n    ts: this.timestamp\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvY2xpZW50L3NuYXBzaG90LXJlcXVlc3Qvc25hcHNob3QtdGltZXN0YW1wLXJlcXVlc3QuanMiLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCLG1CQUFPLENBQUMsd0dBQW9CO0FBQ2xELFdBQVcsbUJBQU8sQ0FBQyw0REFBWTtBQUMvQixjQUFjLGlIQUF3Qzs7QUFFdEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXk5X2NvbGxhYm9yYXRpdmVfZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3NoYXJlZGIvbGliL2NsaWVudC9zbmFwc2hvdC1yZXF1ZXN0L3NuYXBzaG90LXRpbWVzdGFtcC1yZXF1ZXN0LmpzPzkwYTUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFNuYXBzaG90UmVxdWVzdCA9IHJlcXVpcmUoJy4vc25hcHNob3QtcmVxdWVzdCcpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi8uLi91dGlsJyk7XG52YXIgQUNUSU9OUyA9IHJlcXVpcmUoJy4uLy4uL21lc3NhZ2UtYWN0aW9ucycpLkFDVElPTlM7XG5cbm1vZHVsZS5leHBvcnRzID0gU25hcHNob3RUaW1lc3RhbXBSZXF1ZXN0O1xuXG5mdW5jdGlvbiBTbmFwc2hvdFRpbWVzdGFtcFJlcXVlc3QoY29ubmVjdGlvbiwgcmVxdWVzdElkLCBjb2xsZWN0aW9uLCBpZCwgdGltZXN0YW1wLCBjYWxsYmFjaykge1xuICBTbmFwc2hvdFJlcXVlc3QuY2FsbCh0aGlzLCBjb25uZWN0aW9uLCByZXF1ZXN0SWQsIGNvbGxlY3Rpb24sIGlkLCBjYWxsYmFjayk7XG5cbiAgaWYgKCF1dGlsLmlzVmFsaWRUaW1lc3RhbXAodGltZXN0YW1wKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignU25hcHNob3QgdGltZXN0YW1wIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIG9yIG51bGwnKTtcbiAgfVxuXG4gIHRoaXMudGltZXN0YW1wID0gdGltZXN0YW1wO1xufVxuXG5TbmFwc2hvdFRpbWVzdGFtcFJlcXVlc3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTbmFwc2hvdFJlcXVlc3QucHJvdG90eXBlKTtcblxuU25hcHNob3RUaW1lc3RhbXBSZXF1ZXN0LnByb3RvdHlwZS5fbWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGE6IEFDVElPTlMuc25hcHNob3RGZXRjaEJ5VGltZXN0YW1wLFxuICAgIGlkOiB0aGlzLnJlcXVlc3RJZCxcbiAgICBjOiB0aGlzLmNvbGxlY3Rpb24sXG4gICAgZDogdGhpcy5pZCxcbiAgICB0czogdGhpcy50aW1lc3RhbXBcbiAgfTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/snapshot-request/snapshot-timestamp-request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/client/snapshot-request/snapshot-version-request.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/sharedb/lib/client/snapshot-request/snapshot-version-request.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var SnapshotRequest = __webpack_require__(/*! ./snapshot-request */ \"(ssr)/./node_modules/sharedb/lib/client/snapshot-request/snapshot-request.js\");\nvar util = __webpack_require__(/*! ../../util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\nvar ACTIONS = (__webpack_require__(/*! ../../message-actions */ \"(ssr)/./node_modules/sharedb/lib/message-actions.js\").ACTIONS);\n\nmodule.exports = SnapshotVersionRequest;\n\nfunction SnapshotVersionRequest(connection, requestId, collection, id, version, callback) {\n  SnapshotRequest.call(this, connection, requestId, collection, id, callback);\n\n  if (!util.isValidVersion(version)) {\n    throw new Error('Snapshot version must be a positive integer or null');\n  }\n\n  this.version = version;\n}\n\nSnapshotVersionRequest.prototype = Object.create(SnapshotRequest.prototype);\n\nSnapshotVersionRequest.prototype._message = function() {\n  return {\n    a: ACTIONS.snapshotFetch,\n    id: this.requestId,\n    c: this.collection,\n    d: this.id,\n    v: this.version\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvY2xpZW50L3NuYXBzaG90LXJlcXVlc3Qvc25hcHNob3QtdmVyc2lvbi1yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQixtQkFBTyxDQUFDLHdHQUFvQjtBQUNsRCxXQUFXLG1CQUFPLENBQUMsNERBQVk7QUFDL0IsY0FBYyxpSEFBd0M7O0FBRXREOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9jbGllbnQvc25hcHNob3QtcmVxdWVzdC9zbmFwc2hvdC12ZXJzaW9uLXJlcXVlc3QuanM/NWViZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU25hcHNob3RSZXF1ZXN0ID0gcmVxdWlyZSgnLi9zbmFwc2hvdC1yZXF1ZXN0Jyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKTtcbnZhciBBQ1RJT05TID0gcmVxdWlyZSgnLi4vLi4vbWVzc2FnZS1hY3Rpb25zJykuQUNUSU9OUztcblxubW9kdWxlLmV4cG9ydHMgPSBTbmFwc2hvdFZlcnNpb25SZXF1ZXN0O1xuXG5mdW5jdGlvbiBTbmFwc2hvdFZlcnNpb25SZXF1ZXN0KGNvbm5lY3Rpb24sIHJlcXVlc3RJZCwgY29sbGVjdGlvbiwgaWQsIHZlcnNpb24sIGNhbGxiYWNrKSB7XG4gIFNuYXBzaG90UmVxdWVzdC5jYWxsKHRoaXMsIGNvbm5lY3Rpb24sIHJlcXVlc3RJZCwgY29sbGVjdGlvbiwgaWQsIGNhbGxiYWNrKTtcblxuICBpZiAoIXV0aWwuaXNWYWxpZFZlcnNpb24odmVyc2lvbikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NuYXBzaG90IHZlcnNpb24gbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIgb3IgbnVsbCcpO1xuICB9XG5cbiAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbn1cblxuU25hcHNob3RWZXJzaW9uUmVxdWVzdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNuYXBzaG90UmVxdWVzdC5wcm90b3R5cGUpO1xuXG5TbmFwc2hvdFZlcnNpb25SZXF1ZXN0LnByb3RvdHlwZS5fbWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGE6IEFDVElPTlMuc25hcHNob3RGZXRjaCxcbiAgICBpZDogdGhpcy5yZXF1ZXN0SWQsXG4gICAgYzogdGhpcy5jb2xsZWN0aW9uLFxuICAgIGQ6IHRoaXMuaWQsXG4gICAgdjogdGhpcy52ZXJzaW9uXG4gIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/client/snapshot-request/snapshot-version-request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/emitter.js":
/*!*********************************************!*\
  !*** ./node_modules/sharedb/lib/emitter.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\n\nexports.EventEmitter = EventEmitter;\nexports.mixin = mixin;\n\nfunction mixin(Constructor) {\n  for (var key in EventEmitter.prototype) {\n    Constructor.prototype[key] = EventEmitter.prototype[key];\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvZW1pdHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUIsMERBQThCOztBQUVqRCxvQkFBb0I7QUFDcEIsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9lbWl0dGVyLmpzP2UzMTciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5leHBvcnRzLm1peGluID0gbWl4aW47XG5cbmZ1bmN0aW9uIG1peGluKENvbnN0cnVjdG9yKSB7XG4gIGZvciAodmFyIGtleSBpbiBFdmVudEVtaXR0ZXIucHJvdG90eXBlKSB7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlW2tleV0gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlW2tleV07XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/emitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/error.js":
/*!*******************************************!*\
  !*** ./node_modules/sharedb/lib/error.js ***!
  \*******************************************/
/***/ ((module) => {

eval("function ShareDBError(code, message) {\n  this.code = code;\n  this.message = message || '';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ShareDBError);\n  } else {\n    this.stack = new Error().stack;\n  }\n}\n\nShareDBError.prototype = Object.create(Error.prototype);\nShareDBError.prototype.constructor = ShareDBError;\nShareDBError.prototype.name = 'ShareDBError';\n\nShareDBError.CODES = {\n  ERR_APPLY_OP_VERSION_DOES_NOT_MATCH_SNAPSHOT: 'ERR_APPLY_OP_VERSION_DOES_NOT_MATCH_SNAPSHOT',\n  ERR_APPLY_SNAPSHOT_NOT_PROVIDED: 'ERR_APPLY_SNAPSHOT_NOT_PROVIDED',\n  ERR_FIXUP_IS_ONLY_VALID_ON_APPLY: 'ERR_FIXUP_IS_ONLY_VALID_ON_APPLY',\n  ERR_CANNOT_FIXUP_DELETION: 'ERR_CANNOT_FIXUP_DELETION',\n  ERR_CLIENT_ID_BADLY_FORMED: 'ERR_CLIENT_ID_BADLY_FORMED',\n  ERR_CANNOT_PING_OFFLINE: 'ERR_CANNOT_PING_OFFLINE',\n  ERR_CONNECTION_SEQ_INTEGER_OVERFLOW: 'ERR_CONNECTION_SEQ_INTEGER_OVERFLOW',\n  ERR_CONNECTION_STATE_TRANSITION_INVALID: 'ERR_CONNECTION_STATE_TRANSITION_INVALID',\n  ERR_DATABASE_ADAPTER_NOT_FOUND: 'ERR_DATABASE_ADAPTER_NOT_FOUND',\n  ERR_DATABASE_DOES_NOT_SUPPORT_SUBSCRIBE: 'ERR_DATABASE_DOES_NOT_SUPPORT_SUBSCRIBE',\n  ERR_DATABASE_METHOD_NOT_IMPLEMENTED: 'ERR_DATABASE_METHOD_NOT_IMPLEMENTED',\n  ERR_DEFAULT_TYPE_MISMATCH: 'ERR_DEFAULT_TYPE_MISMATCH',\n  ERR_DOC_MISSING_VERSION: 'ERR_DOC_MISSING_VERSION',\n  ERR_DOC_ALREADY_CREATED: 'ERR_DOC_ALREADY_CREATED',\n  ERR_DOC_DOES_NOT_EXIST: 'ERR_DOC_DOES_NOT_EXIST',\n  ERR_DOC_TYPE_NOT_RECOGNIZED: 'ERR_DOC_TYPE_NOT_RECOGNIZED',\n  ERR_DOC_WAS_DELETED: 'ERR_DOC_WAS_DELETED',\n  ERR_DOC_IN_HARD_ROLLBACK: 'ERR_DOC_IN_HARD_ROLLBACK',\n  ERR_INFLIGHT_OP_MISSING: 'ERR_INFLIGHT_OP_MISSING',\n  ERR_INGESTED_SNAPSHOT_HAS_NO_VERSION: 'ERR_INGESTED_SNAPSHOT_HAS_NO_VERSION',\n  ERR_MAX_SUBMIT_RETRIES_EXCEEDED: 'ERR_MAX_SUBMIT_RETRIES_EXCEEDED',\n  ERR_MESSAGE_BADLY_FORMED: 'ERR_MESSAGE_BADLY_FORMED',\n  ERR_MILESTONE_ARGUMENT_INVALID: 'ERR_MILESTONE_ARGUMENT_INVALID',\n  ERR_NO_OP: 'ERR_NO_OP',\n  ERR_OP_ALREADY_SUBMITTED: 'ERR_OP_ALREADY_SUBMITTED',\n  ERR_OP_NOT_ALLOWED_IN_PROJECTION: 'ERR_OP_NOT_ALLOWED_IN_PROJECTION',\n  ERR_OP_SUBMIT_REJECTED: 'ERR_OP_SUBMIT_REJECTED',\n  ERR_PENDING_OP_REMOVED_BY_OP_SUBMIT_REJECTED: 'ERR_PENDING_OP_REMOVED_BY_OP_SUBMIT_REJECTED',\n  ERR_HARD_ROLLBACK_FETCH_FAILED: 'ERR_HARD_ROLLBACK_FETCH_FAILED',\n  ERR_OP_VERSION_MISMATCH_AFTER_TRANSFORM: 'ERR_OP_VERSION_MISMATCH_AFTER_TRANSFORM',\n  ERR_OP_VERSION_MISMATCH_DURING_TRANSFORM: 'ERR_OP_VERSION_MISMATCH_DURING_TRANSFORM',\n  ERR_OP_VERSION_NEWER_THAN_CURRENT_SNAPSHOT: 'ERR_OP_VERSION_NEWER_THAN_CURRENT_SNAPSHOT',\n  ERR_OT_LEGACY_JSON0_OP_CANNOT_BE_NORMALIZED: 'ERR_OT_LEGACY_JSON0_OP_CANNOT_BE_NORMALIZED',\n  ERR_OT_OP_BADLY_FORMED: 'ERR_OT_OP_BADLY_FORMED',\n  ERR_OT_OP_NOT_APPLIED: 'ERR_OT_OP_NOT_APPLIED',\n  ERR_OT_OP_NOT_PROVIDED: 'ERR_OT_OP_NOT_PROVIDED',\n  ERR_PRESENCE_TRANSFORM_FAILED: 'ERR_PRESENCE_TRANSFORM_FAILED',\n  ERR_PROTOCOL_VERSION_NOT_SUPPORTED: 'ERR_PROTOCOL_VERSION_NOT_SUPPORTED',\n  ERR_QUERY_CHANNEL_MISSING: 'ERR_QUERY_CHANNEL_MISSING',\n  ERR_QUERY_EMITTER_LISTENER_NOT_ASSIGNED: 'ERR_QUERY_EMITTER_LISTENER_NOT_ASSIGNED',\n  /**\n   * A special error that a \"readSnapshots\" middleware implementation can use to indicate that it\n   * wishes for the ShareDB client to treat it as a silent rejection, not passing the error back to\n   * user code.\n   *\n   * For subscribes, the ShareDB client will still cancel the document subscription.\n   */\n  ERR_SNAPSHOT_READ_SILENT_REJECTION: 'ERR_SNAPSHOT_READ_SILENT_REJECTION',\n  /**\n   * A \"readSnapshots\" middleware rejected the reads of specific snapshots.\n   *\n   * This error code is mostly for server use and generally will not be encountered on the client.\n   * Instead, each specific doc that encountered an error will receive its specific error.\n   *\n   * The one exception is for queries, where a \"readSnapshots\" rejection of specific snapshots will\n   * cause the client to receive this error for the whole query, since queries don't support\n   * doc-specific errors.\n   */\n  ERR_SNAPSHOT_READS_REJECTED: 'ERR_SNAPSHOT_READS_REJECTED',\n  ERR_SUBMIT_TRANSFORM_OPS_NOT_FOUND: 'ERR_SUBMIT_TRANSFORM_OPS_NOT_FOUND',\n  ERR_TYPE_CANNOT_BE_PROJECTED: 'ERR_TYPE_CANNOT_BE_PROJECTED',\n  ERR_TYPE_DOES_NOT_SUPPORT_COMPOSE: 'ERR_TYPE_DOES_NOT_SUPPORT_COMPOSE',\n  ERR_TYPE_DOES_NOT_SUPPORT_PRESENCE: 'ERR_TYPE_DOES_NOT_SUPPORT_PRESENCE',\n  ERR_UNKNOWN_ERROR: 'ERR_UNKNOWN_ERROR'\n};\n\nmodule.exports = ShareDBError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RheTlfY29sbGFib3JhdGl2ZV9lZGl0b3IvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvZXJyb3IuanM/NTdhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBTaGFyZURCRXJyb3IoY29kZSwgbWVzc2FnZSkge1xuICB0aGlzLmNvZGUgPSBjb2RlO1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlIHx8ICcnO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBTaGFyZURCRXJyb3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgfVxufVxuXG5TaGFyZURCRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuU2hhcmVEQkVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNoYXJlREJFcnJvcjtcblNoYXJlREJFcnJvci5wcm90b3R5cGUubmFtZSA9ICdTaGFyZURCRXJyb3InO1xuXG5TaGFyZURCRXJyb3IuQ09ERVMgPSB7XG4gIEVSUl9BUFBMWV9PUF9WRVJTSU9OX0RPRVNfTk9UX01BVENIX1NOQVBTSE9UOiAnRVJSX0FQUExZX09QX1ZFUlNJT05fRE9FU19OT1RfTUFUQ0hfU05BUFNIT1QnLFxuICBFUlJfQVBQTFlfU05BUFNIT1RfTk9UX1BST1ZJREVEOiAnRVJSX0FQUExZX1NOQVBTSE9UX05PVF9QUk9WSURFRCcsXG4gIEVSUl9GSVhVUF9JU19PTkxZX1ZBTElEX09OX0FQUExZOiAnRVJSX0ZJWFVQX0lTX09OTFlfVkFMSURfT05fQVBQTFknLFxuICBFUlJfQ0FOTk9UX0ZJWFVQX0RFTEVUSU9OOiAnRVJSX0NBTk5PVF9GSVhVUF9ERUxFVElPTicsXG4gIEVSUl9DTElFTlRfSURfQkFETFlfRk9STUVEOiAnRVJSX0NMSUVOVF9JRF9CQURMWV9GT1JNRUQnLFxuICBFUlJfQ0FOTk9UX1BJTkdfT0ZGTElORTogJ0VSUl9DQU5OT1RfUElOR19PRkZMSU5FJyxcbiAgRVJSX0NPTk5FQ1RJT05fU0VRX0lOVEVHRVJfT1ZFUkZMT1c6ICdFUlJfQ09OTkVDVElPTl9TRVFfSU5URUdFUl9PVkVSRkxPVycsXG4gIEVSUl9DT05ORUNUSU9OX1NUQVRFX1RSQU5TSVRJT05fSU5WQUxJRDogJ0VSUl9DT05ORUNUSU9OX1NUQVRFX1RSQU5TSVRJT05fSU5WQUxJRCcsXG4gIEVSUl9EQVRBQkFTRV9BREFQVEVSX05PVF9GT1VORDogJ0VSUl9EQVRBQkFTRV9BREFQVEVSX05PVF9GT1VORCcsXG4gIEVSUl9EQVRBQkFTRV9ET0VTX05PVF9TVVBQT1JUX1NVQlNDUklCRTogJ0VSUl9EQVRBQkFTRV9ET0VTX05PVF9TVVBQT1JUX1NVQlNDUklCRScsXG4gIEVSUl9EQVRBQkFTRV9NRVRIT0RfTk9UX0lNUExFTUVOVEVEOiAnRVJSX0RBVEFCQVNFX01FVEhPRF9OT1RfSU1QTEVNRU5URUQnLFxuICBFUlJfREVGQVVMVF9UWVBFX01JU01BVENIOiAnRVJSX0RFRkFVTFRfVFlQRV9NSVNNQVRDSCcsXG4gIEVSUl9ET0NfTUlTU0lOR19WRVJTSU9OOiAnRVJSX0RPQ19NSVNTSU5HX1ZFUlNJT04nLFxuICBFUlJfRE9DX0FMUkVBRFlfQ1JFQVRFRDogJ0VSUl9ET0NfQUxSRUFEWV9DUkVBVEVEJyxcbiAgRVJSX0RPQ19ET0VTX05PVF9FWElTVDogJ0VSUl9ET0NfRE9FU19OT1RfRVhJU1QnLFxuICBFUlJfRE9DX1RZUEVfTk9UX1JFQ09HTklaRUQ6ICdFUlJfRE9DX1RZUEVfTk9UX1JFQ09HTklaRUQnLFxuICBFUlJfRE9DX1dBU19ERUxFVEVEOiAnRVJSX0RPQ19XQVNfREVMRVRFRCcsXG4gIEVSUl9ET0NfSU5fSEFSRF9ST0xMQkFDSzogJ0VSUl9ET0NfSU5fSEFSRF9ST0xMQkFDSycsXG4gIEVSUl9JTkZMSUdIVF9PUF9NSVNTSU5HOiAnRVJSX0lORkxJR0hUX09QX01JU1NJTkcnLFxuICBFUlJfSU5HRVNURURfU05BUFNIT1RfSEFTX05PX1ZFUlNJT046ICdFUlJfSU5HRVNURURfU05BUFNIT1RfSEFTX05PX1ZFUlNJT04nLFxuICBFUlJfTUFYX1NVQk1JVF9SRVRSSUVTX0VYQ0VFREVEOiAnRVJSX01BWF9TVUJNSVRfUkVUUklFU19FWENFRURFRCcsXG4gIEVSUl9NRVNTQUdFX0JBRExZX0ZPUk1FRDogJ0VSUl9NRVNTQUdFX0JBRExZX0ZPUk1FRCcsXG4gIEVSUl9NSUxFU1RPTkVfQVJHVU1FTlRfSU5WQUxJRDogJ0VSUl9NSUxFU1RPTkVfQVJHVU1FTlRfSU5WQUxJRCcsXG4gIEVSUl9OT19PUDogJ0VSUl9OT19PUCcsXG4gIEVSUl9PUF9BTFJFQURZX1NVQk1JVFRFRDogJ0VSUl9PUF9BTFJFQURZX1NVQk1JVFRFRCcsXG4gIEVSUl9PUF9OT1RfQUxMT1dFRF9JTl9QUk9KRUNUSU9OOiAnRVJSX09QX05PVF9BTExPV0VEX0lOX1BST0pFQ1RJT04nLFxuICBFUlJfT1BfU1VCTUlUX1JFSkVDVEVEOiAnRVJSX09QX1NVQk1JVF9SRUpFQ1RFRCcsXG4gIEVSUl9QRU5ESU5HX09QX1JFTU9WRURfQllfT1BfU1VCTUlUX1JFSkVDVEVEOiAnRVJSX1BFTkRJTkdfT1BfUkVNT1ZFRF9CWV9PUF9TVUJNSVRfUkVKRUNURUQnLFxuICBFUlJfSEFSRF9ST0xMQkFDS19GRVRDSF9GQUlMRUQ6ICdFUlJfSEFSRF9ST0xMQkFDS19GRVRDSF9GQUlMRUQnLFxuICBFUlJfT1BfVkVSU0lPTl9NSVNNQVRDSF9BRlRFUl9UUkFOU0ZPUk06ICdFUlJfT1BfVkVSU0lPTl9NSVNNQVRDSF9BRlRFUl9UUkFOU0ZPUk0nLFxuICBFUlJfT1BfVkVSU0lPTl9NSVNNQVRDSF9EVVJJTkdfVFJBTlNGT1JNOiAnRVJSX09QX1ZFUlNJT05fTUlTTUFUQ0hfRFVSSU5HX1RSQU5TRk9STScsXG4gIEVSUl9PUF9WRVJTSU9OX05FV0VSX1RIQU5fQ1VSUkVOVF9TTkFQU0hPVDogJ0VSUl9PUF9WRVJTSU9OX05FV0VSX1RIQU5fQ1VSUkVOVF9TTkFQU0hPVCcsXG4gIEVSUl9PVF9MRUdBQ1lfSlNPTjBfT1BfQ0FOTk9UX0JFX05PUk1BTElaRUQ6ICdFUlJfT1RfTEVHQUNZX0pTT04wX09QX0NBTk5PVF9CRV9OT1JNQUxJWkVEJyxcbiAgRVJSX09UX09QX0JBRExZX0ZPUk1FRDogJ0VSUl9PVF9PUF9CQURMWV9GT1JNRUQnLFxuICBFUlJfT1RfT1BfTk9UX0FQUExJRUQ6ICdFUlJfT1RfT1BfTk9UX0FQUExJRUQnLFxuICBFUlJfT1RfT1BfTk9UX1BST1ZJREVEOiAnRVJSX09UX09QX05PVF9QUk9WSURFRCcsXG4gIEVSUl9QUkVTRU5DRV9UUkFOU0ZPUk1fRkFJTEVEOiAnRVJSX1BSRVNFTkNFX1RSQU5TRk9STV9GQUlMRUQnLFxuICBFUlJfUFJPVE9DT0xfVkVSU0lPTl9OT1RfU1VQUE9SVEVEOiAnRVJSX1BST1RPQ09MX1ZFUlNJT05fTk9UX1NVUFBPUlRFRCcsXG4gIEVSUl9RVUVSWV9DSEFOTkVMX01JU1NJTkc6ICdFUlJfUVVFUllfQ0hBTk5FTF9NSVNTSU5HJyxcbiAgRVJSX1FVRVJZX0VNSVRURVJfTElTVEVORVJfTk9UX0FTU0lHTkVEOiAnRVJSX1FVRVJZX0VNSVRURVJfTElTVEVORVJfTk9UX0FTU0lHTkVEJyxcbiAgLyoqXG4gICAqIEEgc3BlY2lhbCBlcnJvciB0aGF0IGEgXCJyZWFkU25hcHNob3RzXCIgbWlkZGxld2FyZSBpbXBsZW1lbnRhdGlvbiBjYW4gdXNlIHRvIGluZGljYXRlIHRoYXQgaXRcbiAgICogd2lzaGVzIGZvciB0aGUgU2hhcmVEQiBjbGllbnQgdG8gdHJlYXQgaXQgYXMgYSBzaWxlbnQgcmVqZWN0aW9uLCBub3QgcGFzc2luZyB0aGUgZXJyb3IgYmFjayB0b1xuICAgKiB1c2VyIGNvZGUuXG4gICAqXG4gICAqIEZvciBzdWJzY3JpYmVzLCB0aGUgU2hhcmVEQiBjbGllbnQgd2lsbCBzdGlsbCBjYW5jZWwgdGhlIGRvY3VtZW50IHN1YnNjcmlwdGlvbi5cbiAgICovXG4gIEVSUl9TTkFQU0hPVF9SRUFEX1NJTEVOVF9SRUpFQ1RJT046ICdFUlJfU05BUFNIT1RfUkVBRF9TSUxFTlRfUkVKRUNUSU9OJyxcbiAgLyoqXG4gICAqIEEgXCJyZWFkU25hcHNob3RzXCIgbWlkZGxld2FyZSByZWplY3RlZCB0aGUgcmVhZHMgb2Ygc3BlY2lmaWMgc25hcHNob3RzLlxuICAgKlxuICAgKiBUaGlzIGVycm9yIGNvZGUgaXMgbW9zdGx5IGZvciBzZXJ2ZXIgdXNlIGFuZCBnZW5lcmFsbHkgd2lsbCBub3QgYmUgZW5jb3VudGVyZWQgb24gdGhlIGNsaWVudC5cbiAgICogSW5zdGVhZCwgZWFjaCBzcGVjaWZpYyBkb2MgdGhhdCBlbmNvdW50ZXJlZCBhbiBlcnJvciB3aWxsIHJlY2VpdmUgaXRzIHNwZWNpZmljIGVycm9yLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiBpcyBmb3IgcXVlcmllcywgd2hlcmUgYSBcInJlYWRTbmFwc2hvdHNcIiByZWplY3Rpb24gb2Ygc3BlY2lmaWMgc25hcHNob3RzIHdpbGxcbiAgICogY2F1c2UgdGhlIGNsaWVudCB0byByZWNlaXZlIHRoaXMgZXJyb3IgZm9yIHRoZSB3aG9sZSBxdWVyeSwgc2luY2UgcXVlcmllcyBkb24ndCBzdXBwb3J0XG4gICAqIGRvYy1zcGVjaWZpYyBlcnJvcnMuXG4gICAqL1xuICBFUlJfU05BUFNIT1RfUkVBRFNfUkVKRUNURUQ6ICdFUlJfU05BUFNIT1RfUkVBRFNfUkVKRUNURUQnLFxuICBFUlJfU1VCTUlUX1RSQU5TRk9STV9PUFNfTk9UX0ZPVU5EOiAnRVJSX1NVQk1JVF9UUkFOU0ZPUk1fT1BTX05PVF9GT1VORCcsXG4gIEVSUl9UWVBFX0NBTk5PVF9CRV9QUk9KRUNURUQ6ICdFUlJfVFlQRV9DQU5OT1RfQkVfUFJPSkVDVEVEJyxcbiAgRVJSX1RZUEVfRE9FU19OT1RfU1VQUE9SVF9DT01QT1NFOiAnRVJSX1RZUEVfRE9FU19OT1RfU1VQUE9SVF9DT01QT1NFJyxcbiAgRVJSX1RZUEVfRE9FU19OT1RfU1VQUE9SVF9QUkVTRU5DRTogJ0VSUl9UWVBFX0RPRVNfTk9UX1NVUFBPUlRfUFJFU0VOQ0UnLFxuICBFUlJfVU5LTk9XTl9FUlJPUjogJ0VSUl9VTktOT1dOX0VSUk9SJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaGFyZURCRXJyb3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/logger/index.js":
/*!**************************************************!*\
  !*** ./node_modules/sharedb/lib/logger/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Logger = __webpack_require__(/*! ./logger */ \"(ssr)/./node_modules/sharedb/lib/logger/logger.js\");\nvar logger = new Logger();\nmodule.exports = logger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvbG9nZ2VyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyxtRUFBVTtBQUMvQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9sb2dnZXIvaW5kZXguanM/ZmViYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnZXInKTtcbnZhciBsb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGxvZ2dlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/logger/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/logger/logger.js":
/*!***************************************************!*\
  !*** ./node_modules/sharedb/lib/logger/logger.js ***!
  \***************************************************/
/***/ ((module) => {

eval("var SUPPORTED_METHODS = [\n  'info',\n  'warn',\n  'error'\n];\n\nfunction Logger() {\n  var defaultMethods = Object.create(null);\n  SUPPORTED_METHODS.forEach(function(method) {\n    // Deal with Chrome issue: https://bugs.chromium.org/p/chromium/issues/detail?id=179628\n    defaultMethods[method] = console[method].bind(console);\n  });\n  this.setMethods(defaultMethods);\n}\nmodule.exports = Logger;\n\nLogger.prototype.setMethods = function(overrides) {\n  overrides = overrides || {};\n  var logger = this;\n\n  SUPPORTED_METHODS.forEach(function(method) {\n    if (typeof overrides[method] === 'function') {\n      logger[method] = overrides[method];\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvbG9nZ2VyL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL2RheTlfY29sbGFib3JhdGl2ZV9lZGl0b3IvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvbG9nZ2VyL2xvZ2dlci5qcz83NDdhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBTVVBQT1JURURfTUVUSE9EUyA9IFtcbiAgJ2luZm8nLFxuICAnd2FybicsXG4gICdlcnJvcidcbl07XG5cbmZ1bmN0aW9uIExvZ2dlcigpIHtcbiAgdmFyIGRlZmF1bHRNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgU1VQUE9SVEVEX01FVEhPRFMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAvLyBEZWFsIHdpdGggQ2hyb21lIGlzc3VlOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xNzk2MjhcbiAgICBkZWZhdWx0TWV0aG9kc1ttZXRob2RdID0gY29uc29sZVttZXRob2RdLmJpbmQoY29uc29sZSk7XG4gIH0pO1xuICB0aGlzLnNldE1ldGhvZHMoZGVmYXVsdE1ldGhvZHMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBMb2dnZXI7XG5cbkxvZ2dlci5wcm90b3R5cGUuc2V0TWV0aG9kcyA9IGZ1bmN0aW9uKG92ZXJyaWRlcykge1xuICBvdmVycmlkZXMgPSBvdmVycmlkZXMgfHwge307XG4gIHZhciBsb2dnZXIgPSB0aGlzO1xuXG4gIFNVUFBPUlRFRF9NRVRIT0RTLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgaWYgKHR5cGVvZiBvdmVycmlkZXNbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbG9nZ2VyW21ldGhvZF0gPSBvdmVycmlkZXNbbWV0aG9kXTtcbiAgICB9XG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/logger/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/message-actions.js":
/*!*****************************************************!*\
  !*** ./node_modules/sharedb/lib/message-actions.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.ACTIONS = {\n  initLegacy: 'init',\n  handshake: 'hs',\n  queryFetch: 'qf',\n  querySubscribe: 'qs',\n  queryUnsubscribe: 'qu',\n  queryUpdate: 'q',\n  bulkFetch: 'bf',\n  bulkSubscribe: 'bs',\n  bulkUnsubscribe: 'bu',\n  fetch: 'f',\n  fixup: 'fixup',\n  subscribe: 's',\n  unsubscribe: 'u',\n  op: 'op',\n  snapshotFetch: 'nf',\n  snapshotFetchByTimestamp: 'nt',\n  pingPong: 'pp',\n  presence: 'p',\n  presenceSubscribe: 'ps',\n  presenceUnsubscribe: 'pu',\n  presenceRequest: 'pr'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvbWVzc2FnZS1hY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RheTlfY29sbGFib3JhdGl2ZV9lZGl0b3IvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvbWVzc2FnZS1hY3Rpb25zLmpzP2RkMmUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5BQ1RJT05TID0ge1xuICBpbml0TGVnYWN5OiAnaW5pdCcsXG4gIGhhbmRzaGFrZTogJ2hzJyxcbiAgcXVlcnlGZXRjaDogJ3FmJyxcbiAgcXVlcnlTdWJzY3JpYmU6ICdxcycsXG4gIHF1ZXJ5VW5zdWJzY3JpYmU6ICdxdScsXG4gIHF1ZXJ5VXBkYXRlOiAncScsXG4gIGJ1bGtGZXRjaDogJ2JmJyxcbiAgYnVsa1N1YnNjcmliZTogJ2JzJyxcbiAgYnVsa1Vuc3Vic2NyaWJlOiAnYnUnLFxuICBmZXRjaDogJ2YnLFxuICBmaXh1cDogJ2ZpeHVwJyxcbiAgc3Vic2NyaWJlOiAncycsXG4gIHVuc3Vic2NyaWJlOiAndScsXG4gIG9wOiAnb3AnLFxuICBzbmFwc2hvdEZldGNoOiAnbmYnLFxuICBzbmFwc2hvdEZldGNoQnlUaW1lc3RhbXA6ICdudCcsXG4gIHBpbmdQb25nOiAncHAnLFxuICBwcmVzZW5jZTogJ3AnLFxuICBwcmVzZW5jZVN1YnNjcmliZTogJ3BzJyxcbiAgcHJlc2VuY2VVbnN1YnNjcmliZTogJ3B1JyxcbiAgcHJlc2VuY2VSZXF1ZXN0OiAncHInXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/message-actions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/next-tick.js":
/*!***********************************************!*\
  !*** ./node_modules/sharedb/lib/next-tick.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.messageChannel = function() {\n  var triggerCallback = createNextTickTrigger(arguments);\n  var channel = new MessageChannel();\n  channel.port1.onmessage = function() {\n    triggerCallback();\n    channel.port1.close();\n  };\n  channel.port2.postMessage('');\n};\n\nexports.setTimeout = function() {\n  var triggerCallback = createNextTickTrigger(arguments);\n  setTimeout(triggerCallback);\n};\n\nfunction createNextTickTrigger(args) {\n  var callback = args[0];\n  var _args = [];\n  for (var i = 1; i < args.length; i++) {\n    _args[i - 1] = args[i];\n  }\n\n  return function triggerCallback() {\n    callback.apply(null, _args);\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvbmV4dC10aWNrLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi9uZXh0LXRpY2suanM/YzNmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLm1lc3NhZ2VDaGFubmVsID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0cmlnZ2VyQ2FsbGJhY2sgPSBjcmVhdGVOZXh0VGlja1RyaWdnZXIoYXJndW1lbnRzKTtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICB0cmlnZ2VyQ2FsbGJhY2soKTtcbiAgICBjaGFubmVsLnBvcnQxLmNsb3NlKCk7XG4gIH07XG4gIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoJycpO1xufTtcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0cmlnZ2VyQ2FsbGJhY2sgPSBjcmVhdGVOZXh0VGlja1RyaWdnZXIoYXJndW1lbnRzKTtcbiAgc2V0VGltZW91dCh0cmlnZ2VyQ2FsbGJhY2spO1xufTtcblxuZnVuY3Rpb24gY3JlYXRlTmV4dFRpY2tUcmlnZ2VyKGFyZ3MpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJnc1swXTtcbiAgdmFyIF9hcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIF9hcmdzW2kgLSAxXSA9IGFyZ3NbaV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gdHJpZ2dlckNhbGxiYWNrKCkge1xuICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIF9hcmdzKTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/next-tick.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/ot.js":
/*!****************************************!*\
  !*** ./node_modules/sharedb/lib/ot.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// This contains the master OT functions for the database. They look like\n// ot-types style operational transform functions, but they're a bit different.\n// These functions understand versions and can deal with out of bound create &\n// delete operations.\n\nvar types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/sharedb/lib/types.js\");\nvar ShareDBError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/sharedb/lib/error.js\");\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/sharedb/lib/util.js\");\n\nvar ERROR_CODE = ShareDBError.CODES;\n\n// Returns an error string on failure. Rockin' it C style.\nexports.checkOp = function(op) {\n  if (op == null || typeof op !== 'object') {\n    return new ShareDBError(ERROR_CODE.ERR_OT_OP_BADLY_FORMED, 'Op must be an object');\n  }\n\n  if (op.create != null) {\n    if (typeof op.create !== 'object') {\n      return new ShareDBError(ERROR_CODE.ERR_OT_OP_BADLY_FORMED, 'Create data must be an object');\n    }\n    var typeName = op.create.type;\n    if (typeof typeName !== 'string') {\n      return new ShareDBError(ERROR_CODE.ERR_OT_OP_BADLY_FORMED, 'Missing create type');\n    }\n    var type = types.map[typeName];\n    if (type == null || typeof type !== 'object') {\n      return new ShareDBError(ERROR_CODE.ERR_DOC_TYPE_NOT_RECOGNIZED, 'Unknown type');\n    }\n  } else if (op.del != null) {\n    if (op.del !== true) return new ShareDBError(ERROR_CODE.ERR_OT_OP_BADLY_FORMED, 'del value must be true');\n  } else if (!('op' in op)) {\n    return new ShareDBError(ERROR_CODE.ERR_OT_OP_BADLY_FORMED, 'Missing op, create, or del');\n  }\n\n  if (op.src != null && typeof op.src !== 'string') {\n    return new ShareDBError(ERROR_CODE.ERR_OT_OP_BADLY_FORMED, 'src must be a string');\n  }\n  if (op.seq != null && typeof op.seq !== 'number') {\n    return new ShareDBError(ERROR_CODE.ERR_OT_OP_BADLY_FORMED, 'seq must be a number');\n  }\n  if (\n    (op.src == null && op.seq != null) ||\n    (op.src != null && op.seq == null)\n  ) {\n    return new ShareDBError(ERROR_CODE.ERR_OT_OP_BADLY_FORMED, 'Both src and seq must be set together');\n  }\n\n  if (op.m != null && typeof op.m !== 'object') {\n    return new ShareDBError(ERROR_CODE.ERR_OT_OP_BADLY_FORMED, 'op.m must be an object or null');\n  }\n};\n\n// Takes in a string (type name or URI) and returns the normalized name (uri)\nexports.normalizeType = function(typeName) {\n  return types.map[typeName] && types.map[typeName].uri;\n};\n\n// This is the super apply function that takes in snapshot data (including the\n// type) and edits it in-place. Returns an error or null for success.\nexports.apply = function(snapshot, op) {\n  if (typeof snapshot !== 'object') {\n    return new ShareDBError(ERROR_CODE.ERR_APPLY_SNAPSHOT_NOT_PROVIDED, 'Missing snapshot');\n  }\n  if (snapshot.v != null && op.v != null && snapshot.v !== op.v) {\n    return new ShareDBError(ERROR_CODE.ERR_APPLY_OP_VERSION_DOES_NOT_MATCH_SNAPSHOT, 'Version mismatch');\n  }\n\n  // Create operation\n  if (op.create) {\n    if (snapshot.type) return new ShareDBError(ERROR_CODE.ERR_DOC_ALREADY_CREATED, 'Document already exists');\n\n    // The document doesn't exist, although it might have once existed\n    var create = op.create;\n    var type = types.map[create.type];\n    if (!type) return new ShareDBError(ERROR_CODE.ERR_DOC_TYPE_NOT_RECOGNIZED, 'Unknown type');\n\n    try {\n      snapshot.data = type.create(create.data);\n      snapshot.type = type.uri;\n      snapshot.v++;\n    } catch (err) {\n      return err;\n    }\n\n  // Delete operation\n  } else if (op.del) {\n    snapshot.data = undefined;\n    snapshot.type = null;\n    snapshot.v++;\n\n  // Edit operation\n  } else if ('op' in op) {\n    var err = applyOpEdit(snapshot, op.op);\n    if (err) return err;\n    snapshot.v++;\n\n  // No-op, and we don't have to do anything\n  } else {\n    snapshot.v++;\n  }\n};\n\nfunction applyOpEdit(snapshot, edit) {\n  if (!snapshot.type) return new ShareDBError(ERROR_CODE.ERR_DOC_DOES_NOT_EXIST, 'Document does not exist');\n\n  if (edit === undefined) return new ShareDBError(ERROR_CODE.ERR_OT_OP_NOT_PROVIDED, 'Missing op');\n  var type = types.map[snapshot.type];\n  if (!type) return new ShareDBError(ERROR_CODE.ERR_DOC_TYPE_NOT_RECOGNIZED, 'Unknown type');\n\n  if (type.name === 'json0' && Array.isArray(edit)) {\n    for (var i = 0; i < edit.length; i++) {\n      var opComponent = edit[i];\n      if (Array.isArray(opComponent.p)) {\n        for (var j = 0; j < opComponent.p.length; j++) {\n          var pathSegment = opComponent.p[j];\n          if (util.isDangerousProperty(pathSegment)) {\n            return new ShareDBError(ERROR_CODE.ERR_OT_OP_NOT_APPLIED, 'Invalid path segment');\n          }\n        }\n      }\n    }\n  }\n\n  try {\n    snapshot.data = type.apply(snapshot.data, edit);\n  } catch (err) {\n    return new ShareDBError(ERROR_CODE.ERR_OT_OP_NOT_APPLIED, err.message);\n  }\n}\n\nexports.transform = function(type, op, appliedOp) {\n  // There are 16 cases this function needs to deal with - which are all the\n  // combinations of create/delete/op/noop from both op and appliedOp\n  if (op.v != null && op.v !== appliedOp.v) {\n    return new ShareDBError(ERROR_CODE.ERR_OP_VERSION_MISMATCH_DURING_TRANSFORM, 'Version mismatch');\n  }\n\n  if (appliedOp.del) {\n    if (op.create || 'op' in op) {\n      return new ShareDBError(ERROR_CODE.ERR_DOC_WAS_DELETED, 'Document was deleted');\n    }\n  } else if (\n    (appliedOp.create && ('op' in op || op.create || op.del)) ||\n    ('op' in appliedOp && op.create)\n  ) {\n    // If appliedOp.create is not true, appliedOp contains an op - which\n    // also means the document exists remotely.\n    return new ShareDBError(ERROR_CODE.ERR_DOC_ALREADY_CREATED, 'Document was created remotely');\n  } else if ('op' in appliedOp && 'op' in op) {\n    // If we reach here, they both have a .op property.\n    if (!type) return new ShareDBError(ERROR_CODE.ERR_DOC_DOES_NOT_EXIST, 'Document does not exist');\n\n    if (typeof type === 'string') {\n      type = types.map[type];\n      if (!type) return new ShareDBError(ERROR_CODE.ERR_DOC_TYPE_NOT_RECOGNIZED, 'Unknown type');\n    }\n\n    try {\n      op.op = type.transform(op.op, appliedOp.op, 'left');\n    } catch (err) {\n      return err;\n    }\n  }\n\n  if (op.v != null) op.v++;\n};\n\n/**\n * Apply an array of ops to the provided snapshot.\n *\n * @param snapshot - a Snapshot object which will be mutated by the provided ops\n * @param ops - an array of ops to apply to the snapshot\n * @param options - options (currently for internal use only)\n * @return an error object if applicable\n */\nexports.applyOps = function(snapshot, ops, options) {\n  options = options || {};\n  for (var index = 0; index < ops.length; index++) {\n    var op = ops[index];\n    if (options._normalizeLegacyJson0Ops) {\n      try {\n        normalizeLegacyJson0Ops(snapshot, op);\n      } catch (error) {\n        return new ShareDBError(\n          ERROR_CODE.ERR_OT_LEGACY_JSON0_OP_CANNOT_BE_NORMALIZED,\n          'Cannot normalize legacy json0 op'\n        );\n      }\n    }\n    snapshot.v = op.v;\n    var error = exports.apply(snapshot, op);\n    if (error) return error;\n  }\n};\n\nexports.transformPresence = function(presence, op, isOwnOp) {\n  var opError = this.checkOp(op);\n  if (opError) return opError;\n\n  var type = presence.t;\n  if (typeof type === 'string') {\n    type = types.map[type];\n  }\n  if (!type) return {code: ERROR_CODE.ERR_DOC_TYPE_NOT_RECOGNIZED, message: 'Unknown type'};\n  if (!util.supportsPresence(type)) {\n    return {code: ERROR_CODE.ERR_TYPE_DOES_NOT_SUPPORT_PRESENCE, message: 'Type does not support presence'};\n  }\n\n  if (op.create || op.del) {\n    presence.p = null;\n    presence.v++;\n    return;\n  }\n\n  try {\n    presence.p = presence.p === null ?\n      null :\n      type.transformPresence(presence.p, op.op, isOwnOp);\n  } catch (error) {\n    return {code: ERROR_CODE.ERR_PRESENCE_TRANSFORM_FAILED, message: error.message || error};\n  }\n\n  presence.v++;\n};\n\n/**\n * json0 had a breaking change in https://github.com/ottypes/json0/pull/40\n * The change added stricter type checking, which breaks fetchSnapshot()\n * when trying to rebuild a snapshot from old, committed ops that didn't\n * have this stricter validation. This method fixes up legacy ops to\n * pass the stricter validation\n */\nfunction normalizeLegacyJson0Ops(snapshot, json0Op) {\n  if (snapshot.type !== types.defaultType.uri) return;\n  var components = json0Op.op;\n  if (!components) return;\n  var data = snapshot.data;\n\n  // type.apply() makes no guarantees about mutating the original data, so\n  // we need to clone. However, we only need to apply() if we have multiple\n  // components, so avoid cloning if we don't have to.\n  if (components.length > 1) data = util.clone(data);\n\n  for (var i = 0; i < components.length; i++) {\n    var component = components[i];\n    if (typeof component.lm === 'string') component.lm = +component.lm;\n    var path = component.p;\n    var element = data;\n    for (var j = 0; j < path.length; j++) {\n      var key = path[j];\n      // https://github.com/ottypes/json0/blob/73db17e86adc5d801951d1a69453b01382e66c7d/lib/json0.js#L21\n      if (Object.prototype.toString.call(element) == '[object Array]') path[j] = +key;\n      // https://github.com/ottypes/json0/blob/73db17e86adc5d801951d1a69453b01382e66c7d/lib/json0.js#L32\n      else if (element.constructor === Object) path[j] = key.toString();\n      element = element[key];\n    }\n\n    // Apply to update the snapshot, so we can correctly check the path for\n    // the next component. We don't need to do this on the final iteration,\n    // since there's no more ops.\n    if (i < components.length - 1) data = types.defaultType.apply(data, [component]);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/ot.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/protocol.js":
/*!**********************************************!*\
  !*** ./node_modules/sharedb/lib/protocol.js ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports = {\n  major: 1,\n  minor: 2,\n  checkAtLeast: checkAtLeast\n};\n\nfunction checkAtLeast(toCheck, checkAgainst) {\n  toCheck = normalizedProtocol(toCheck);\n  checkAgainst = normalizedProtocol(checkAgainst);\n  if (toCheck.major > checkAgainst.major) return true;\n  return toCheck.major === checkAgainst.major &&\n    toCheck.minor >= checkAgainst.minor;\n}\n\nfunction normalizedProtocol(protocol) {\n  if (typeof protocol === 'string') {\n    var segments = protocol.split('.');\n    protocol = {\n      major: segments[0],\n      minor: segments[1]\n    };\n  }\n\n  return {\n    major: +(protocol.protocol || protocol.major || 0),\n    minor: +(protocol.protocolMinor || protocol.minor || 0)\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvcHJvdG9jb2wuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXk5X2NvbGxhYm9yYXRpdmVfZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3NoYXJlZGIvbGliL3Byb3RvY29sLmpzPzhkOTAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1ham9yOiAxLFxuICBtaW5vcjogMixcbiAgY2hlY2tBdExlYXN0OiBjaGVja0F0TGVhc3Rcbn07XG5cbmZ1bmN0aW9uIGNoZWNrQXRMZWFzdCh0b0NoZWNrLCBjaGVja0FnYWluc3QpIHtcbiAgdG9DaGVjayA9IG5vcm1hbGl6ZWRQcm90b2NvbCh0b0NoZWNrKTtcbiAgY2hlY2tBZ2FpbnN0ID0gbm9ybWFsaXplZFByb3RvY29sKGNoZWNrQWdhaW5zdCk7XG4gIGlmICh0b0NoZWNrLm1ham9yID4gY2hlY2tBZ2FpbnN0Lm1ham9yKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHRvQ2hlY2subWFqb3IgPT09IGNoZWNrQWdhaW5zdC5tYWpvciAmJlxuICAgIHRvQ2hlY2subWlub3IgPj0gY2hlY2tBZ2FpbnN0Lm1pbm9yO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVkUHJvdG9jb2wocHJvdG9jb2wpIHtcbiAgaWYgKHR5cGVvZiBwcm90b2NvbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VnbWVudHMgPSBwcm90b2NvbC5zcGxpdCgnLicpO1xuICAgIHByb3RvY29sID0ge1xuICAgICAgbWFqb3I6IHNlZ21lbnRzWzBdLFxuICAgICAgbWlub3I6IHNlZ21lbnRzWzFdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFqb3I6ICsocHJvdG9jb2wucHJvdG9jb2wgfHwgcHJvdG9jb2wubWFqb3IgfHwgMCksXG4gICAgbWlub3I6ICsocHJvdG9jb2wucHJvdG9jb2xNaW5vciB8fCBwcm90b2NvbC5taW5vciB8fCAwKVxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/protocol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/snapshot.js":
/*!**********************************************!*\
  !*** ./node_modules/sharedb/lib/snapshot.js ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports = Snapshot;\nfunction Snapshot(id, version, type, data, meta) {\n  this.id = id;\n  this.v = version;\n  this.type = type;\n  this.data = data;\n  this.m = meta;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvc25hcHNob3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RheTlfY29sbGFib3JhdGl2ZV9lZGl0b3IvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvc25hcHNob3QuanM/ZDQwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFNuYXBzaG90O1xuZnVuY3Rpb24gU25hcHNob3QoaWQsIHZlcnNpb24sIHR5cGUsIGRhdGEsIG1ldGEpIHtcbiAgdGhpcy5pZCA9IGlkO1xuICB0aGlzLnYgPSB2ZXJzaW9uO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLm0gPSBtZXRhO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/snapshot.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/types.js":
/*!*******************************************!*\
  !*** ./node_modules/sharedb/lib/types.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.defaultType = __webpack_require__(/*! ot-json0 */ \"(ssr)/./node_modules/ot-json0/lib/index.js\").type;\n\nexports.map = Object.create(null);\n\nexports.register = function(type) {\n  if (type.name) exports.map[type.name] = type;\n  if (type.uri) exports.map[type.uri] = type;\n};\n\nexports.register(exports.defaultType);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvdHlwZXMuanMiLCJtYXBwaW5ncyI6IjtBQUNBLDRHQUE4Qzs7QUFFOUMsV0FBVzs7QUFFWCxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGF5OV9jb2xsYWJvcmF0aXZlX2VkaXRvci8uL25vZGVfbW9kdWxlcy9zaGFyZWRiL2xpYi90eXBlcy5qcz9hYjNiIl0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0cy5kZWZhdWx0VHlwZSA9IHJlcXVpcmUoJ290LWpzb24wJykudHlwZTtcblxuZXhwb3J0cy5tYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5leHBvcnRzLnJlZ2lzdGVyID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodHlwZS5uYW1lKSBleHBvcnRzLm1hcFt0eXBlLm5hbWVdID0gdHlwZTtcbiAgaWYgKHR5cGUudXJpKSBleHBvcnRzLm1hcFt0eXBlLnVyaV0gPSB0eXBlO1xufTtcblxuZXhwb3J0cy5yZWdpc3RlcihleHBvcnRzLmRlZmF1bHRUeXBlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sharedb/lib/util.js":
/*!******************************************!*\
  !*** ./node_modules/sharedb/lib/util.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var nextTickImpl = __webpack_require__(/*! ./next-tick */ \"(ssr)/./node_modules/sharedb/lib/next-tick.js\");\n\nexports.doNothing = doNothing;\nfunction doNothing() {}\n\nexports.hasKeys = function(object) {\n  for (var key in object) return true;\n  return false;\n};\n\nvar hasOwn;\nexports.hasOwn = hasOwn = Object.hasOwn || Object.prototype.hasOwnProperty.call;\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger#Polyfill\nexports.isInteger = Number.isInteger || function(value) {\n  return typeof value === 'number' &&\n    isFinite(value) &&\n    Math.floor(value) === value;\n};\n\nexports.isValidVersion = function(version) {\n  if (version === null) return true;\n  return exports.isInteger(version) && version >= 0;\n};\n\nexports.isValidTimestamp = function(timestamp) {\n  return exports.isValidVersion(timestamp);\n};\n\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n\nexports.dig = function() {\n  var obj = arguments[0];\n  for (var i = 1; i < arguments.length; i++) {\n    var key = arguments[i];\n    obj = hasOwn(obj, key) ? obj[key] : (i === arguments.length - 1 ? undefined : Object.create(null));\n  }\n  return obj;\n};\n\nexports.digOrCreate = function() {\n  var obj = arguments[0];\n  var createCallback = arguments[arguments.length - 1];\n  for (var i = 1; i < arguments.length - 1; i++) {\n    var key = arguments[i];\n    obj = hasOwn(obj, key) ? obj[key] :\n      (obj[key] = i === arguments.length - 2 ? createCallback() : Object.create(null));\n  }\n  return obj;\n};\n\nexports.digAndRemove = function() {\n  var obj = arguments[0];\n  var objects = [obj];\n  for (var i = 1; i < arguments.length - 1; i++) {\n    var key = arguments[i];\n    if (!hasOwn(obj, key)) break;\n    obj = obj[key];\n    objects.push(obj);\n  };\n\n  for (var i = objects.length - 1; i >= 0; i--) {\n    var parent = objects[i];\n    var key = arguments[i + 1];\n    var child = parent[key];\n    if (i === objects.length - 1 || !exports.hasKeys(child)) delete parent[key];\n  }\n};\n\nexports.supportsPresence = function(type) {\n  return type && typeof type.transformPresence === 'function';\n};\n\nexports.callEach = function(callbacks, error) {\n  var called = false;\n  callbacks.forEach(function(callback) {\n    if (callback) {\n      callback(error);\n      called = true;\n    }\n  });\n  return called;\n};\n\nexports.truthy = function(arg) {\n  return !!arg;\n};\n\nif (typeof process !== 'undefined' && typeof process.nextTick === 'function') {\n  exports.nextTick = process.nextTick;\n} else if (typeof MessageChannel !== 'undefined') {\n  exports.nextTick = nextTickImpl.messageChannel;\n} else {\n  exports.nextTick = nextTickImpl.setTimeout;\n}\n\nexports.clone = function(obj) {\n  return (obj === undefined) ? undefined : JSON.parse(JSON.stringify(obj));\n};\n\nvar objectProtoPropNames = Object.create(null);\nObject.getOwnPropertyNames(Object.prototype).forEach(function(prop) {\n  if (prop !== '__proto__') {\n    objectProtoPropNames[prop] = true;\n  }\n});\nexports.isDangerousProperty = function(propName) {\n  return propName === '__proto__' || objectProtoPropNames[propName];\n};\n\ntry {\n  var util = __webpack_require__(/*! util */ \"util\");\n  if (typeof util.inherits !== 'function') throw new Error('Could not find util.inherits()');\n  exports.inherits = util.inherits;\n} catch (e) {\n  try {\n    exports.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n  } catch (e) {\n    throw new Error('If running sharedb in a browser, please install the \"inherits\" or \"util\" package');\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUIsbUJBQU8sQ0FBQyxrRUFBYTs7QUFFeEMsaUJBQWlCO0FBQ2pCOztBQUVBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjOztBQUVkO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCO0FBQ0E7O0FBRUEsd0JBQXdCOztBQUV4QixXQUFXO0FBQ1g7QUFDQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSxrQkFBa0IsMEJBQTBCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBLGtCQUFrQiwwQkFBMEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUMsUUFBUTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0EsRUFBRSxnQkFBZ0I7QUFDbEIsRUFBRTtBQUNGLEVBQUUsZ0JBQWdCO0FBQ2xCLEVBQUU7QUFDRixFQUFFLGdCQUFnQjtBQUNsQjs7QUFFQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDJCQUEyQjtBQUMzQjtBQUNBOztBQUVBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCO0FBQ0EsRUFBRSxnQkFBZ0I7QUFDbEIsRUFBRTtBQUNGO0FBQ0EsSUFBSSxtR0FBc0M7QUFDMUMsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RheTlfY29sbGFib3JhdGl2ZV9lZGl0b3IvLi9ub2RlX21vZHVsZXMvc2hhcmVkYi9saWIvdXRpbC5qcz82NTE5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBuZXh0VGlja0ltcGwgPSByZXF1aXJlKCcuL25leHQtdGljaycpO1xuXG5leHBvcnRzLmRvTm90aGluZyA9IGRvTm90aGluZztcbmZ1bmN0aW9uIGRvTm90aGluZygpIHt9XG5cbmV4cG9ydHMuaGFzS2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIGhhc093bjtcbmV4cG9ydHMuaGFzT3duID0gaGFzT3duID0gT2JqZWN0Lmhhc093biB8fCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGw7XG5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlci9pc0ludGVnZXIjUG9seWZpbGxcbmV4cG9ydHMuaXNJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlciB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJlxuICAgIGlzRmluaXRlKHZhbHVlKSAmJlxuICAgIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbn07XG5cbmV4cG9ydHMuaXNWYWxpZFZlcnNpb24gPSBmdW5jdGlvbih2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGV4cG9ydHMuaXNJbnRlZ2VyKHZlcnNpb24pICYmIHZlcnNpb24gPj0gMDtcbn07XG5cbmV4cG9ydHMuaXNWYWxpZFRpbWVzdGFtcCA9IGZ1bmN0aW9uKHRpbWVzdGFtcCkge1xuICByZXR1cm4gZXhwb3J0cy5pc1ZhbGlkVmVyc2lvbih0aW1lc3RhbXApO1xufTtcblxuZXhwb3J0cy5NQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuZXhwb3J0cy5kaWcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG9iaiA9IGFyZ3VtZW50c1swXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gYXJndW1lbnRzW2ldO1xuICAgIG9iaiA9IGhhc093bihvYmosIGtleSkgPyBvYmpba2V5XSA6IChpID09PSBhcmd1bWVudHMubGVuZ3RoIC0gMSA/IHVuZGVmaW5lZCA6IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xuXG5leHBvcnRzLmRpZ09yQ3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBvYmogPSBhcmd1bWVudHNbMF07XG4gIHZhciBjcmVhdGVDYWxsYmFjayA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIHZhciBrZXkgPSBhcmd1bWVudHNbaV07XG4gICAgb2JqID0gaGFzT3duKG9iaiwga2V5KSA/IG9ialtrZXldIDpcbiAgICAgIChvYmpba2V5XSA9IGkgPT09IGFyZ3VtZW50cy5sZW5ndGggLSAyID8gY3JlYXRlQ2FsbGJhY2soKSA6IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xuXG5leHBvcnRzLmRpZ0FuZFJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgb2JqID0gYXJndW1lbnRzWzBdO1xuICB2YXIgb2JqZWN0cyA9IFtvYmpdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICB2YXIga2V5ID0gYXJndW1lbnRzW2ldO1xuICAgIGlmICghaGFzT3duKG9iaiwga2V5KSkgYnJlYWs7XG4gICAgb2JqID0gb2JqW2tleV07XG4gICAgb2JqZWN0cy5wdXNoKG9iaik7XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IG9iamVjdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFyZW50ID0gb2JqZWN0c1tpXTtcbiAgICB2YXIga2V5ID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICB2YXIgY2hpbGQgPSBwYXJlbnRba2V5XTtcbiAgICBpZiAoaSA9PT0gb2JqZWN0cy5sZW5ndGggLSAxIHx8ICFleHBvcnRzLmhhc0tleXMoY2hpbGQpKSBkZWxldGUgcGFyZW50W2tleV07XG4gIH1cbn07XG5cbmV4cG9ydHMuc3VwcG9ydHNQcmVzZW5jZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgJiYgdHlwZW9mIHR5cGUudHJhbnNmb3JtUHJlc2VuY2UgPT09ICdmdW5jdGlvbic7XG59O1xuXG5leHBvcnRzLmNhbGxFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2tzLCBlcnJvcikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIGNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjYWxsZWQ7XG59O1xuXG5leHBvcnRzLnRydXRoeSA9IGZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gISFhcmc7XG59O1xuXG5pZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gIGV4cG9ydHMubmV4dFRpY2sgPSBwcm9jZXNzLm5leHRUaWNrO1xufSBlbHNlIGlmICh0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIGV4cG9ydHMubmV4dFRpY2sgPSBuZXh0VGlja0ltcGwubWVzc2FnZUNoYW5uZWw7XG59IGVsc2Uge1xuICBleHBvcnRzLm5leHRUaWNrID0gbmV4dFRpY2tJbXBsLnNldFRpbWVvdXQ7XG59XG5cbmV4cG9ydHMuY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIChvYmogPT09IHVuZGVmaW5lZCkgPyB1bmRlZmluZWQgOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufTtcblxudmFyIG9iamVjdFByb3RvUHJvcE5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9iamVjdC5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICBpZiAocHJvcCAhPT0gJ19fcHJvdG9fXycpIHtcbiAgICBvYmplY3RQcm90b1Byb3BOYW1lc1twcm9wXSA9IHRydWU7XG4gIH1cbn0pO1xuZXhwb3J0cy5pc0Rhbmdlcm91c1Byb3BlcnR5ID0gZnVuY3Rpb24ocHJvcE5hbWUpIHtcbiAgcmV0dXJuIHByb3BOYW1lID09PSAnX19wcm90b19fJyB8fCBvYmplY3RQcm90b1Byb3BOYW1lc1twcm9wTmFtZV07XG59O1xuXG50cnkge1xuICB2YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbiAgaWYgKHR5cGVvZiB1dGlsLmluaGVyaXRzICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHV0aWwuaW5oZXJpdHMoKScpO1xuICBleHBvcnRzLmluaGVyaXRzID0gdXRpbC5pbmhlcml0cztcbn0gY2F0Y2ggKGUpIHtcbiAgdHJ5IHtcbiAgICBleHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSWYgcnVubmluZyBzaGFyZWRiIGluIGEgYnJvd3NlciwgcGxlYXNlIGluc3RhbGwgdGhlIFwiaW5oZXJpdHNcIiBvciBcInV0aWxcIiBwYWNrYWdlJyk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sharedb/lib/util.js\n");

/***/ })

};
;