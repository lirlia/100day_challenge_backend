{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/noname/Cording/100day_challenge_backend/day32_userspace_net/frontend/app/page.tsx"],"sourcesContent":["\"use client\"; // Assuming client-side interaction for fetching/running scenarios\n\nimport React, { useState, useEffect } from 'react';\n\n// Define a type for scenario data from API\ntype Scenario = {\n  name: string;\n  description: string;\n  filename: string; // Added filename from API\n};\n\n// API Server Base URL (adjust if needed, e.g., use environment variable)\nconst INJECTOR_API_BASE_URL = 'http://localhost:8080';\n\nexport default function Home() {\n  const [scenarios, setScenarios] = useState<Scenario[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [runningScenario, setRunningScenario] = useState<string | null>(null);\n  const [result, setResult] = useState<string | null>(null);\n\n  // Fetch scenarios from Go backend\n  useEffect(() => {\n    const fetchScenarios = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`${INJECTOR_API_BASE_URL}/api/scenarios`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch scenarios: ${response.statusText}`);\n        }\n        const data: Scenario[] = await response.json();\n        setScenarios(data || []);\n      } catch (err: any) {\n        setError(`Failed to load scenarios: ${err.message}`);\n        console.error(err);\n      }\n      setLoading(false);\n    };\n\n    fetchScenarios();\n  }, []);\n\n  const handleRunScenario = async (scenarioFilename: string) => {\n    setRunningScenario(scenarioFilename); // Use filename as identifier\n    setResult(null);\n    setError(null);\n    console.log(`Running scenario: ${scenarioFilename}`);\n    try {\n      const response = await fetch(`${INJECTOR_API_BASE_URL}/api/run-scenario`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ filename: scenarioFilename }),\n      });\n\n      const responseData = await response.json(); // Read body regardless of status\n\n      if (!response.ok) {\n        throw new Error(responseData.message || `Scenario execution failed: ${response.statusText}`);\n      }\n\n      setResult(`Scenario ${scenarioFilename} executed successfully. Result: ${responseData.message}`);\n    } catch (err: any) {\n      setError(`Failed to run scenario ${scenarioFilename}: ${err.message}`);\n      console.error(err);\n    }\n    setRunningScenario(null);\n  };\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center p-12 bg-gradient-to-b from-gray-900 to-gray-800 text-gray-100\">\n      <h1 className=\"text-4xl font-bold mb-8\">Day32 Packet Injector</h1>\n\n      <div className=\"w-full max-w-4xl bg-gray-800 shadow-xl rounded-lg p-6\">\n        <h2 className=\"text-2xl font-semibold mb-4 text-teal-400\">Available Scenarios</h2>\n        {loading && <p className=\"text-gray-400\">Loading scenarios...</p>}\n        {error && <p className=\"text-red-500 bg-gray-900 p-3 rounded\">Error: {error}</p>}\n        {!loading && !error && scenarios.length === 0 && (\n             <p className=\"text-gray-400 italic\">No scenarios found. Make sure the Go API server is running and can access the 'scenarios' directory.</p>\n        )}\n        {!loading && !error && scenarios.length > 0 && (\n          <ul className=\"space-y-3\">\n            {scenarios.map((scenario) => (\n              <li key={scenario.filename} className=\"p-4 bg-gray-700 rounded-md flex justify-between items-center shadow\">\n                <div>\n                  <p className=\"font-medium text-lg text-gray-50\">{scenario.name} <span className=\"text-xs text-gray-500\">({scenario.filename})</span></p>\n                  <p className=\"text-sm text-gray-400\">{scenario.description}</p>\n                </div>\n                <button\n                  onClick={() => handleRunScenario(scenario.filename)} // Pass filename\n                  disabled={!!runningScenario}\n                  className={`px-4 py-2 rounded ${runningScenario ? 'bg-gray-600 cursor-not-allowed' : 'bg-teal-600 hover:bg-teal-700'} text-white transition duration-150 ease-in-out disabled:opacity-50`}\n                >\n                  {runningScenario === scenario.filename ? 'Running...' : 'Run'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n\n        {/* Display result or error from running scenario */}\n        {result && (\n          <div className=\"mt-6 p-4 bg-green-900 border border-green-700 rounded-md text-green-200\">\n            <h3 className=\"font-semibold mb-2\">Execution Result:</h3>\n            <pre className=\"text-sm whitespace-pre-wrap\">{result}</pre>\n          </div>\n        )}\n        {/* Error from handleRunScenario is displayed near the top list now */}\n      </div>\n\n      <div className=\"w-full max-w-4xl mt-8 bg-gray-800 shadow-xl rounded-lg p-6\">\n          <h2 className=\"text-2xl font-semibold mb-4 text-orange-400\">Target Stack Logs</h2>\n          <p className=\"text-gray-400 italic\">\n              Please monitor the logs of the running Day32 network stack (Go process)\n              in its terminal window to observe the detailed effects of the injected packets.\n          </p>\n          {/* Potential future enhancement: Display logs via WebSocket? */}\n      </div>\n\n    </main>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///Users/noname/Cording/100day_challenge_backend/day32_userspace_net/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}}]
}