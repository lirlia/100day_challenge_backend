{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/kenichiro.mikami/Cording/100day_challenge_backend/template/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\n\ntype User = {\n  id: number;\n  name: string;\n  createdAt: string;\n};\n\nexport default function Home() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [name, setName] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // ユーザー一覧を取得\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/users');\n      const data = await response.json();\n      setUsers(data || []);\n    } catch (err) {\n      console.error('Error fetching users:', err);\n      setError('ユーザー情報の取得に失敗しました。');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ユーザーを作成\n  const createUser = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name.trim()) return;\n\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name })\n      });\n\n      if (response.ok) {\n        setName('');\n        fetchUsers();\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error || 'ユーザー作成に失敗しました。');\n      }\n    } catch (err) {\n      console.error('Error creating user:', err);\n      setError('ユーザー作成に失敗しました。');\n    }\n  };\n\n  // 初回マウント時にユーザー一覧を取得\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-8 px-4\">\n      <header className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">100日チャレンジ - Next.js + Prisma</h1>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          このプロジェクトはNext.js、TypeScript、Prisma、SQLiteを使用した100日チャレンジのテンプレートです。\n        </p>\n      </header>\n\n      <div className=\"flex flex-col md:flex-row gap-8\">\n        <div className=\"flex-1\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md mb-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">ユーザー作成</h2>\n            {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n            <form onSubmit={createUser} className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"ユーザー名\"\n                className=\"flex-1 px-4 py-2 border rounded dark:bg-gray-700 dark:border-gray-600\"\n              />\n              <button\n                type=\"submit\"\n                className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n              >\n                追加\n              </button>\n            </form>\n          </div>\n\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-4\">ユーザー一覧</h2>\n            {loading ? (\n              <p>読み込み中...</p>\n            ) : users.length === 0 ? (\n              <p>ユーザーがいません。新しいユーザーを追加してください。</p>\n            ) : (\n              <ul className=\"divide-y dark:divide-gray-700\">\n                {users.map((user) => (\n                  <li key={user.id} className=\"py-3\">\n                    <p className=\"font-medium\">{user.name}</p>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      ID: {user.id} | 作成日: {new Date(user.createdAt).toLocaleString()}\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex-1\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-4\">テンプレートの使い方</h2>\n            <ul className=\"space-y-3\">\n              <li>\n                <strong>データモデル:</strong> <code>prisma/schema.prisma</code> でデータモデルを定義\n              </li>\n              <li>\n                <strong>API:</strong> <code>app/api/</code> にエンドポイントを追加\n              </li>\n              <li>\n                <strong>UI開発:</strong> <code>app/</code> にページを追加、<code>components/</code> に共通コンポーネントを配置\n              </li>\n              <li>\n                <strong>DB操作:</strong> <code>lib/db.ts</code> の Prisma Client を使用\n              </li>\n            </ul>\n            <div className=\"mt-6\">\n              <a\n                href=\"https://github.com/lirlia/100day_challenge_backend\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blue-500 hover:underline\"\n              >\n                → GitHubリポジトリを見る\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///Users/kenichiro.mikami/Cording/100day_challenge_backend/template/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}}]
}