syntax = "proto3";

package dfs;

option go_package = "github.com/lirlia/100day_challenge_backend/day65_distributed_filesystem/proto";

// NameNodeサービス - メタデータ管理
service NameNodeService {
    // ファイル操作
    rpc CreateFile(CreateFileRequest) returns (CreateFileResponse);
    rpc GetFileInfo(GetFileInfoRequest) returns (GetFileInfoResponse);
    rpc ListFiles(ListFilesRequest) returns (ListFilesResponse);
    rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);

    // チャンク操作
    rpc AllocateChunks(AllocateChunksRequest) returns (AllocateChunksResponse);
    rpc GetChunkLocations(GetChunkLocationsRequest) returns (GetChunkLocationsResponse);
    rpc ReportBadChunk(ReportBadChunkRequest) returns (ReportBadChunkResponse);

    // DataNode管理
    rpc RegisterDataNode(RegisterDataNodeRequest) returns (RegisterDataNodeResponse);
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

// DataNodeサービス - チャンクデータ管理
service DataNodeService {
    // チャンク操作
    rpc WriteChunk(stream WriteChunkRequest) returns (WriteChunkResponse);
    rpc ReadChunk(ReadChunkRequest) returns (stream ReadChunkResponse);
    rpc DeleteChunk(DeleteChunkRequest) returns (DeleteChunkResponse);
    rpc CheckChunk(CheckChunkRequest) returns (CheckChunkResponse);

    // ヘルスチェック
    rpc Ping(PingRequest) returns (PingResponse);
}

// メッセージ定義

// ファイル情報
message FileInfo {
    string path = 1;
    int64 size = 2;
    int64 block_size = 3;
    int32 replication = 4;
    int64 created_at = 5;
    int64 modified_at = 6;
    repeated string chunks = 7;
}

// チャンク情報
message ChunkInfo {
    string chunk_id = 1;
    int64 size = 2;
    repeated string datanode_ids = 3;
    string checksum = 4;
}

// DataNode情報
message DataNodeInfo {
    string id = 1;
    string address = 2;
    int32 port = 3;
    int64 capacity = 4;
    int64 used = 5;
    int64 last_heartbeat = 6;
    bool is_alive = 7;
}

// CreateFile関連
message CreateFileRequest {
    string path = 1;
    int64 size = 2;
    int32 replication = 3;
}

message CreateFileResponse {
    bool success = 1;
    string message = 2;
    FileInfo file_info = 3;
}

// GetFileInfo関連
message GetFileInfoRequest {
    string path = 1;
}

message GetFileInfoResponse {
    bool success = 1;
    string message = 2;
    FileInfo file_info = 3;
}

// ListFiles関連
message ListFilesRequest {
    string path = 1;
}

message ListFilesResponse {
    bool success = 1;
    string message = 2;
    repeated FileInfo files = 3;
}

// DeleteFile関連
message DeleteFileRequest {
    string path = 1;
}

message DeleteFileResponse {
    bool success = 1;
    string message = 2;
}

// AllocateChunks関連
message AllocateChunksRequest {
    string file_path = 1;
    int64 file_size = 2;
    int32 replication = 3;
}

message AllocateChunksResponse {
    bool success = 1;
    string message = 2;
    repeated ChunkAllocation allocations = 3;
}

message ChunkAllocation {
    string chunk_id = 1;
    int64 offset = 2;
    int64 size = 3;
    repeated string datanode_ids = 4;
}

// GetChunkLocations関連
message GetChunkLocationsRequest {
    string file_path = 1;
}

message GetChunkLocationsResponse {
    bool success = 1;
    string message = 2;
    repeated ChunkLocation locations = 3;
}

message ChunkLocation {
    string chunk_id = 1;
    int64 offset = 2;
    int64 size = 3;
    repeated DataNodeInfo datanodes = 4;
}

// ReportBadChunk関連
message ReportBadChunkRequest {
    string chunk_id = 1;
    string datanode_id = 2;
    string error_message = 3;
}

message ReportBadChunkResponse {
    bool success = 1;
    string message = 2;
}

// RegisterDataNode関連
message RegisterDataNodeRequest {
    string id = 1;
    string address = 2;
    int32 port = 3;
    int64 capacity = 4;
}

message RegisterDataNodeResponse {
    bool success = 1;
    string message = 2;
}

// Heartbeat関連
message HeartbeatRequest {
    string datanode_id = 1;
    int64 used_capacity = 2;
    repeated string chunk_ids = 3;
}

message HeartbeatResponse {
    bool success = 1;
    string message = 2;
    repeated string commands = 3; // "replicate:chunk_id:target_datanode" など
}

// WriteChunk関連
message WriteChunkRequest {
    string chunk_id = 1;
    int64 offset = 2;
    bytes data = 3;
    bool is_last = 4;
}

message WriteChunkResponse {
    bool success = 1;
    string message = 2;
    string checksum = 3;
}

// ReadChunk関連
message ReadChunkRequest {
    string chunk_id = 1;
    int64 offset = 2;
    int64 size = 3;
}

message ReadChunkResponse {
    bytes data = 1;
    bool is_last = 2;
}

// DeleteChunk関連
message DeleteChunkRequest {
    string chunk_id = 1;
}

message DeleteChunkResponse {
    bool success = 1;
    string message = 2;
}

// CheckChunk関連
message CheckChunkRequest {
    string chunk_id = 1;
}

message CheckChunkResponse {
    bool exists = 1;
    int64 size = 2;
    string checksum = 3;
}

// Ping関連
message PingRequest {}

message PingResponse {
    string message = 1;
    int64 timestamp = 2;
}
