// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/dfs.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ファイル情報
type FileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	BlockSize     int64                  `protobuf:"varint,3,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Replication   int32                  `protobuf:"varint,4,opt,name=replication,proto3" json:"replication,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt    int64                  `protobuf:"varint,6,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	Chunks        []string               `protobuf:"bytes,7,rep,name=chunks,proto3" json:"chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_proto_dfs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *FileInfo) GetReplication() int32 {
	if x != nil {
		return x.Replication
	}
	return 0
}

func (x *FileInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FileInfo) GetModifiedAt() int64 {
	if x != nil {
		return x.ModifiedAt
	}
	return 0
}

func (x *FileInfo) GetChunks() []string {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// チャンク情報
type ChunkInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	DatanodeIds   []string               `protobuf:"bytes,3,rep,name=datanode_ids,json=datanodeIds,proto3" json:"datanode_ids,omitempty"`
	Checksum      string                 `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	mi := &file_proto_dfs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{1}
}

func (x *ChunkInfo) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ChunkInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChunkInfo) GetDatanodeIds() []string {
	if x != nil {
		return x.DatanodeIds
	}
	return nil
}

func (x *ChunkInfo) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// DataNode情報
type DataNodeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Capacity      int64                  `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Used          int64                  `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
	LastHeartbeat int64                  `protobuf:"varint,6,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`
	IsAlive       bool                   `protobuf:"varint,7,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataNodeInfo) Reset() {
	*x = DataNodeInfo{}
	mi := &file_proto_dfs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNodeInfo) ProtoMessage() {}

func (x *DataNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNodeInfo.ProtoReflect.Descriptor instead.
func (*DataNodeInfo) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{2}
}

func (x *DataNodeInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataNodeInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DataNodeInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DataNodeInfo) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *DataNodeInfo) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *DataNodeInfo) GetLastHeartbeat() int64 {
	if x != nil {
		return x.LastHeartbeat
	}
	return 0
}

func (x *DataNodeInfo) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

// CreateFile関連
type CreateFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Replication   int32                  `protobuf:"varint,3,opt,name=replication,proto3" json:"replication,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFileRequest) Reset() {
	*x = CreateFileRequest{}
	mi := &file_proto_dfs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileRequest) ProtoMessage() {}

func (x *CreateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileRequest.ProtoReflect.Descriptor instead.
func (*CreateFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateFileRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateFileRequest) GetReplication() int32 {
	if x != nil {
		return x.Replication
	}
	return 0
}

type CreateFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	FileInfo      *FileInfo              `protobuf:"bytes,3,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFileResponse) Reset() {
	*x = CreateFileResponse{}
	mi := &file_proto_dfs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileResponse) ProtoMessage() {}

func (x *CreateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileResponse.ProtoReflect.Descriptor instead.
func (*CreateFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateFileResponse) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

// GetFileInfo関連
type GetFileInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileInfoRequest) Reset() {
	*x = GetFileInfoRequest{}
	mi := &file_proto_dfs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileInfoRequest) ProtoMessage() {}

func (x *GetFileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileInfoRequest.ProtoReflect.Descriptor instead.
func (*GetFileInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{5}
}

func (x *GetFileInfoRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetFileInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	FileInfo      *FileInfo              `protobuf:"bytes,3,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileInfoResponse) Reset() {
	*x = GetFileInfoResponse{}
	mi := &file_proto_dfs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileInfoResponse) ProtoMessage() {}

func (x *GetFileInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileInfoResponse.ProtoReflect.Descriptor instead.
func (*GetFileInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{6}
}

func (x *GetFileInfoResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetFileInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetFileInfoResponse) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

// ListFiles関連
type ListFilesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFilesRequest) Reset() {
	*x = ListFilesRequest{}
	mi := &file_proto_dfs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesRequest) ProtoMessage() {}

func (x *ListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesRequest.ProtoReflect.Descriptor instead.
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{7}
}

func (x *ListFilesRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ListFilesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Files         []*FileInfo            `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFilesResponse) Reset() {
	*x = ListFilesResponse{}
	mi := &file_proto_dfs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesResponse) ProtoMessage() {}

func (x *ListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesResponse.ProtoReflect.Descriptor instead.
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{8}
}

func (x *ListFilesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListFilesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListFilesResponse) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

// DeleteFile関連
type DeleteFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileRequest) Reset() {
	*x = DeleteFileRequest{}
	mi := &file_proto_dfs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileRequest) ProtoMessage() {}

func (x *DeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DeleteFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileResponse) Reset() {
	*x = DeleteFileResponse{}
	mi := &file_proto_dfs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileResponse) ProtoMessage() {}

func (x *DeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// AllocateChunks関連
type AllocateChunksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	FileSize      int64                  `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Replication   int32                  `protobuf:"varint,3,opt,name=replication,proto3" json:"replication,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllocateChunksRequest) Reset() {
	*x = AllocateChunksRequest{}
	mi := &file_proto_dfs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocateChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateChunksRequest) ProtoMessage() {}

func (x *AllocateChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateChunksRequest.ProtoReflect.Descriptor instead.
func (*AllocateChunksRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{11}
}

func (x *AllocateChunksRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *AllocateChunksRequest) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *AllocateChunksRequest) GetReplication() int32 {
	if x != nil {
		return x.Replication
	}
	return 0
}

type AllocateChunksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Allocations   []*ChunkAllocation     `protobuf:"bytes,3,rep,name=allocations,proto3" json:"allocations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllocateChunksResponse) Reset() {
	*x = AllocateChunksResponse{}
	mi := &file_proto_dfs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocateChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateChunksResponse) ProtoMessage() {}

func (x *AllocateChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateChunksResponse.ProtoReflect.Descriptor instead.
func (*AllocateChunksResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{12}
}

func (x *AllocateChunksResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AllocateChunksResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AllocateChunksResponse) GetAllocations() []*ChunkAllocation {
	if x != nil {
		return x.Allocations
	}
	return nil
}

type ChunkAllocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	DatanodeIds   []string               `protobuf:"bytes,4,rep,name=datanode_ids,json=datanodeIds,proto3" json:"datanode_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkAllocation) Reset() {
	*x = ChunkAllocation{}
	mi := &file_proto_dfs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkAllocation) ProtoMessage() {}

func (x *ChunkAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkAllocation.ProtoReflect.Descriptor instead.
func (*ChunkAllocation) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{13}
}

func (x *ChunkAllocation) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ChunkAllocation) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ChunkAllocation) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChunkAllocation) GetDatanodeIds() []string {
	if x != nil {
		return x.DatanodeIds
	}
	return nil
}

// GetChunkLocations関連
type GetChunkLocationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkLocationsRequest) Reset() {
	*x = GetChunkLocationsRequest{}
	mi := &file_proto_dfs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkLocationsRequest) ProtoMessage() {}

func (x *GetChunkLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkLocationsRequest.ProtoReflect.Descriptor instead.
func (*GetChunkLocationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{14}
}

func (x *GetChunkLocationsRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type GetChunkLocationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Locations     []*ChunkLocation       `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkLocationsResponse) Reset() {
	*x = GetChunkLocationsResponse{}
	mi := &file_proto_dfs_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkLocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkLocationsResponse) ProtoMessage() {}

func (x *GetChunkLocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkLocationsResponse.ProtoReflect.Descriptor instead.
func (*GetChunkLocationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{15}
}

func (x *GetChunkLocationsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetChunkLocationsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetChunkLocationsResponse) GetLocations() []*ChunkLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

type ChunkLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Datanodes     []*DataNodeInfo        `protobuf:"bytes,4,rep,name=datanodes,proto3" json:"datanodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkLocation) Reset() {
	*x = ChunkLocation{}
	mi := &file_proto_dfs_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkLocation) ProtoMessage() {}

func (x *ChunkLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkLocation.ProtoReflect.Descriptor instead.
func (*ChunkLocation) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{16}
}

func (x *ChunkLocation) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ChunkLocation) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ChunkLocation) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChunkLocation) GetDatanodes() []*DataNodeInfo {
	if x != nil {
		return x.Datanodes
	}
	return nil
}

// ReportBadChunk関連
type ReportBadChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	DatanodeId    string                 `protobuf:"bytes,2,opt,name=datanode_id,json=datanodeId,proto3" json:"datanode_id,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportBadChunkRequest) Reset() {
	*x = ReportBadChunkRequest{}
	mi := &file_proto_dfs_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportBadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBadChunkRequest) ProtoMessage() {}

func (x *ReportBadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBadChunkRequest.ProtoReflect.Descriptor instead.
func (*ReportBadChunkRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{17}
}

func (x *ReportBadChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ReportBadChunkRequest) GetDatanodeId() string {
	if x != nil {
		return x.DatanodeId
	}
	return ""
}

func (x *ReportBadChunkRequest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ReportBadChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportBadChunkResponse) Reset() {
	*x = ReportBadChunkResponse{}
	mi := &file_proto_dfs_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportBadChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBadChunkResponse) ProtoMessage() {}

func (x *ReportBadChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBadChunkResponse.ProtoReflect.Descriptor instead.
func (*ReportBadChunkResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{18}
}

func (x *ReportBadChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReportBadChunkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// RegisterDataNode関連
type RegisterDataNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Capacity      int64                  `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDataNodeRequest) Reset() {
	*x = RegisterDataNodeRequest{}
	mi := &file_proto_dfs_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDataNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDataNodeRequest) ProtoMessage() {}

func (x *RegisterDataNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDataNodeRequest.ProtoReflect.Descriptor instead.
func (*RegisterDataNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterDataNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterDataNodeRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RegisterDataNodeRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RegisterDataNodeRequest) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type RegisterDataNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDataNodeResponse) Reset() {
	*x = RegisterDataNodeResponse{}
	mi := &file_proto_dfs_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDataNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDataNodeResponse) ProtoMessage() {}

func (x *RegisterDataNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDataNodeResponse.ProtoReflect.Descriptor instead.
func (*RegisterDataNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{20}
}

func (x *RegisterDataNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterDataNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Heartbeat関連
type HeartbeatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DatanodeId    string                 `protobuf:"bytes,1,opt,name=datanode_id,json=datanodeId,proto3" json:"datanode_id,omitempty"`
	UsedCapacity  int64                  `protobuf:"varint,2,opt,name=used_capacity,json=usedCapacity,proto3" json:"used_capacity,omitempty"`
	ChunkIds      []string               `protobuf:"bytes,3,rep,name=chunk_ids,json=chunkIds,proto3" json:"chunk_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	mi := &file_proto_dfs_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{21}
}

func (x *HeartbeatRequest) GetDatanodeId() string {
	if x != nil {
		return x.DatanodeId
	}
	return ""
}

func (x *HeartbeatRequest) GetUsedCapacity() int64 {
	if x != nil {
		return x.UsedCapacity
	}
	return 0
}

func (x *HeartbeatRequest) GetChunkIds() []string {
	if x != nil {
		return x.ChunkIds
	}
	return nil
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Commands      []string               `protobuf:"bytes,3,rep,name=commands,proto3" json:"commands,omitempty"` // "replicate:chunk_id:target_datanode" など
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	mi := &file_proto_dfs_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{22}
}

func (x *HeartbeatResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *HeartbeatResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HeartbeatResponse) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

// WriteChunk関連
type WriteChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	IsLast        bool                   `protobuf:"varint,4,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteChunkRequest) Reset() {
	*x = WriteChunkRequest{}
	mi := &file_proto_dfs_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteChunkRequest) ProtoMessage() {}

func (x *WriteChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteChunkRequest.ProtoReflect.Descriptor instead.
func (*WriteChunkRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{23}
}

func (x *WriteChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *WriteChunkRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WriteChunkRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WriteChunkRequest) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

type WriteChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Checksum      string                 `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteChunkResponse) Reset() {
	*x = WriteChunkResponse{}
	mi := &file_proto_dfs_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteChunkResponse) ProtoMessage() {}

func (x *WriteChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteChunkResponse.ProtoReflect.Descriptor instead.
func (*WriteChunkResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{24}
}

func (x *WriteChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *WriteChunkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WriteChunkResponse) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// ReadChunk関連
type ReadChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadChunkRequest) Reset() {
	*x = ReadChunkRequest{}
	mi := &file_proto_dfs_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadChunkRequest) ProtoMessage() {}

func (x *ReadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadChunkRequest.ProtoReflect.Descriptor instead.
func (*ReadChunkRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{25}
}

func (x *ReadChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ReadChunkRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadChunkRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ReadChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	IsLast        bool                   `protobuf:"varint,2,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadChunkResponse) Reset() {
	*x = ReadChunkResponse{}
	mi := &file_proto_dfs_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadChunkResponse) ProtoMessage() {}

func (x *ReadChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadChunkResponse.ProtoReflect.Descriptor instead.
func (*ReadChunkResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{26}
}

func (x *ReadChunkResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReadChunkResponse) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

// DeleteChunk関連
type DeleteChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunkRequest) Reset() {
	*x = DeleteChunkRequest{}
	mi := &file_proto_dfs_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkRequest) ProtoMessage() {}

func (x *DeleteChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkRequest.ProtoReflect.Descriptor instead.
func (*DeleteChunkRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type DeleteChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChunkResponse) Reset() {
	*x = DeleteChunkResponse{}
	mi := &file_proto_dfs_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkResponse) ProtoMessage() {}

func (x *DeleteChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkResponse.ProtoReflect.Descriptor instead.
func (*DeleteChunkResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteChunkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// CheckChunk関連
type CheckChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckChunkRequest) Reset() {
	*x = CheckChunkRequest{}
	mi := &file_proto_dfs_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChunkRequest) ProtoMessage() {}

func (x *CheckChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChunkRequest.ProtoReflect.Descriptor instead.
func (*CheckChunkRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{29}
}

func (x *CheckChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

type CheckChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exists        bool                   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Checksum      string                 `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckChunkResponse) Reset() {
	*x = CheckChunkResponse{}
	mi := &file_proto_dfs_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChunkResponse) ProtoMessage() {}

func (x *CheckChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChunkResponse.ProtoReflect.Descriptor instead.
func (*CheckChunkResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{30}
}

func (x *CheckChunkResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *CheckChunkResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CheckChunkResponse) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// Ping関連
type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_proto_dfs_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{31}
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_proto_dfs_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dfs_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_proto_dfs_proto_rawDescGZIP(), []int{32}
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PingResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_proto_dfs_proto protoreflect.FileDescriptor

const file_proto_dfs_proto_rawDesc = "" +
	"\n" +
	"\x0fproto/dfs.proto\x12\x03dfs\"\xcb\x01\n" +
	"\bFileInfo\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12\x1d\n" +
	"\n" +
	"block_size\x18\x03 \x01(\x03R\tblockSize\x12 \n" +
	"\vreplication\x18\x04 \x01(\x05R\vreplication\x12\x1d\n" +
	"\n" +
	"created_at\x18\x05 \x01(\x03R\tcreatedAt\x12\x1f\n" +
	"\vmodified_at\x18\x06 \x01(\x03R\n" +
	"modifiedAt\x12\x16\n" +
	"\x06chunks\x18\a \x03(\tR\x06chunks\"y\n" +
	"\tChunkInfo\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12!\n" +
	"\fdatanode_ids\x18\x03 \x03(\tR\vdatanodeIds\x12\x1a\n" +
	"\bchecksum\x18\x04 \x01(\tR\bchecksum\"\xbe\x01\n" +
	"\fDataNodeInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x03 \x01(\x05R\x04port\x12\x1a\n" +
	"\bcapacity\x18\x04 \x01(\x03R\bcapacity\x12\x12\n" +
	"\x04used\x18\x05 \x01(\x03R\x04used\x12%\n" +
	"\x0elast_heartbeat\x18\x06 \x01(\x03R\rlastHeartbeat\x12\x19\n" +
	"\bis_alive\x18\a \x01(\bR\aisAlive\"]\n" +
	"\x11CreateFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12 \n" +
	"\vreplication\x18\x03 \x01(\x05R\vreplication\"t\n" +
	"\x12CreateFileResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12*\n" +
	"\tfile_info\x18\x03 \x01(\v2\r.dfs.FileInfoR\bfileInfo\"(\n" +
	"\x12GetFileInfoRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"u\n" +
	"\x13GetFileInfoResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12*\n" +
	"\tfile_info\x18\x03 \x01(\v2\r.dfs.FileInfoR\bfileInfo\"&\n" +
	"\x10ListFilesRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"l\n" +
	"\x11ListFilesResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12#\n" +
	"\x05files\x18\x03 \x03(\v2\r.dfs.FileInfoR\x05files\"'\n" +
	"\x11DeleteFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"H\n" +
	"\x12DeleteFileResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"s\n" +
	"\x15AllocateChunksRequest\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x1b\n" +
	"\tfile_size\x18\x02 \x01(\x03R\bfileSize\x12 \n" +
	"\vreplication\x18\x03 \x01(\x05R\vreplication\"\x84\x01\n" +
	"\x16AllocateChunksResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x126\n" +
	"\vallocations\x18\x03 \x03(\v2\x14.dfs.ChunkAllocationR\vallocations\"{\n" +
	"\x0fChunkAllocation\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\x12!\n" +
	"\fdatanode_ids\x18\x04 \x03(\tR\vdatanodeIds\"7\n" +
	"\x18GetChunkLocationsRequest\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\"\x81\x01\n" +
	"\x19GetChunkLocationsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x120\n" +
	"\tlocations\x18\x03 \x03(\v2\x12.dfs.ChunkLocationR\tlocations\"\x87\x01\n" +
	"\rChunkLocation\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\x12/\n" +
	"\tdatanodes\x18\x04 \x03(\v2\x11.dfs.DataNodeInfoR\tdatanodes\"x\n" +
	"\x15ReportBadChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x1f\n" +
	"\vdatanode_id\x18\x02 \x01(\tR\n" +
	"datanodeId\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"L\n" +
	"\x16ReportBadChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"s\n" +
	"\x17RegisterDataNodeRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x03 \x01(\x05R\x04port\x12\x1a\n" +
	"\bcapacity\x18\x04 \x01(\x03R\bcapacity\"N\n" +
	"\x18RegisterDataNodeResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"u\n" +
	"\x10HeartbeatRequest\x12\x1f\n" +
	"\vdatanode_id\x18\x01 \x01(\tR\n" +
	"datanodeId\x12#\n" +
	"\rused_capacity\x18\x02 \x01(\x03R\fusedCapacity\x12\x1b\n" +
	"\tchunk_ids\x18\x03 \x03(\tR\bchunkIds\"c\n" +
	"\x11HeartbeatResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1a\n" +
	"\bcommands\x18\x03 \x03(\tR\bcommands\"s\n" +
	"\x11WriteChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12\x17\n" +
	"\ais_last\x18\x04 \x01(\bR\x06isLast\"d\n" +
	"\x12WriteChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1a\n" +
	"\bchecksum\x18\x03 \x01(\tR\bchecksum\"Y\n" +
	"\x10ReadChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\"@\n" +
	"\x11ReadChunkResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x17\n" +
	"\ais_last\x18\x02 \x01(\bR\x06isLast\"/\n" +
	"\x12DeleteChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\"I\n" +
	"\x13DeleteChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\".\n" +
	"\x11CheckChunkRequest\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\"\\\n" +
	"\x12CheckChunkResponse\x12\x16\n" +
	"\x06exists\x18\x01 \x01(\bR\x06exists\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12\x1a\n" +
	"\bchecksum\x18\x03 \x01(\tR\bchecksum\"\r\n" +
	"\vPingRequest\"F\n" +
	"\fPingResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp2\x84\x05\n" +
	"\x0fNameNodeService\x12=\n" +
	"\n" +
	"CreateFile\x12\x16.dfs.CreateFileRequest\x1a\x17.dfs.CreateFileResponse\x12@\n" +
	"\vGetFileInfo\x12\x17.dfs.GetFileInfoRequest\x1a\x18.dfs.GetFileInfoResponse\x12:\n" +
	"\tListFiles\x12\x15.dfs.ListFilesRequest\x1a\x16.dfs.ListFilesResponse\x12=\n" +
	"\n" +
	"DeleteFile\x12\x16.dfs.DeleteFileRequest\x1a\x17.dfs.DeleteFileResponse\x12I\n" +
	"\x0eAllocateChunks\x12\x1a.dfs.AllocateChunksRequest\x1a\x1b.dfs.AllocateChunksResponse\x12R\n" +
	"\x11GetChunkLocations\x12\x1d.dfs.GetChunkLocationsRequest\x1a\x1e.dfs.GetChunkLocationsResponse\x12I\n" +
	"\x0eReportBadChunk\x12\x1a.dfs.ReportBadChunkRequest\x1a\x1b.dfs.ReportBadChunkResponse\x12O\n" +
	"\x10RegisterDataNode\x12\x1c.dfs.RegisterDataNodeRequest\x1a\x1d.dfs.RegisterDataNodeResponse\x12:\n" +
	"\tHeartbeat\x12\x15.dfs.HeartbeatRequest\x1a\x16.dfs.HeartbeatResponse2\xbe\x02\n" +
	"\x0fDataNodeService\x12?\n" +
	"\n" +
	"WriteChunk\x12\x16.dfs.WriteChunkRequest\x1a\x17.dfs.WriteChunkResponse(\x01\x12<\n" +
	"\tReadChunk\x12\x15.dfs.ReadChunkRequest\x1a\x16.dfs.ReadChunkResponse0\x01\x12@\n" +
	"\vDeleteChunk\x12\x17.dfs.DeleteChunkRequest\x1a\x18.dfs.DeleteChunkResponse\x12=\n" +
	"\n" +
	"CheckChunk\x12\x16.dfs.CheckChunkRequest\x1a\x17.dfs.CheckChunkResponse\x12+\n" +
	"\x04Ping\x12\x10.dfs.PingRequest\x1a\x11.dfs.PingResponseBOZMgithub.com/lirlia/100day_challenge_backend/day65_distributed_filesystem/protob\x06proto3"

var (
	file_proto_dfs_proto_rawDescOnce sync.Once
	file_proto_dfs_proto_rawDescData []byte
)

func file_proto_dfs_proto_rawDescGZIP() []byte {
	file_proto_dfs_proto_rawDescOnce.Do(func() {
		file_proto_dfs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_dfs_proto_rawDesc), len(file_proto_dfs_proto_rawDesc)))
	})
	return file_proto_dfs_proto_rawDescData
}

var file_proto_dfs_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_proto_dfs_proto_goTypes = []any{
	(*FileInfo)(nil),                  // 0: dfs.FileInfo
	(*ChunkInfo)(nil),                 // 1: dfs.ChunkInfo
	(*DataNodeInfo)(nil),              // 2: dfs.DataNodeInfo
	(*CreateFileRequest)(nil),         // 3: dfs.CreateFileRequest
	(*CreateFileResponse)(nil),        // 4: dfs.CreateFileResponse
	(*GetFileInfoRequest)(nil),        // 5: dfs.GetFileInfoRequest
	(*GetFileInfoResponse)(nil),       // 6: dfs.GetFileInfoResponse
	(*ListFilesRequest)(nil),          // 7: dfs.ListFilesRequest
	(*ListFilesResponse)(nil),         // 8: dfs.ListFilesResponse
	(*DeleteFileRequest)(nil),         // 9: dfs.DeleteFileRequest
	(*DeleteFileResponse)(nil),        // 10: dfs.DeleteFileResponse
	(*AllocateChunksRequest)(nil),     // 11: dfs.AllocateChunksRequest
	(*AllocateChunksResponse)(nil),    // 12: dfs.AllocateChunksResponse
	(*ChunkAllocation)(nil),           // 13: dfs.ChunkAllocation
	(*GetChunkLocationsRequest)(nil),  // 14: dfs.GetChunkLocationsRequest
	(*GetChunkLocationsResponse)(nil), // 15: dfs.GetChunkLocationsResponse
	(*ChunkLocation)(nil),             // 16: dfs.ChunkLocation
	(*ReportBadChunkRequest)(nil),     // 17: dfs.ReportBadChunkRequest
	(*ReportBadChunkResponse)(nil),    // 18: dfs.ReportBadChunkResponse
	(*RegisterDataNodeRequest)(nil),   // 19: dfs.RegisterDataNodeRequest
	(*RegisterDataNodeResponse)(nil),  // 20: dfs.RegisterDataNodeResponse
	(*HeartbeatRequest)(nil),          // 21: dfs.HeartbeatRequest
	(*HeartbeatResponse)(nil),         // 22: dfs.HeartbeatResponse
	(*WriteChunkRequest)(nil),         // 23: dfs.WriteChunkRequest
	(*WriteChunkResponse)(nil),        // 24: dfs.WriteChunkResponse
	(*ReadChunkRequest)(nil),          // 25: dfs.ReadChunkRequest
	(*ReadChunkResponse)(nil),         // 26: dfs.ReadChunkResponse
	(*DeleteChunkRequest)(nil),        // 27: dfs.DeleteChunkRequest
	(*DeleteChunkResponse)(nil),       // 28: dfs.DeleteChunkResponse
	(*CheckChunkRequest)(nil),         // 29: dfs.CheckChunkRequest
	(*CheckChunkResponse)(nil),        // 30: dfs.CheckChunkResponse
	(*PingRequest)(nil),               // 31: dfs.PingRequest
	(*PingResponse)(nil),              // 32: dfs.PingResponse
}
var file_proto_dfs_proto_depIdxs = []int32{
	0,  // 0: dfs.CreateFileResponse.file_info:type_name -> dfs.FileInfo
	0,  // 1: dfs.GetFileInfoResponse.file_info:type_name -> dfs.FileInfo
	0,  // 2: dfs.ListFilesResponse.files:type_name -> dfs.FileInfo
	13, // 3: dfs.AllocateChunksResponse.allocations:type_name -> dfs.ChunkAllocation
	16, // 4: dfs.GetChunkLocationsResponse.locations:type_name -> dfs.ChunkLocation
	2,  // 5: dfs.ChunkLocation.datanodes:type_name -> dfs.DataNodeInfo
	3,  // 6: dfs.NameNodeService.CreateFile:input_type -> dfs.CreateFileRequest
	5,  // 7: dfs.NameNodeService.GetFileInfo:input_type -> dfs.GetFileInfoRequest
	7,  // 8: dfs.NameNodeService.ListFiles:input_type -> dfs.ListFilesRequest
	9,  // 9: dfs.NameNodeService.DeleteFile:input_type -> dfs.DeleteFileRequest
	11, // 10: dfs.NameNodeService.AllocateChunks:input_type -> dfs.AllocateChunksRequest
	14, // 11: dfs.NameNodeService.GetChunkLocations:input_type -> dfs.GetChunkLocationsRequest
	17, // 12: dfs.NameNodeService.ReportBadChunk:input_type -> dfs.ReportBadChunkRequest
	19, // 13: dfs.NameNodeService.RegisterDataNode:input_type -> dfs.RegisterDataNodeRequest
	21, // 14: dfs.NameNodeService.Heartbeat:input_type -> dfs.HeartbeatRequest
	23, // 15: dfs.DataNodeService.WriteChunk:input_type -> dfs.WriteChunkRequest
	25, // 16: dfs.DataNodeService.ReadChunk:input_type -> dfs.ReadChunkRequest
	27, // 17: dfs.DataNodeService.DeleteChunk:input_type -> dfs.DeleteChunkRequest
	29, // 18: dfs.DataNodeService.CheckChunk:input_type -> dfs.CheckChunkRequest
	31, // 19: dfs.DataNodeService.Ping:input_type -> dfs.PingRequest
	4,  // 20: dfs.NameNodeService.CreateFile:output_type -> dfs.CreateFileResponse
	6,  // 21: dfs.NameNodeService.GetFileInfo:output_type -> dfs.GetFileInfoResponse
	8,  // 22: dfs.NameNodeService.ListFiles:output_type -> dfs.ListFilesResponse
	10, // 23: dfs.NameNodeService.DeleteFile:output_type -> dfs.DeleteFileResponse
	12, // 24: dfs.NameNodeService.AllocateChunks:output_type -> dfs.AllocateChunksResponse
	15, // 25: dfs.NameNodeService.GetChunkLocations:output_type -> dfs.GetChunkLocationsResponse
	18, // 26: dfs.NameNodeService.ReportBadChunk:output_type -> dfs.ReportBadChunkResponse
	20, // 27: dfs.NameNodeService.RegisterDataNode:output_type -> dfs.RegisterDataNodeResponse
	22, // 28: dfs.NameNodeService.Heartbeat:output_type -> dfs.HeartbeatResponse
	24, // 29: dfs.DataNodeService.WriteChunk:output_type -> dfs.WriteChunkResponse
	26, // 30: dfs.DataNodeService.ReadChunk:output_type -> dfs.ReadChunkResponse
	28, // 31: dfs.DataNodeService.DeleteChunk:output_type -> dfs.DeleteChunkResponse
	30, // 32: dfs.DataNodeService.CheckChunk:output_type -> dfs.CheckChunkResponse
	32, // 33: dfs.DataNodeService.Ping:output_type -> dfs.PingResponse
	20, // [20:34] is the sub-list for method output_type
	6,  // [6:20] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_proto_dfs_proto_init() }
func file_proto_dfs_proto_init() {
	if File_proto_dfs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_dfs_proto_rawDesc), len(file_proto_dfs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_dfs_proto_goTypes,
		DependencyIndexes: file_proto_dfs_proto_depIdxs,
		MessageInfos:      file_proto_dfs_proto_msgTypes,
	}.Build()
	File_proto_dfs_proto = out.File
	file_proto_dfs_proto_goTypes = nil
	file_proto_dfs_proto_depIdxs = nil
}
